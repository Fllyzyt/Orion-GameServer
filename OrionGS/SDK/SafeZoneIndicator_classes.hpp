#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SafeZoneIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SafeZoneIndicator.SafeZoneIndicator_C
// 0x0140 (0x05C0 - 0x0480)
class ASafeZoneIndicator_C final  : public AFortSafeZoneIndicator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0480(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   BP_StormMeshRotator;                               // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricStormFadeTimeline_StormFadeIn_5D8CED344AED096A33ABDAA94E2E18CD; // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VolumetricStormFadeTimeline__Direction_5D8CED344AED096A33ABDAA94E2E18CD; // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7281[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VolumetricStormFadeTimeline;                       // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C; // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C; // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7282[0x3];                                     // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StormFadeTimeline;                                 // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C; // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C; // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7283[0x3];                                     // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Pre_Damage_Audio_Ramp;                             // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldBoundaryLoopSound;                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldingLoopSound;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldingStartTime_0;                                // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7284[0x4];                                     // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HoldingLoopTickSound;                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SafeZoneMID;                                       // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MegaStormDamageTimer;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MegastormAudioDuration;                            // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7285[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSafeZoneStateChangeDispatcher;                   // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EFortSafeZoneState                            SafeZoneState;                                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7286[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFortSafeZoneState, struct FVector2D>    SafeZoneStateThunderFreqs;                         // 0x0510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EFortSafeZoneState, float>               SafeZoneStateThunderDuration;                      // 0x0560(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          OceanEnabled;                                      // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7287[0x3];                                     // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberofImpactEffects;                             // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImapctFX_MaxHeight;                                // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImapctFX_MinHeight;                                // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnSafeZoneStateChangeDispatcher__DelegateSignature(EFortSafeZoneState Param_SafeZoneState);
	void ExecuteUbergraph_SafeZoneIndicator(int32 EntryPoint, float CallFunc_GetSafeZoneFinishShrinkTime_ReturnValue, float CallFunc_GetSafeZoneStartShrinkTime_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, float CallFunc_Subtract_FloatFloat_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue_1, const struct FLinearColor& K2Node_MakeStruct_LinearColor, float CallFunc_GetTimelineLength_ReturnValue, float K2Node_CustomEvent_NewParam, class AAthena_GameState_C* CallFunc_GetAthenaGameState_AthenaGS, float CallFunc_GetTimeSinceSafeZonesStart_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue_1, float CallFunc_Divide_FloatFloat_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue_2, class UAudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_2, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const struct FVector& CallFunc_GetRandomPointInPlayerDir_Position, const struct FVector2D& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue_3, const struct FVector& CallFunc_GetRandomPointOnBoundary_Position, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, EFortSafeZoneState K2Node_Event_NewState, bool K2Node_Event_bInitial, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Map_Find_Value_1, bool CallFunc_Map_Find_ReturnValue_1, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue_4, bool CallFunc_GetIsPlayingReplay_ReturnValue, class ABP_SafeZoneStorm_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);
	void DestroySafeZone();
	void ReceiveBeginPlay();
	void OnSafeZoneStateChange(EFortSafeZoneState NewState, bool bInitial);
	void Stop_Distant_Storm_Oneshots();
	void Trigger_Distant_Storm_Oneshot();
	void Play_Storm_Grow_Audio();
	void Start_Megastorm_Audio();
	void Megastorm_Pre_Damage_Tell();
	void ResetSafeZoneScale();
	void OnBeginStartingStateEffectsEvent();
	void ReceiveDestroyed();
	void Stormy(float NewParam);
	void VolumetricStormFadeTimeline__UpdateFunc();
	void VolumetricStormFadeTimeline__FinishedFunc();
	void StormFadeTimeline__UpdateFunc();
	void StormFadeTimeline__FinishedFunc();
	void Pre_Damage_Audio_Ramp__UpdateFunc();
	void Pre_Damage_Audio_Ramp__FinishedFunc();
	void UserConstructionScript(bool CallFunc_IsDedicatedServer_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);
	void InitClosestPointAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, class UAudioComponent* CallFunc_SpawnSound2D_ReturnValue, class UAudioComponent* CallFunc_SpawnSound2D_ReturnValue_1, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, class UAudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue);
	void HandleInsideOutsideMix();
	void GetAthenaGameState(class AAthena_GameState_C** AthenaGS, class AGameStateBase* CallFunc_GetGameState_ReturnValue, class AAthena_GameState_C* K2Node_DynamicCast_AsAthena_Game_State, bool K2Node_DynamicCast_bSuccess);
	void GetRandomPointOnBoundary(struct FVector* Position, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetSafeZoneRadius_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const struct FVector& CallFunc_RotateAngleAxis_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue);
	void GetRandomPointInPlayerDir(struct FVector* Position, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const struct FVector& CallFunc_GetRandomPointOnBoundary_Position, const struct FVector& CallFunc_RotateAngleAxis_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X_1, float CallFunc_BreakVector_Y_1, float CallFunc_BreakVector_Z_1, const struct FVector& CallFunc_MakeVector_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SafeZoneIndicator_C">();
	}
	static class ASafeZoneIndicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASafeZoneIndicator_C>();
	}
};
static_assert(alignof(ASafeZoneIndicator_C) == 0x000008, "Wrong alinment on ASafeZoneIndicator_C");
static_assert(sizeof(ASafeZoneIndicator_C) == 0x0005C0, "Wrong size on ASafeZoneIndicator_C");
static_assert(offsetof(ASafeZoneIndicator_C, UberGraphFrame) == 0x000480, "Member 'ASafeZoneIndicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, BP_StormMeshRotator) == 0x000488, "Member 'ASafeZoneIndicator_C::BP_StormMeshRotator' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, VolumetricStormFadeTimeline_StormFadeIn_5D8CED344AED096A33ABDAA94E2E18CD) == 0x000490, "Member 'ASafeZoneIndicator_C::VolumetricStormFadeTimeline_StormFadeIn_5D8CED344AED096A33ABDAA94E2E18CD' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, VolumetricStormFadeTimeline__Direction_5D8CED344AED096A33ABDAA94E2E18CD) == 0x000494, "Member 'ASafeZoneIndicator_C::VolumetricStormFadeTimeline__Direction_5D8CED344AED096A33ABDAA94E2E18CD' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, VolumetricStormFadeTimeline) == 0x000498, "Member 'ASafeZoneIndicator_C::VolumetricStormFadeTimeline' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C) == 0x0004A0, "Member 'ASafeZoneIndicator_C::StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C) == 0x0004A4, "Member 'ASafeZoneIndicator_C::StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline) == 0x0004A8, "Member 'ASafeZoneIndicator_C::StormFadeTimeline' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C) == 0x0004B0, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C) == 0x0004B4, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp) == 0x0004B8, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, ShieldBoundaryLoopSound) == 0x0004C0, "Member 'ASafeZoneIndicator_C::ShieldBoundaryLoopSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingLoopSound) == 0x0004C8, "Member 'ASafeZoneIndicator_C::HoldingLoopSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingStartTime_0) == 0x0004D0, "Member 'ASafeZoneIndicator_C::HoldingStartTime_0' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingLoopTickSound) == 0x0004D8, "Member 'ASafeZoneIndicator_C::HoldingLoopTickSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneMID) == 0x0004E0, "Member 'ASafeZoneIndicator_C::SafeZoneMID' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, MegaStormDamageTimer) == 0x0004E8, "Member 'ASafeZoneIndicator_C::MegaStormDamageTimer' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, MegastormAudioDuration) == 0x0004F0, "Member 'ASafeZoneIndicator_C::MegastormAudioDuration' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, OnSafeZoneStateChangeDispatcher) == 0x0004F8, "Member 'ASafeZoneIndicator_C::OnSafeZoneStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneState) == 0x000508, "Member 'ASafeZoneIndicator_C::SafeZoneState' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneStateThunderFreqs) == 0x000510, "Member 'ASafeZoneIndicator_C::SafeZoneStateThunderFreqs' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneStateThunderDuration) == 0x000560, "Member 'ASafeZoneIndicator_C::SafeZoneStateThunderDuration' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, OceanEnabled) == 0x0005B0, "Member 'ASafeZoneIndicator_C::OceanEnabled' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, NumberofImpactEffects) == 0x0005B4, "Member 'ASafeZoneIndicator_C::NumberofImpactEffects' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, ImapctFX_MaxHeight) == 0x0005B8, "Member 'ASafeZoneIndicator_C::ImapctFX_MaxHeight' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, ImapctFX_MinHeight) == 0x0005BC, "Member 'ASafeZoneIndicator_C::ImapctFX_MinHeight' has a wrong offset!");

}

