#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyguardRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum BodyguardRuntime.EBodyguardPlayerRole
// NumValues: 0x0004
enum class EBodyguardPlayerRole : uint8
{
	None                                     = 0,
	Bodyguard                                = 1,
	VIP                                      = 2,
	MAX                                      = 3,
};

// ScriptStruct BodyguardRuntime.BodyguardVIPPlayerData
// 0x0018 (0x0018 - 0x0000)
struct FBodyguardVIPPlayerData final 
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHealth;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBeingRevived;                                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowItemPickup;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBodyguardVIPPlayerData) == 0x000008, "Wrong alinment on FBodyguardVIPPlayerData");
static_assert(sizeof(FBodyguardVIPPlayerData) == 0x000018, "Wrong size on FBodyguardVIPPlayerData");
static_assert(offsetof(FBodyguardVIPPlayerData, PlayerState) == 0x000000, "Member 'FBodyguardVIPPlayerData::PlayerState' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, CurrentHealth) == 0x000008, "Member 'FBodyguardVIPPlayerData::CurrentHealth' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, MaxHealth) == 0x00000C, "Member 'FBodyguardVIPPlayerData::MaxHealth' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, bIsDBNO) == 0x000010, "Member 'FBodyguardVIPPlayerData::bIsDBNO' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, bIsBeingRevived) == 0x000011, "Member 'FBodyguardVIPPlayerData::bIsBeingRevived' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, bAllowItemPickup) == 0x000012, "Member 'FBodyguardVIPPlayerData::bAllowItemPickup' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPPlayerData, bIsDead) == 0x000013, "Member 'FBodyguardVIPPlayerData::bIsDead' has a wrong offset!");

// ScriptStruct BodyguardRuntime.BodyguardVIPDeathState
// 0x0002 (0x0002 - 0x0000)
struct FBodyguardVIPDeathState final 
{
public:
	uint8                                         TeamNum;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBodyguardVIPDeathState) == 0x000001, "Wrong alinment on FBodyguardVIPDeathState");
static_assert(sizeof(FBodyguardVIPDeathState) == 0x000002, "Wrong size on FBodyguardVIPDeathState");
static_assert(offsetof(FBodyguardVIPDeathState, TeamNum) == 0x000000, "Member 'FBodyguardVIPDeathState::TeamNum' has a wrong offset!");
static_assert(offsetof(FBodyguardVIPDeathState, bIsDead) == 0x000001, "Member 'FBodyguardVIPDeathState::bIsDead' has a wrong offset!");

// ScriptStruct BodyguardRuntime.BodyGuardPartOverrideData
// 0x0038 (0x0038 - 0x0000)
struct FBodyGuardPartOverrideData final 
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCustomBodyType                           BodyType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomCharacterPart*>           PartsToSwapIn;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRemoveExtras;                               // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomCharacterPart*>           PartsToAddIfSpecialTags;                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CosmeticSwapTag;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBodyGuardPartOverrideData) == 0x000008, "Wrong alinment on FBodyGuardPartOverrideData");
static_assert(sizeof(FBodyGuardPartOverrideData) == 0x000038, "Wrong size on FBodyGuardPartOverrideData");
static_assert(offsetof(FBodyGuardPartOverrideData, Gender) == 0x000000, "Member 'FBodyGuardPartOverrideData::Gender' has a wrong offset!");
static_assert(offsetof(FBodyGuardPartOverrideData, BodyType) == 0x000001, "Member 'FBodyGuardPartOverrideData::BodyType' has a wrong offset!");
static_assert(offsetof(FBodyGuardPartOverrideData, PartsToSwapIn) == 0x000008, "Member 'FBodyGuardPartOverrideData::PartsToSwapIn' has a wrong offset!");
static_assert(offsetof(FBodyGuardPartOverrideData, bShouldRemoveExtras) == 0x000018, "Member 'FBodyGuardPartOverrideData::bShouldRemoveExtras' has a wrong offset!");
static_assert(offsetof(FBodyGuardPartOverrideData, PartsToAddIfSpecialTags) == 0x000020, "Member 'FBodyGuardPartOverrideData::PartsToAddIfSpecialTags' has a wrong offset!");
static_assert(offsetof(FBodyGuardPartOverrideData, CosmeticSwapTag) == 0x000030, "Member 'FBodyGuardPartOverrideData::CosmeticSwapTag' has a wrong offset!");

}

