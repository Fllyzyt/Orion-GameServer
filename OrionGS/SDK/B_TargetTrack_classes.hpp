#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TargetTrack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_TargetTrack.B_TargetTrack_C
// 0x0128 (0x0CD0 - 0x0BA8)
class AB_TargetTrack_C final  : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       ProximityTrigger;                                  // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Target_Move_Loop_Cue;                              // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Target_Move_Stop_Cue;                              // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Target_Move_Start_Cue;                             // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetAttachPoint;                                 // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Target_Track;                                   // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TargetMovement_NewTrack_0_9F61BF394D22B10B7DAB4683CA4746AC; // 0x0BE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TargetMovement__Direction_9F61BF394D22B10B7DAB4683CA4746AC; // 0x0BEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4652[0x3];                                     // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TargetMovement;                                    // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4653[0x8];                                     // 0x0BF8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransformForTarget;                            // 0x0C00(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LengthScaleSetting;                                // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayAtEndSetting;                                 // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProximityTriggerSizeSetting;                       // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialMovementDelaySetting;                       // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackSpeedSetting;                                 // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentlyMoving;                                 // 0x0C44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AtStartPoint;                                      // 0x0C45(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoopingSetting;                                    // 0x0C46(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4654[0x1];                                     // 0x0C47(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RotationSetting;                                   // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4655[0x4];                                     // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_ShootingTarget_Master_C*             AttachedTarget;                                    // 0x0C50(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             LeftRightTargetBaseMesh;                           // 0x0C58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             ForwardBackwardTargetBaseMesh;                     // 0x0C80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            NewVar_0;                                          // 0x0CA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsTargetUp;                                        // 0x0CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         CurrentMovementState;                              // 0x0CB9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4656[0x2];                                     // 0x0CBA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Audio_Speed_Parameter;                             // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LeftToRightmovementState;                          // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RightToLeftMovementState;                          // 0x0CC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         StopMovementState;                                 // 0x0CC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_TargetTrack(int32 EntryPoint, TDelegate<void(class UObject* Loaded)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, class AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, class AB_ShootingTarget_Master_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_CalculatePlayRate_ReturnValue, TDelegate<void(class UObject* Loaded)> K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class UObject* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, class UStaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_HasAuthority_ReturnValue_1, bool CallFunc_LessEqual_IntInt_ReturnValue, class UObject* Temp_object_Variable, class UStaticMesh* K2Node_DynamicCast_AsStatic_Mesh_1, bool K2Node_DynamicCast_bSuccess_1, class UObject* K2Node_CustomEvent_Loaded, bool CallFunc_SetStaticMesh_ReturnValue_1, class UObject* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1, class UStaticMesh* K2Node_DynamicCast_AsStatic_Mesh_2, bool K2Node_DynamicCast_bSuccess_2, bool CallFunc_IsValidSoftObjectReference_ReturnValue_1, bool CallFunc_SetStaticMesh_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_1, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, class AActor* K2Node_ComponentBoundEvent_OtherActor, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult& K2Node_ComponentBoundEvent_SweepResult, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue_1, bool CallFunc_EqualEqual_BoolBool_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_EqualEqual_BoolBool_ReturnValue_3, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_EqualEqual_BoolBool_ReturnValue_4, class UObject* Temp_object_Variable_1, bool CallFunc_EqualEqual_BoolBool_ReturnValue_5, class UStaticMesh* K2Node_DynamicCast_AsStatic_Mesh_3, bool K2Node_DynamicCast_bSuccess_3, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_SetStaticMesh_ReturnValue_3, EEndPlayReason K2Node_Event_EndPlayReason, class UObject* K2Node_CustomEvent_Loaded_1, const TMap<class FString, class FString>& CallFunc_GetPropertyOverrides_CurrentOptions, bool CallFunc_GetPropertyOverrides_ReturnValue, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_SetPropertyOverrides_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, bool CallFunc_IsValid_ReturnValue_3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue_4);
	void ReceiveDestroyed();
	void Stop_Move_Target_Audio();
	void Move_Target_Audio();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void InitializeSettings();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void AsyncLoadTargetBase();
	void ReverseTargetMovement();
	void AttachedTargetPoppedUp();
	void StopTargetMovement();
	void AttachedTargetKnockedDown();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void MoveTarget();
	void ReceiveBeginPlay();
	void OnLoaded_3C01053C48BCC07B689033B6DB9706E0(class UObject* Loaded);
	void OnLoaded_27B7684A423E01CDEC2BFC9631F88BF8(class UObject* Loaded);
	void TargetMovement__UpdateFunc();
	void TargetMovement__FinishedFunc();
	void GetFinalDestinationOfTarget(struct FVector* Destination, float CallFunc_Multiply_FloatFloat_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue);
	float CalculatePlayRate(float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
	void SetTargetRotationAndBaseMesh(const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_IsValid_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult_1, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult_2, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult_3, bool K2Node_SwitchInteger_CmpSuccess);
	void SetTrackLength(const struct FVector& CallFunc_MakeVector_ReturnValue);
	void OnRep_ServerMoveStartTime();
	void OnRep_IsTargetUp();
	void OnRep_CurrentDirection();
	void OnRep_IsCurrentlyMoving();
	void UpdateForRepNotify();
	void OnRep_CurrentLerpValue();
	void UpdateLerpedPosition(float Alpha, const struct FVector& CallFunc_GetFinalDestinationOfTarget_Destination, const struct FVector& CallFunc_VLerp_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult);
	void SetMovementState(uint8 State, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);
	void OnRep_CurrentMovementState(int32 CallFunc_Conv_ByteToInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
	void Set_Audio_Speed_Sound(float Target_Speed, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);

	class UStaticMesh* GetCollisionStaticMesh() const;
	TArray<class UMeshComponent*> GetMeshComponents() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_TargetTrack_C">();
	}
	static class AB_TargetTrack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_TargetTrack_C>();
	}
};
static_assert(alignof(AB_TargetTrack_C) == 0x000010, "Wrong alinment on AB_TargetTrack_C");
static_assert(sizeof(AB_TargetTrack_C) == 0x000CD0, "Wrong size on AB_TargetTrack_C");
static_assert(offsetof(AB_TargetTrack_C, UberGraphFrame) == 0x000BA8, "Member 'AB_TargetTrack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, ProximityTrigger) == 0x000BB0, "Member 'AB_TargetTrack_C::ProximityTrigger' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, Target_Move_Loop_Cue) == 0x000BB8, "Member 'AB_TargetTrack_C::Target_Move_Loop_Cue' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, Target_Move_Stop_Cue) == 0x000BC0, "Member 'AB_TargetTrack_C::Target_Move_Stop_Cue' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, Target_Move_Start_Cue) == 0x000BC8, "Member 'AB_TargetTrack_C::Target_Move_Start_Cue' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, ToyOptionsComponent) == 0x000BD0, "Member 'AB_TargetTrack_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, TargetAttachPoint) == 0x000BD8, "Member 'AB_TargetTrack_C::TargetAttachPoint' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, SM_Target_Track) == 0x000BE0, "Member 'AB_TargetTrack_C::SM_Target_Track' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, TargetMovement_NewTrack_0_9F61BF394D22B10B7DAB4683CA4746AC) == 0x000BE8, "Member 'AB_TargetTrack_C::TargetMovement_NewTrack_0_9F61BF394D22B10B7DAB4683CA4746AC' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, TargetMovement__Direction_9F61BF394D22B10B7DAB4683CA4746AC) == 0x000BEC, "Member 'AB_TargetTrack_C::TargetMovement__Direction_9F61BF394D22B10B7DAB4683CA4746AC' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, TargetMovement) == 0x000BF0, "Member 'AB_TargetTrack_C::TargetMovement' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, BaseTransformForTarget) == 0x000C00, "Member 'AB_TargetTrack_C::BaseTransformForTarget' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, LengthScaleSetting) == 0x000C30, "Member 'AB_TargetTrack_C::LengthScaleSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, DelayAtEndSetting) == 0x000C34, "Member 'AB_TargetTrack_C::DelayAtEndSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, ProximityTriggerSizeSetting) == 0x000C38, "Member 'AB_TargetTrack_C::ProximityTriggerSizeSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, InitialMovementDelaySetting) == 0x000C3C, "Member 'AB_TargetTrack_C::InitialMovementDelaySetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, TrackSpeedSetting) == 0x000C40, "Member 'AB_TargetTrack_C::TrackSpeedSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, IsCurrentlyMoving) == 0x000C44, "Member 'AB_TargetTrack_C::IsCurrentlyMoving' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, AtStartPoint) == 0x000C45, "Member 'AB_TargetTrack_C::AtStartPoint' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, LoopingSetting) == 0x000C46, "Member 'AB_TargetTrack_C::LoopingSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, RotationSetting) == 0x000C48, "Member 'AB_TargetTrack_C::RotationSetting' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, AttachedTarget) == 0x000C50, "Member 'AB_TargetTrack_C::AttachedTarget' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, LeftRightTargetBaseMesh) == 0x000C58, "Member 'AB_TargetTrack_C::LeftRightTargetBaseMesh' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, ForwardBackwardTargetBaseMesh) == 0x000C80, "Member 'AB_TargetTrack_C::ForwardBackwardTargetBaseMesh' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, NewVar_0) == 0x000CA8, "Member 'AB_TargetTrack_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, IsTargetUp) == 0x000CB8, "Member 'AB_TargetTrack_C::IsTargetUp' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, CurrentMovementState) == 0x000CB9, "Member 'AB_TargetTrack_C::CurrentMovementState' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, Audio_Speed_Parameter) == 0x000CBC, "Member 'AB_TargetTrack_C::Audio_Speed_Parameter' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, LeftToRightmovementState) == 0x000CC0, "Member 'AB_TargetTrack_C::LeftToRightmovementState' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, RightToLeftMovementState) == 0x000CC1, "Member 'AB_TargetTrack_C::RightToLeftMovementState' has a wrong offset!");
static_assert(offsetof(AB_TargetTrack_C, StopMovementState) == 0x000CC2, "Member 'AB_TargetTrack_C::StopMovementState' has a wrong offset!");

}

