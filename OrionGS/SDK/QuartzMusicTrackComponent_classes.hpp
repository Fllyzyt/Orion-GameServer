#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuartzMusicTrackComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuartzMusicTrackComponent.QuartzMusicTrackComponent_C
// 0x00B0 (0x0160 - 0x00B0)
class UQuartzMusicTrackComponent_C : public UGameFrameworkComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundCue*                              TrackSoundCue;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackPriority;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C99[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockInst;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClockName;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClockBPM;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9A[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuartzClockSettings                   ClockSettings;                                     // 0x00E0(0x0020)(Edit, BlueprintVisible)
	class ABP_QuartzMusicController_C*            ControllerActor;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuartzQuantizationBoundary            ClockQuantizationBoundary;                         // 0x0108(0x000C)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bDebugEnabled;                                     // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9B[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bQueueStop;                                        // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9C[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrackFadeInTime;                                   // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackFadeOutTime;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9D[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TrackParameters;                                   // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TrackDisableTags;                                  // 0x0140(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetTrackParameter(int32 ParameterIndex, float InFloat, class UAudioComponent* CallFunc_GetAudioComponent_AudioComponent);
	void GetAudioComponent(class UAudioComponent** Param_AudioComponent);
	EAudioComponentPlayState GetPlayState(bool CallFunc_IsValid_ReturnValue, EAudioComponentPlayState CallFunc_GetPlayState_ReturnValue);
	void GetIsPlaying(bool* Is_Playing, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue);
	void OnQuartzQuantizationEvent(class FName Param_ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
	void OnQuartzClockDelegate(EQuartzCommandDelegateSubType EventType, class FName Param_Name, bool K2Node_SwitchEnum_CmpSuccess);
	void QueueTrackStop();
	void QueueTrackStart(struct FQuartzQuantizationBoundary& Temp_struct_Variable, class UQuartzSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Temp_delegate_Variable, class AFortGameStateAthena* CallFunc_GetGameStateAthena_ReturnValue, const struct FGameplayTagContainer& CallFunc_GetAthenaPlaylistContextTags_ReturnValue, bool CallFunc_HasAnyTags_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue, TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> K2Node_CreateDelegate_OutputDelegate, class UAudioComponent* CallFunc_CreateSound2D_ReturnValue, TDelegate<void(class FName ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction)> K2Node_CreateDelegate_OutputDelegate_1, class UQuartzSubsystem* CallFunc_GetWorldSubsystem_ReturnValue_1, bool CallFunc_IsQuartzEnabled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class UQuartzClockHandle* CallFunc_CreateNewClock_ReturnValue);
	void GetTrackPriority(float* Priority);
	void SetDebugEnabled(bool Debug);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetStemVolume(int32 Param_Index, float Value);
	void ExecuteUbergraph_QuartzMusicTrackComponent(int32 EntryPoint, int32 K2Node_CustomEvent_Index, float K2Node_CustomEvent_Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool K2Node_CustomEvent_Debug, class AActor* CallFunc_GetOwner_ReturnValue, EEndPlayReason K2Node_Event_EndPlayReason, class ABP_QuartzMusicController_C* K2Node_DynamicCast_AsBP_Quartz_Music_Controller, bool K2Node_DynamicCast_bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuartzMusicTrackComponent_C">();
	}
	static class UQuartzMusicTrackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzMusicTrackComponent_C>();
	}
};
static_assert(alignof(UQuartzMusicTrackComponent_C) == 0x000008, "Wrong alinment on UQuartzMusicTrackComponent_C");
static_assert(sizeof(UQuartzMusicTrackComponent_C) == 0x000160, "Wrong size on UQuartzMusicTrackComponent_C");
static_assert(offsetof(UQuartzMusicTrackComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UQuartzMusicTrackComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackSoundCue) == 0x0000B8, "Member 'UQuartzMusicTrackComponent_C::TrackSoundCue' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackPriority) == 0x0000C0, "Member 'UQuartzMusicTrackComponent_C::TrackPriority' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockInst) == 0x0000C8, "Member 'UQuartzMusicTrackComponent_C::ClockInst' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockName) == 0x0000D0, "Member 'UQuartzMusicTrackComponent_C::ClockName' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockBPM) == 0x0000D8, "Member 'UQuartzMusicTrackComponent_C::ClockBPM' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockSettings) == 0x0000E0, "Member 'UQuartzMusicTrackComponent_C::ClockSettings' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ControllerActor) == 0x000100, "Member 'UQuartzMusicTrackComponent_C::ControllerActor' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockQuantizationBoundary) == 0x000108, "Member 'UQuartzMusicTrackComponent_C::ClockQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, bDebugEnabled) == 0x000114, "Member 'UQuartzMusicTrackComponent_C::bDebugEnabled' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, AudioComponent) == 0x000118, "Member 'UQuartzMusicTrackComponent_C::AudioComponent' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, bQueueStop) == 0x000120, "Member 'UQuartzMusicTrackComponent_C::bQueueStop' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackFadeInTime) == 0x000124, "Member 'UQuartzMusicTrackComponent_C::TrackFadeInTime' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackFadeOutTime) == 0x000128, "Member 'UQuartzMusicTrackComponent_C::TrackFadeOutTime' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackParameters) == 0x000130, "Member 'UQuartzMusicTrackComponent_C::TrackParameters' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackDisableTags) == 0x000140, "Member 'UQuartzMusicTrackComponent_C::TrackDisableTags' has a wrong offset!");

}

