#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Vector2

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Vector2.Vector2.Create
// 0x0010 (0x0010 - 0x0000)
struct Vector2_Create final 
{
public:
	float                                         __verse_0x3205F605_inX;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x57624ABD_inY;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Create) == 0x000008, "Wrong alinment on Vector2_Create");
static_assert(sizeof(Vector2_Create) == 0x000010, "Wrong size on Vector2_Create");
static_assert(offsetof(Vector2_Create, __verse_0x3205F605_inX) == 0x000000, "Member 'Vector2_Create::__verse_0x3205F605_inX' has a wrong offset!");
static_assert(offsetof(Vector2_Create, __verse_0x57624ABD_inY) == 0x000004, "Member 'Vector2_Create::__verse_0x57624ABD_inY' has a wrong offset!");
static_assert(offsetof(Vector2_Create, RetVal) == 0x000008, "Member 'Vector2_Create::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.createZero
// 0x0008 (0x0008 - 0x0000)
struct Vector2_CreateZero final 
{
public:
	class UVector2*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_CreateZero) == 0x000008, "Wrong alinment on Vector2_CreateZero");
static_assert(sizeof(Vector2_CreateZero) == 0x000008, "Wrong size on Vector2_CreateZero");
static_assert(offsetof(Vector2_CreateZero, RetVal) == 0x000000, "Member 'Vector2_CreateZero::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.crossProduct
// 0x0018 (0x0018 - 0x0000)
struct Vector2_CrossProduct final 
{
public:
	class UVector2*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_CrossProduct) == 0x000008, "Wrong alinment on Vector2_CrossProduct");
static_assert(sizeof(Vector2_CrossProduct) == 0x000018, "Wrong size on Vector2_CrossProduct");
static_assert(offsetof(Vector2_CrossProduct, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector2_CrossProduct::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector2_CrossProduct, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector2_CrossProduct::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector2_CrossProduct, RetVal) == 0x000010, "Member 'Vector2_CrossProduct::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Distance
// 0x0018 (0x0018 - 0x0000)
struct Vector2_Distance final 
{
public:
	class UVector2*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Distance) == 0x000008, "Wrong alinment on Vector2_Distance");
static_assert(sizeof(Vector2_Distance) == 0x000018, "Wrong size on Vector2_Distance");
static_assert(offsetof(Vector2_Distance, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector2_Distance::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector2_Distance, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector2_Distance::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector2_Distance, RetVal) == 0x000010, "Member 'Vector2_Distance::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.DistanceSquared
// 0x0018 (0x0018 - 0x0000)
struct Vector2_DistanceSquared final 
{
public:
	class UVector2*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_DistanceSquared) == 0x000008, "Wrong alinment on Vector2_DistanceSquared");
static_assert(sizeof(Vector2_DistanceSquared) == 0x000018, "Wrong size on Vector2_DistanceSquared");
static_assert(offsetof(Vector2_DistanceSquared, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector2_DistanceSquared::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector2_DistanceSquared, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector2_DistanceSquared::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector2_DistanceSquared, RetVal) == 0x000010, "Member 'Vector2_DistanceSquared::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.dotProduct
// 0x0018 (0x0018 - 0x0000)
struct Vector2_DotProduct final 
{
public:
	class UVector2*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_DotProduct) == 0x000008, "Wrong alinment on Vector2_DotProduct");
static_assert(sizeof(Vector2_DotProduct) == 0x000018, "Wrong size on Vector2_DotProduct");
static_assert(offsetof(Vector2_DotProduct, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Vector2_DotProduct::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Vector2_DotProduct, __verse_0x54773F55_v2) == 0x000008, "Member 'Vector2_DotProduct::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Vector2_DotProduct, RetVal) == 0x000010, "Member 'Vector2_DotProduct::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.reflectVector
// 0x0018 (0x0018 - 0x0000)
struct Vector2_ReflectVector final 
{
public:
	class UVector2*                               __verse_0x8BEC05BA_direction;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               __verse_0xADA21017_surfaceNormal;                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_ReflectVector) == 0x000008, "Wrong alinment on Vector2_ReflectVector");
static_assert(sizeof(Vector2_ReflectVector) == 0x000018, "Wrong size on Vector2_ReflectVector");
static_assert(offsetof(Vector2_ReflectVector, __verse_0x8BEC05BA_direction) == 0x000000, "Member 'Vector2_ReflectVector::__verse_0x8BEC05BA_direction' has a wrong offset!");
static_assert(offsetof(Vector2_ReflectVector, __verse_0xADA21017_surfaceNormal) == 0x000008, "Member 'Vector2_ReflectVector::__verse_0xADA21017_surfaceNormal' has a wrong offset!");
static_assert(offsetof(Vector2_ReflectVector, RetVal) == 0x000010, "Member 'Vector2_ReflectVector::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Add
// 0x0010 (0x0010 - 0x0000)
struct Vector2_Add final 
{
public:
	class UVector2*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Add) == 0x000008, "Wrong alinment on Vector2_Add");
static_assert(sizeof(Vector2_Add) == 0x000010, "Wrong size on Vector2_Add");
static_assert(offsetof(Vector2_Add, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector2_Add::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector2_Add, RetVal) == 0x000008, "Member 'Vector2_Add::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Divide
// 0x0010 (0x0010 - 0x0000)
struct Vector2_Divide final 
{
public:
	class UVector2*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Divide) == 0x000008, "Wrong alinment on Vector2_Divide");
static_assert(sizeof(Vector2_Divide) == 0x000010, "Wrong size on Vector2_Divide");
static_assert(offsetof(Vector2_Divide, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector2_Divide::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector2_Divide, RetVal) == 0x000008, "Member 'Vector2_Divide::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Multiply
// 0x0010 (0x0010 - 0x0000)
struct Vector2_Multiply final 
{
public:
	class UVector2*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Multiply) == 0x000008, "Wrong alinment on Vector2_Multiply");
static_assert(sizeof(Vector2_Multiply) == 0x000010, "Wrong size on Vector2_Multiply");
static_assert(offsetof(Vector2_Multiply, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector2_Multiply::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector2_Multiply, RetVal) == 0x000008, "Member 'Vector2_Multiply::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Normal
// 0x0008 (0x0008 - 0x0000)
struct Vector2_Normal final 
{
public:
	class UVector2*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Normal) == 0x000008, "Wrong alinment on Vector2_Normal");
static_assert(sizeof(Vector2_Normal) == 0x000008, "Wrong size on Vector2_Normal");
static_assert(offsetof(Vector2_Normal, RetVal) == 0x000000, "Member 'Vector2_Normal::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Size
// 0x0004 (0x0004 - 0x0000)
struct Vector2_Size final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Size) == 0x000004, "Wrong alinment on Vector2_Size");
static_assert(sizeof(Vector2_Size) == 0x000004, "Wrong size on Vector2_Size");
static_assert(offsetof(Vector2_Size, RetVal) == 0x000000, "Member 'Vector2_Size::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.sizeSquared
// 0x0004 (0x0004 - 0x0000)
struct Vector2_SizeSquared final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_SizeSquared) == 0x000004, "Wrong alinment on Vector2_SizeSquared");
static_assert(sizeof(Vector2_SizeSquared) == 0x000004, "Wrong size on Vector2_SizeSquared");
static_assert(offsetof(Vector2_SizeSquared, RetVal) == 0x000000, "Member 'Vector2_SizeSquared::RetVal' has a wrong offset!");

// Function Math_Vector2.Vector2.Subtract
// 0x0010 (0x0010 - 0x0000)
struct Vector2_Subtract final 
{
public:
	class UVector2*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector2*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vector2_Subtract) == 0x000008, "Wrong alinment on Vector2_Subtract");
static_assert(sizeof(Vector2_Subtract) == 0x000010, "Wrong size on Vector2_Subtract");
static_assert(offsetof(Vector2_Subtract, __verse_0x5C20106F_v) == 0x000000, "Member 'Vector2_Subtract::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Vector2_Subtract, RetVal) == 0x000008, "Member 'Vector2_Subtract::RetVal' has a wrong offset!");

}

