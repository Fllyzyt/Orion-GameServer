#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeSynthController_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TimeSynth_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeSynthController_Base.BP_TimeSynthController_Base_C
// 0x0070 (0x0290 - 0x0220)
class ABP_TimeSynthController_Base_C : public AFortTimeSynthController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTimeSynthComponent*                    TimeSynth;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TimeSynthTrackComponent_C*          CurrentTrack;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TransitionBeats;                                   // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitionActive;                                  // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E3[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TimeSynthTrackComponent_C*          QueuedTransitionTrack;                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTimeSynthVolumeGroup*>          VolumeGroups;                                      // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTimeSynthClipHandle>           QueuedTransitions;                                 // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UBP_TimeSynthTrackComponent_C*>  QueuedTracks;                                      // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E4[0x6];                                     // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayDataTrackerComponentManager* DataTrackerManager;                                // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStoppedPermenant;                                // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnTimeSynthTrackComponentRegistered(class UBP_TimeSynthTrackComponent_C*& Track);
	void GetTimeSynthComponent(class UTimeSynthComponent** Param_TimeSynth);
	void RegisterTrackComponents();
	void GetIsPlaying(bool* Param_IsPlaying);
	void CalculateMaxClipDuration(class UBP_TimeSynthTrackComponent_C* Track, int32* Duration, int32 MaxDuration, bool Temp_bool_Variable, const struct FTimeSynthQuantizationSettings& CallFunc_GetQuantizationSettings_QuantizationSettings, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, const struct FTimeSynth_TrackStemData& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue_1);
	void QueueTrackStartInternal(class UBP_TimeSynthTrackComponent_C* NewTrack, bool WasActive, bool CallFunc_Not_PreBool_ReturnValue, const struct FTimeSynthQuantizationSettings& CallFunc_GetQuantizationSettings_QuantizationSettings, bool CallFunc_IsActive_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
	void OnQuantizationBar(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat, bool CallFunc_EqualEqual_IntInt_ReturnValue, const struct FTimeSynthQuantizationSettings& CallFunc_GetQuantizationSettings_QuantizationSettings, int32 CallFunc_Subtract_IntInt_ReturnValue);
	void FlushExtraClips(bool Exclude_Current, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, class UBP_TimeSynthTrackComponent_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const class FString& CallFunc_Conv_NameToString_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue);
	void OnQuantizationBeat(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void PlayTransition(const struct FTimeSynth_TransitionData& Transition_Data, class UBP_TimeSynthTrackComponent_C* Queued_Track, int32 CallFunc_GetMaxClipDuration_MaxClipDuration, int32 Temp_int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, const struct FTimeSynth_TrackStemData& CallFunc_Array_Get_Item, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, const struct FTimeSynthClipHandle& CallFunc_PlayClip_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
	void StopAllMusic(bool Play_Outro, bool CallFunc_IsValid_ReturnValue);
	void ChangeTrack(class UBP_TimeSynthTrackComponent_C* New_Track, class UBP_TimeSynthTrackComponent_C* NewTrack, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_CheckPlaystate_Result, bool CallFunc_CheckPlaystate_Result_1, bool CallFunc_BooleanOR_ReturnValue, class FName CallFunc_GetTrackID_TrackID, class FName CallFunc_GetTrackID_TrackID_1, bool CallFunc_HasTransitionForTrack_Transition_Found, const struct FTimeSynth_TransitionData& CallFunc_HasTransitionForTrack_Transition_Data, class FName CallFunc_GetTrackID_TrackID_2, bool CallFunc_NotEqual_NameName_ReturnValue);
	void RequestTrackChange(class UBP_TimeSynthTrackComponent_C* TrackRequesting, bool* CanChangeTrack, float CallFunc_GetPriority_Priority, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPriority_Priority_1, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_CheckPlaystate_Result, bool CallFunc_CheckPlaystate_Result_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void ReceiveBeginPlay();
	void SetVolumeGroup(int32 Param_Index, float Volume_Multiplier);
	void ExecuteUbergraph_BP_TimeSynthController_Base(int32 EntryPoint, TDelegate<void(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat)> K2Node_CreateDelegate_OutputDelegate_1, int32 K2Node_CustomEvent_Index, float K2Node_CustomEvent_Volume_Multiplier, float CallFunc_MapRangeClamped_ReturnValue, class UTimeSynthVolumeGroup* CallFunc_Array_Get_Item);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeSynthController_Base_C">();
	}
	static class ABP_TimeSynthController_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeSynthController_Base_C>();
	}
};
static_assert(alignof(ABP_TimeSynthController_Base_C) == 0x000008, "Wrong alinment on ABP_TimeSynthController_Base_C");
static_assert(sizeof(ABP_TimeSynthController_Base_C) == 0x000290, "Wrong size on ABP_TimeSynthController_Base_C");
static_assert(offsetof(ABP_TimeSynthController_Base_C, UberGraphFrame) == 0x000220, "Member 'ABP_TimeSynthController_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TimeSynth) == 0x000228, "Member 'ABP_TimeSynthController_Base_C::TimeSynth' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, CurrentTrack) == 0x000230, "Member 'ABP_TimeSynthController_Base_C::CurrentTrack' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TransitionBeats) == 0x000238, "Member 'ABP_TimeSynthController_Base_C::TransitionBeats' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TransitionActive) == 0x00023C, "Member 'ABP_TimeSynthController_Base_C::TransitionActive' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTransitionTrack) == 0x000240, "Member 'ABP_TimeSynthController_Base_C::QueuedTransitionTrack' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, VolumeGroups) == 0x000248, "Member 'ABP_TimeSynthController_Base_C::VolumeGroups' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTransitions) == 0x000258, "Member 'ABP_TimeSynthController_Base_C::QueuedTransitions' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTracks) == 0x000268, "Member 'ABP_TimeSynthController_Base_C::QueuedTracks' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, IsPlaying) == 0x000278, "Member 'ABP_TimeSynthController_Base_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, Debug) == 0x000279, "Member 'ABP_TimeSynthController_Base_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, DataTrackerManager) == 0x000280, "Member 'ABP_TimeSynthController_Base_C::DataTrackerManager' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, IsStoppedPermenant) == 0x000288, "Member 'ABP_TimeSynthController_Base_C::IsStoppedPermenant' has a wrong offset!");

}

