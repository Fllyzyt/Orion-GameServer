#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Quat4

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// SolarisGeneratedClass Math_Quat4.Quat4
// 0x0010 (0x0038 - 0x0028)
class UQuat4 final  : public UObject
{
public:
	float                                         __verse_0x6F57CF8F_x;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x0A307337_y;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xE49FC625_z;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x3947ACD7_w;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UQuat4* CalcTangents(class UQuat4* __verse_0x07BDAE31_prevQ, class UQuat4* __verse_0xE518C7F2_q, class UQuat4* __verse_0xC170DC03_nextQ, float __verse_0x35918A51_tension);
	static class UQuat4* Create(class UVector3* __verse_0xAB14FAEF_axis, float __verse_0x8ADC6410_radians);
	static class UQuat4* CreateFromRotation(class URotation3* __verse_0xAA1ABDC9_rotation);
	static class UQuat4* CreateIdentity();
	static class UQuat4* CreateZero();
	static float Error(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2);
	static class UQuat4* FastBilerp(class UQuat4* __verse_0x47EC792A_p00, class UQuat4* __verse_0xD9ECD3E6_p10, class UQuat4* __verse_0x228BC592_p01, class UQuat4* __verse_0xBC8B6F5E_p11, float __verse_0x4DC01E1F_fracX, float __verse_0x28A7A2A7_fracY);
	static class UQuat4* FastLerp(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* FindBetween(class UVector3* __verse_0xBAD88A47_v1, class UVector3* __verse_0x54773F55_v2);
	static class UQuat4* FindBetweenNormals(class UVector3* __verse_0x24F2D4E8_n1, class UVector3* __verse_0xCA5D61FA_n2);
	static class UQuat4* FindBetweenVectors(class UVector3* __verse_0xBAD88A47_v1, class UVector3* __verse_0x54773F55_v2);
	static float SafeError(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2);
	static class UQuat4* Slerp(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* SlerpFullPath(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* SlerpFullPathNotNormalized(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* SlerpNotNormalized(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0x4D7EFA5F_q2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* Squad(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0xC7DFAF05_t1, class UQuat4* __verse_0x4D7EFA5F_q2, class UQuat4* __verse_0x29701A17_t2, float __verse_0x05A40B7F_alpha);
	static class UQuat4* SquadFullPath(class UQuat4* __verse_0xA3D14F4D_q1, class UQuat4* __verse_0xC7DFAF05_t1, class UQuat4* __verse_0x4D7EFA5F_q2, class UQuat4* __verse_0x29701A17_t2, float __verse_0x05A40B7F_alpha);

	void _InitCDO();
	void _InitInstance();
	class UQuat4* Add(class UQuat4* __verse_0xE518C7F2_q);
	float AngularRadianDistance(class UQuat4* __verse_0xE518C7F2_q);
	class UQuat4* DivideByScalar(float __verse_0x6ED0CE58_s, float __verse_0x0FA0AFBE_reciprocal_0);
	float DoT(class UQuat4* __verse_0xE518C7F2_q);
	void EnforceShortestArcWith(class UQuat4* __verse_0xE518C7F2_q);
	uint8 Equals(class UQuat4* __verse_0xE518C7F2_q, float __verse_0xB4A6AEEC_tolerance);
	class UQuat4* Exp();
	float GetAngle();
	class UVector3* GetAxisX();
	class UVector3* GetAxisY();
	class UVector3* GetAxisZ();
	class UQuat4* GetNormalized(float __verse_0xB4A6AEEC_tolerance);
	class UVector3* GetRotationAxis();
	class UQuat4* GetSwing(class UVector3* __verse_0x32625C4E_twistAxis);
	class UQuat4* GetTwist(class UVector3* __verse_0x32625C4E_twistAxis);
	float GetTwistRadianAngle(class UVector3* __verse_0x32625C4E_twistAxis);
	class UQuat4* Inverse();
	uint8 IsIdentity(float __verse_0xB4A6AEEC_tolerance);
	uint8 IsNormalized();
	uint8 IsValid();
	class UQuat4* Log();
	class UQuat4* MultiplyByScalar(float __verse_0x6ED0CE58_s);
	void Normalize(float __verse_0xB4A6AEEC_tolerance);
	class UVector3* RotateVector(class UVector3* __verse_0x5C20106F_v);
	float Size();
	float SizeSquared();
	class UQuat4* Subtract(class UQuat4* __verse_0xE518C7F2_q);
	class URotation3* ToEulerRotation3();
	class URotation3* ToRotation3();
	class FString ToString();
	class UVector3* UnrotateVector(class UVector3* __verse_0x5C20106F_v);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Quat4">();
	}
	static class UQuat4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuat4>();
	}
};
static_assert(alignof(UQuat4) == 0x000008, "Wrong alinment on UQuat4");
static_assert(sizeof(UQuat4) == 0x000038, "Wrong size on UQuat4");
static_assert(offsetof(UQuat4, __verse_0x6F57CF8F_x) == 0x000028, "Member 'UQuat4::__verse_0x6F57CF8F_x' has a wrong offset!");
static_assert(offsetof(UQuat4, __verse_0x0A307337_y) == 0x00002C, "Member 'UQuat4::__verse_0x0A307337_y' has a wrong offset!");
static_assert(offsetof(UQuat4, __verse_0xE49FC625_z) == 0x000030, "Member 'UQuat4::__verse_0xE49FC625_z' has a wrong offset!");
static_assert(offsetof(UQuat4, __verse_0x3947ACD7_w) == 0x000034, "Member 'UQuat4::__verse_0x3947ACD7_w' has a wrong offset!");

}

