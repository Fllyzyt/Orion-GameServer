#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuartzMusicTrackComponent_DataTracker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DataTrackerParameterData_structs.hpp"
#include "QuartzMusicTrackComponent_classes.hpp"
#include "E_DataTrackerTagTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuartzMusicTrackComponent_DataTracker.QuartzMusicTrackComponent_DataTracker_C
// 0x0058 (0x01B8 - 0x0160)
#pragma pack(push, 0x1)
class alignas(0x08) UQuartzMusicTrackComponent_DataTracker_C : public UQuartzMusicTrackComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_QuartzMusicTrackComponent_DataTracker_C; // 0x0160(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 DataTrackerClass;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayDataTrackerComponentManager* DataTrackerManager;                                // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDataTrackerAssigned;                              // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E08[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayDataTrackerComponent*      DataTrackerComponent;                              // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAwaitingCooldownBeforeShutoff;                    // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E09[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateFrequency;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDataTrackerParameterData>      DataTrackerParameters;                             // 0x0190(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bHasFiredOffDataTrackerParameterWarning;           // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E0A[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              DataTrackerSoundMix;                               // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSoundMixActive;                                   // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_QuartzMusicTrackComponent_DataTracker(int32 EntryPoint, TDelegate<void(class UFortGameplayDataTrackerComponent* UnRegisteredDataTracker)> K2Node_CreateDelegate_OutputDelegate, class AFortGameStateAthena* K2Node_CustomEvent_GameState, class UFortPlaylist* K2Node_CustomEvent_Playlist, struct FGameplayTagContainer& K2Node_CustomEvent_PlaylistContextTags, TDelegate<void(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags)> K2Node_CreateDelegate_OutputDelegate_1, const struct FGameplayTagContainer& Temp_struct_Variable, class UFortPlaylist* Temp_object_Variable, class AFortGameStateAthena* Temp_object_Variable_1, class UFortAsyncAction_CurrentPlaylistReady* CallFunc_PlaylistDataReadyAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, class UFortGameplayDataTrackerComponentManager* CallFunc_GetCurrent_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_2, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, TArray<class UFortGameplayDataTrackerComponent*>& CallFunc_GetRegisteredDataTrackerComponents_OutDataTrackerComponents, class UFortGameplayDataTrackerComponent* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class UClass* CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, TDelegate<void(class UFortGameplayDataTrackerComponent* DataTrackerComponent, bool bHasEventValues)> K2Node_CreateDelegate_OutputDelegate_3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, TDelegate<void(class UFortGameplayDataTrackerComponent* RegisteredDataTracker)> K2Node_CreateDelegate_OutputDelegate_4);
	void Retry_Get_Data_Tracker_Manager();
	void ReceiveBeginPlay();
	void OnReady_EAA166EB4AA20B4778C921B5F15F1C62(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags);
	void On_Changed_Has_Any_Event_Value(class UFortGameplayDataTrackerComponent* Param_DataTrackerComponent, bool bHasEventValues);
	void OnDataTrackerComponentRegistered(class UFortGameplayDataTrackerComponent* RegisteredDataTracker, const class FString& CallFunc_GetDisplayName_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, class UClass* CallFunc_GetObjectClass_ReturnValue, TDelegate<void(class UFortGameplayDataTrackerComponent* DataTrackerComponent, bool bHasEventValues)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void OnDataTrackerComponentUnRegistered(class UFortGameplayDataTrackerComponent* UnRegisteredDataTracker, class UClass* CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);
	void DataTrackerStart_Internal(class UQuartzSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsQuartzEnabled_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_RequestTrackPlayback_Result);
	void DataTrackerUpdate_Internal(bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, E_DataTrackerTagTypes Temp_byte_Variable, int32 Temp_int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetDataTrackerParameterValueTotal_Value, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class UFortGameplayDataTrackerComponent* CallFunc_GetDataTrackerComponent_DataTracker, int32 CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_GetAccumulationValue_ReturnValue, float CallFunc_GetEventValue_ReturnValue, float K2Node_Select_Default, bool CallFunc_Greater_FloatFloat_ReturnValue, float K2Node_Select_Default_1, float CallFunc_FInterpTo_ReturnValue, bool CallFunc_RequestTrackPlayback_Result);
	void DataTrackerStop_Internal(TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue);
	void OnDataTrackerStart();
	void OnDataTrackerUpdate(int32 Temp_int_Variable, float CallFunc_GetDataTrackerParameterValue_Value, int32 CallFunc_Array_LastIndex_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue_1, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);
	void OnDataTrackerStop();
	void GetDataTrackerComponent(class UFortGameplayDataTrackerComponent** DataTracker);
	void GetDataTrackerParameterValue(int32 Param_Index, float* Value);
	void GetDataTrackerParameterValueTotal(float* Value, float Total, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, const struct FDataTrackerParameterData& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuartzMusicTrackComponent_DataTracker_C">();
	}
	static class UQuartzMusicTrackComponent_DataTracker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzMusicTrackComponent_DataTracker_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UQuartzMusicTrackComponent_DataTracker_C) == 0x000008, "Wrong alinment on UQuartzMusicTrackComponent_DataTracker_C");
static_assert(sizeof(UQuartzMusicTrackComponent_DataTracker_C) == 0x0001B8, "Wrong size on UQuartzMusicTrackComponent_DataTracker_C");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, UberGraphFrame_QuartzMusicTrackComponent_DataTracker_C) == 0x000160, "Member 'UQuartzMusicTrackComponent_DataTracker_C::UberGraphFrame_QuartzMusicTrackComponent_DataTracker_C' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, DataTrackerClass) == 0x000168, "Member 'UQuartzMusicTrackComponent_DataTracker_C::DataTrackerClass' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, DataTrackerManager) == 0x000170, "Member 'UQuartzMusicTrackComponent_DataTracker_C::DataTrackerManager' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, bDataTrackerAssigned) == 0x000178, "Member 'UQuartzMusicTrackComponent_DataTracker_C::bDataTrackerAssigned' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, DataTrackerComponent) == 0x000180, "Member 'UQuartzMusicTrackComponent_DataTracker_C::DataTrackerComponent' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, bAwaitingCooldownBeforeShutoff) == 0x000188, "Member 'UQuartzMusicTrackComponent_DataTracker_C::bAwaitingCooldownBeforeShutoff' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, UpdateFrequency) == 0x00018C, "Member 'UQuartzMusicTrackComponent_DataTracker_C::UpdateFrequency' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, DataTrackerParameters) == 0x000190, "Member 'UQuartzMusicTrackComponent_DataTracker_C::DataTrackerParameters' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, bHasFiredOffDataTrackerParameterWarning) == 0x0001A0, "Member 'UQuartzMusicTrackComponent_DataTracker_C::bHasFiredOffDataTrackerParameterWarning' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, DataTrackerSoundMix) == 0x0001A8, "Member 'UQuartzMusicTrackComponent_DataTracker_C::DataTrackerSoundMix' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_DataTracker_C, bSoundMixActive) == 0x0001B0, "Member 'UQuartzMusicTrackComponent_DataTracker_C::bSoundMixActive' has a wrong offset!");

}

