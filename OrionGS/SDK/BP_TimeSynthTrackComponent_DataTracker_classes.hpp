#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeSynthTrackComponent_DataTracker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_TimeSynthTrackComponent_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeSynthTrackComponent_DataTracker.BP_TimeSynthTrackComponent_DataTracker_C
// 0x0078 (0x0230 - 0x01B8)
class UBP_TimeSynthTrackComponent_DataTracker_C : public UBP_TimeSynthTrackComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_TimeSynthTrackComponent_DataTracker_C; // 0x01B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortGameplayDataTrackerComponent*      DataTrackerComponent;                              // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DataTrackerAssigned;                               // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5A[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DataTrackerComponentClass;                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayDataTrackerComponentManager* DataTrackerComponentManager;                       // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AwaitingCooldownBeforeShutoff;                     // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5B[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              SoundMix;                                          // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         EnabledDataRow;                                    // 0x01F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FScalableFloat>                 TrackMixStateVolumeDataRows;                       // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          MixPushed;                                         // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5C[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DataTrackerUpdateTime;                             // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TimeSynthTrackComponent_DataTracker(int32 EntryPoint, class AFortGameStateAthena* K2Node_CustomEvent_GameState, class UFortPlaylist* K2Node_CustomEvent_Playlist, struct FGameplayTagContainer& K2Node_CustomEvent_PlaylistContextTags, TDelegate<void(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags)> K2Node_CreateDelegate_OutputDelegate, const struct FGameplayTagContainer& Temp_struct_Variable, class UFortPlaylist* Temp_object_Variable, class AFortGameStateAthena* Temp_object_Variable_1, class UFortAsyncAction_CurrentPlaylistReady* CallFunc_PlaylistDataReadyAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, TDelegate<void(EAthenaGamePhase GamePhase)> K2Node_CreateDelegate_OutputDelegate_1, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GetIsEnabled_Enabled, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_LessEqual_IntInt_ReturnValue, const struct FScalableFloat& CallFunc_Array_Get_Item, float CallFunc_GetValueAtLevel_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_2, bool CallFunc_Less_IntInt_ReturnValue, EAthenaGamePhase K2Node_CustomEvent_GamePhase, bool K2Node_SwitchEnum_CmpSuccess);
	void GamePhaseChanged(EAthenaGamePhase GamePhase);
	void ReceiveBeginPlay();
	void OnReady_FFC0E068479278E143D010AF8EB81D0D(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags);
	void OnDataTrackerStart(class UQuartzSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsQuartzEnabled_ReturnValue, class ABP_TimeSynthController_Base_C* CallFunc_GetTimeSynthController_TimeSynthController, bool CallFunc_RequestTrackChange_CanChangeTrack);
	void OnDataTrackerUpdate(bool CallFunc_IsValid_ReturnValue, class ABP_TimeSynthController_Base_C* CallFunc_GetTimeSynthController_TimeSynthController, bool CallFunc_CheckPlaystate_Result, bool CallFunc_RequestTrackChange_CanChangeTrack, float CallFunc_GetRemainingEventCooldown_Cooldown, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void OnDataTrackerEnd(int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_CheckPlaystate_Result, class ABP_TimeSynthController_Base_C* CallFunc_GetTimeSynthController_TimeSynthController, const struct FTimeSynth_TrackMixState& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void StopDataTracker(TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue);
	void GetDataTrackerComponent(class UFortGameplayDataTrackerComponent** Param_DataTrackerComponent);
	void AssignDataTrackerComponent(class UFortGameplayDataTrackerComponent* Param_DataTrackerComponent, bool CallFunc_IsDedicatedServer_ReturnValue, class UClass* CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TDelegate<void(class UFortGameplayDataTrackerComponent* DataTrackerComponent, bool bHasEventValues)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue);
	void GetDataTrackerComponentManager(int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const class FString& CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, TArray<class UFortGameplayDataTrackerComponent*>& CallFunc_GetRegisteredDataTrackerComponents_OutDataTrackerComponents, TDelegate<void(class UFortGameplayDataTrackerComponent* UnRegisteredDataTracker)> K2Node_CreateDelegate_OutputDelegate, class UFortGameplayDataTrackerComponent* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, TDelegate<void(class UFortGameplayDataTrackerComponent* RegisteredDataTracker)> K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_Less_IntInt_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_2, class UFortGameplayDataTrackerComponentManager* CallFunc_GetCurrent_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue);
	void OnDataTrackerComponentRegistered(class UFortGameplayDataTrackerComponent* Data_Tracker_Component);
	void OnDataTrackerComponentUnRegistered(class UFortGameplayDataTrackerComponent* Data_Tracker_Component, class UClass* CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);
	void OnAnyEventValueChanged(class UFortGameplayDataTrackerComponent* Data_Tracker_Component, bool Has_Event_Values, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue);
	void GetRemainingEventCooldown(float* Cooldown);
	void GetIsEnabled(bool* Enabled, bool CallFunc_RowToBool_ReturnValue);
	void QueueTrackStop(bool Play_Outro);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeSynthTrackComponent_DataTracker_C">();
	}
	static class UBP_TimeSynthTrackComponent_DataTracker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TimeSynthTrackComponent_DataTracker_C>();
	}
};
static_assert(alignof(UBP_TimeSynthTrackComponent_DataTracker_C) == 0x000008, "Wrong alinment on UBP_TimeSynthTrackComponent_DataTracker_C");
static_assert(sizeof(UBP_TimeSynthTrackComponent_DataTracker_C) == 0x000230, "Wrong size on UBP_TimeSynthTrackComponent_DataTracker_C");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, UberGraphFrame_BP_TimeSynthTrackComponent_DataTracker_C) == 0x0001B8, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::UberGraphFrame_BP_TimeSynthTrackComponent_DataTracker_C' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, DataTrackerComponent) == 0x0001C0, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::DataTrackerComponent' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, DataTrackerAssigned) == 0x0001C8, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::DataTrackerAssigned' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, DataTrackerComponentClass) == 0x0001D0, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::DataTrackerComponentClass' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, DataTrackerComponentManager) == 0x0001D8, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::DataTrackerComponentManager' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, AwaitingCooldownBeforeShutoff) == 0x0001E0, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::AwaitingCooldownBeforeShutoff' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, SoundMix) == 0x0001E8, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::SoundMix' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, EnabledDataRow) == 0x0001F0, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::EnabledDataRow' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, TrackMixStateVolumeDataRows) == 0x000218, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::TrackMixStateVolumeDataRows' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, MixPushed) == 0x000228, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::MixPushed' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_DataTracker_C, DataTrackerUpdateTime) == 0x00022C, "Member 'UBP_TimeSynthTrackComponent_DataTracker_C::DataTrackerUpdateTime' has a wrong offset!");

}

