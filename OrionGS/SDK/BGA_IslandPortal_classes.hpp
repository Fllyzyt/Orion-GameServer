#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_IslandPortal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_IslandPortal.BGA_IslandPortal_C
// 0x04C8 (0x0FD8 - 0x0B10)
class ABGA_IslandPortal_C final  : public AFortAthenaCreativePortal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       CodeScreenLookAtSphere;                            // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PortalLookAtSphere;                                // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HUD_Visibility_Volume;                             // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Code_Entry_Screen;                                 // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base_Mesh;                                         // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PortalHUDDetails_PointerOrigin;                    // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       UI_PortalInfoPlate;                                // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ThumbnailPlane;                                    // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop_Gold;                             // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RiftPostProcess;                                   // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessRadius;                                 // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_RiftClosingUp;                                   // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop;                                  // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rift;                                           // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Looping;                                     // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Open_D988993744202060C85FC18A08065960;  // 0x0BA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_D988993744202060C85FC18A08065960; // 0x0BA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D78[0x3];                                     // 0x0BA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E; // 0x0BB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E; // 0x0BB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D79[0x3];                                     // 0x0BB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VectorScale;                                       // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DeathEffects;                                      // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRift;                                       // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RiftDestroyed;                                     // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0BD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EnterRift;                                         // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 VehicleActor;                                      // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FallingAnimation;                                  // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportHeight;                                    // 0x0BF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HangTime;                                          // 0x0C20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TeleportDelay;                                     // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D7A[0x4];                                     // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                PassengerArray;                                    // 0x0C50(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UParticleSystem*                        CrackExitRift;                                     // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerExitSkyCrack;                                // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOriginalLocation;                             // 0x0C70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawnHeightMultiplier;                          // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectiveBackendName;                              // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               RiftPortalLocationsQuest;                          // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreativeMode;                                      // 0x0C98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D7B[0x7];                                     // 0x0C99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlapActor;                                      // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RiftLocationNum;                                   // 0x0CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ActorRotation;                                     // 0x0CAC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScalableFloat                         ShouldSpawnRift_;                                  // 0x0CB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TeleportExitDistance_0;                            // 0x0CE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PortalCount;                                       // 0x0D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D7C[0x4];                                     // 0x0D0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         XPortalSeparation;                                 // 0x0D10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         StarterIslandTeleportHeight;                       // 0x0D38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanPlayerInteract;                                // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D7D[0x7];                                     // 0x0D61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         YPortalSeparation;                                 // 0x0D68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerControllerAthena*            PendingTeleport;                                   // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMyPortal;                                        // 0x0D98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D7E[0x7];                                     // 0x0D99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Enter_Rift_Gold;                                   // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PortalLightPillar_C*                Beacon;                                            // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UIDistanceCheckTimer;                              // 0x0DB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         UIShowDistance;                                    // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D7F[0x4];                                     // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UI_InteractionDisplayWidgetSoftClass;              // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   UI_PortalInfoPlateSoftClass;                       // 0x0DE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdatePlayerName;                                  // 0x0E10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePlayerPop;                                   // 0x0E20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateIslandName;                                  // 0x0E30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePortalUIVis;                                 // 0x0E40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandSelectSoftClass;                          // 0x0E50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandSelectClass;                              // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartSkydiving;                                    // 0x0E80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D80[0x7];                                     // 0x0E81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdateIsCuratedPortal;                             // 0x0E88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandCodeEntrySoftClass;                       // 0x0E98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandCodeEntryClass;                           // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateDescription;                                 // 0x0EC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateLinkCode;                                    // 0x0ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsBeingDisplayed;                                 // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D81[0x3];                                     // 0x0EE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThumbnailWorldSizeScale;                           // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OwnedThumbnailColor;                               // 0x0EF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnownedThumbnailColor;                             // 0x0F00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OverrideName;                                      // 0x0F10(0x0018)(Edit, BlueprintVisible)
	bool                                          bAlwaysDisplay;                                    // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D82[0x7];                                     // 0x0F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             IsBeingInteractedWith;                             // 0x0F30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUserWidget*                            DisplayedWidget;                                   // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CloseShownUI;                                      // 0x0F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class APawn*>                          LocalPawnsInRange;                                 // 0x0F58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	float                                         LookAtUpdateTimeSecs;                              // 0x0F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D83[0x4];                                     // 0x0F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LookAtCodeScreenHandle;                            // 0x0F70(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorNotHighlighted;                         // 0x0F78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorCanUpdate;                              // 0x0F88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorLocked;                                 // 0x0F98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorDisabled;                               // 0x0FA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCodeEntryScreen;                               // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPlayerMustInteractToUsePortal;                    // 0x0FB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableBaseAndCodeEntryInteractions;               // 0x0FBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D84[0x5];                                     // 0x0FBB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdateLocalPlayerLookingAtScreen;                  // 0x0FC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bLocalPlayerLookingAtScreen;                       // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bLocalPlayerLookingAtPortal;                       // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void UpdatePlayerName__DelegateSignature(class FText NewPlayerName);
	void UpdatePlayerPop__DelegateSignature(int32 NewPop);
	void UpdateIslandName__DelegateSignature(class FText NewIslandName);
	void UpdatePortalUIVis__DelegateSignature(bool Show, bool WasHidden, float Distance);
	void UpdateIsCuratedPortal__DelegateSignature(bool bIsCurated, bool bIsLinkCode, bool bIsUserInitiatedLoad);
	void UpdateDescription__DelegateSignature(class FText Description);
	void UpdateLinkCode__DelegateSignature(const class FString& LinkCode);
	void IsBeingInteractedWith__DelegateSignature(bool IsInteracting);
	void CloseShownUI__DelegateSignature();
	void UpdateLocalPlayerLookingAtScreen__DelegateSignature(bool bPlayerLookingAtScreen);
	void ExecuteUbergraph_BGA_IslandPortal(int32 EntryPoint, class UClass* Temp_class_Variable, class UClass* K2Node_ClassDynamicCast_AsUser_Widget, bool K2Node_ClassDynamicCast_bSuccess, bool Temp_bool_Variable, class UClass* K2Node_CustomEvent_Loaded, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsLocallyControlled_ReturnValue, class UClass* Temp_class_Variable_1, class UClass* K2Node_ClassDynamicCast_AsUser_Widget_1, bool K2Node_ClassDynamicCast_bSuccess_1, class UClass* K2Node_CustomEvent_Loaded_1, bool CallFunc_IsDedicatedServer_ReturnValue, int32 Temp_int_Array_Index_Variable, bool CallFunc_IsDedicatedServer_ReturnValue_1, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent_4, class AActor* K2Node_ComponentBoundEvent_OtherActor_4, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp_4, int32 K2Node_ComponentBoundEvent_OtherBodyIndex_4, bool K2Node_ComponentBoundEvent_bFromSweep_2, struct FHitResult& K2Node_ComponentBoundEvent_SweepResult_2, class AFortPlayerPawn* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent_3, class AActor* K2Node_ComponentBoundEvent_OtherActor_3, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp_3, int32 K2Node_ComponentBoundEvent_OtherBodyIndex_3, bool K2Node_ComponentBoundEvent_bFromSweep_1, struct FHitResult& K2Node_ComponentBoundEvent_SweepResult_1, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent_2, class AActor* K2Node_ComponentBoundEvent_OtherActor_2, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp_2, int32 K2Node_ComponentBoundEvent_OtherBodyIndex_2, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, TArray<class AActor*>& CallFunc_GetOverlappingActors_OverlappingActors, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_IsDedicatedServer_ReturnValue_2, bool CallFunc_LessEqual_IntInt_ReturnValue, TScriptInterface<class IFortVehicleInterface> K2Node_DynamicCast_AsFort_Vehicle_Interface, bool K2Node_DynamicCast_bSuccess_1, const struct FVector& CallFunc_GetOwnerLocation_ReturnValue, TArray<class AFortPlayerPawn*>& CallFunc_GetAllPassengers_ReturnValue, const struct FVector& K2Node_CustomEvent_PlayerLocation, const struct FVector& K2Node_CustomEvent_DestinationLocation_1, class UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FVector& K2Node_CustomEvent_DestinationLocation, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue_3, class UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue_1, class AActor* K2Node_Event_Actor, class AActor* K2Node_Event_VehicleActor, float CallFunc_GetValueAtLevel_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_GetActorForwardVector_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_1, const struct FVector& CallFunc_Conv_FloatToVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, class AFortPlayerPawn* K2Node_CustomEvent_InteractingPawn, const struct FRotator& CallFunc_MakeRotator_ReturnValue_1, class AFortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, class AFortPlayerPawn* K2Node_Event_PlayerPawn, bool K2Node_Event_bTeleportedToIslandStart, bool CallFunc_Not_PreBool_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, class AFortPlayerController* K2Node_CustomEvent_RequestingController, TArray<class AActor*>& CallFunc_GetOverlappingActors_OverlappingActors_1, bool K2Node_CustomEvent_IsMyPortal, int32 CallFunc_Array_Length_ReturnValue_2, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, class UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue_2, const struct FVector& CallFunc_GetActorForwardVector_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_2, class ABGA_IslandPortal_C* K2Node_DynamicCast_AsBGA_Island_Portal, bool K2Node_DynamicCast_bSuccess_2, const struct FVector& CallFunc_GetPortalPosition_Location, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, const struct FVector& CallFunc_MakeVector_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_2, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_3, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_4, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue_1, float CallFunc_BreakVector_X_1, float CallFunc_BreakVector_Y_1, float CallFunc_BreakVector_Z_1, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_2, const struct FVector& CallFunc_MakeVector_ReturnValue_1, float CallFunc_BreakVector_X_2, float CallFunc_BreakVector_Y_2, float CallFunc_BreakVector_Z_2, const struct FVector& CallFunc_MakeVector_ReturnValue_2, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue_1, float CallFunc_Multiply_FloatFloat_ReturnValue_1, struct FTransform& CallFunc_GetTransform_ReturnValue, float CallFunc_SelectFloat_ReturnValue_2, class AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue_2, class ABP_PortalLightPillar_C* CallFunc_FinishSpawningActor_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_IsValid_ReturnValue_3, float CallFunc_RandomFloatInRange_ReturnValue_1, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, int32 Temp_int_Loop_Counter_Variable, TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class APlayerController* CallFunc_GetPlayerController_ReturnValue, TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_2, class UUserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue_4, TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_3, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, class AFortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess_3, class AFortPlayerPawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue_5, class UUserWidget* CallFunc_Create_ReturnValue, TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface, bool K2Node_DynamicCast_bSuccess_4, bool CallFunc_IsValidClass_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, float CallFunc_DistanceBetweenTwoVectors_Distance, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, class AFortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess_5, class AController* CallFunc_GetController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess_6, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult_1, bool K2Node_Event_bSaving, bool CallFunc_BooleanOR_ReturnValue, TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_4, class UUserWidget* CallFunc_Create_ReturnValue_1, TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_1, bool K2Node_DynamicCast_bSuccess_7, bool CallFunc_IsValidClass_ReturnValue_1, TArray<class AFortPlayerController*>& CallFunc_GetLocalFortPlayerControllers_ReturnValue, class UClass* Temp_class_Variable_2, class AFortPlayerController* CallFunc_Array_Get_Item_1, class UClass* K2Node_ClassDynamicCast_AsUser_Widget_2, bool K2Node_ClassDynamicCast_bSuccess_2, class AFortPlayerStateAthena* CallFunc_GetPlayerState_ReturnValue, const struct FVector& K2Node_CustomEvent_Location, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, class UAudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, class UClass* K2Node_CustomEvent_Loaded_2, bool CallFunc_IsDedicatedServer_ReturnValue_4, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_6, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, const struct FHitResult& CallFunc_K2_SetWorldRotation_SweepHitResult, const struct FVector& CallFunc_ScaleThumbnailPlaneByTextureSize_ReturnValue, const class FString& CallFunc_GetMnemonic_ReturnValue, const struct FLinearColor& K2Node_Select_Default, int32 CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue_1, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_BooleanOR_ReturnValue_2, class APlayerController* CallFunc_GetPlayerController_ReturnValue_1, class UUserWidget* CallFunc_Create_ReturnValue_2, TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_2, bool K2Node_DynamicCast_bSuccess_8, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Event_IsInteracting, bool CallFunc_IsValid_ReturnValue_7, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent_1, class AActor* K2Node_ComponentBoundEvent_OtherActor_1, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp_1, int32 K2Node_ComponentBoundEvent_OtherBodyIndex_1, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult& K2Node_ComponentBoundEvent_SweepResult, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, class AActor* K2Node_ComponentBoundEvent_OtherActor, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, class UClass* Temp_class_Variable_3, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_3, class UClass* K2Node_ClassDynamicCast_AsUser_Widget_3, bool K2Node_ClassDynamicCast_bSuccess_3, class UUserWidget* CallFunc_Create_ReturnValue_3, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction, TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_3, bool K2Node_DynamicCast_bSuccess_9, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction_1, class AFortPlayerPawn* K2Node_Event_InteractingPawn, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue_1, class UClass* K2Node_CustomEvent_Loaded_3, bool CallFunc_BooleanOR_ReturnValue_3);
	void ErrorStateChanged();
	void ServerOnInteractWithIslandPortal(class AFortPlayerPawn* InteractingPawn);
	void BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnReceivedNewIslandInfo();
	void BroadcastIsBeingInteractedWith(bool IsInteracting);
	void Play_Teleport_Audio();
	void SetupPortalForThumbnailDisplay();
	void OnThumbnailTextureReady();
	void Play_Rift_Exit_Sound(const struct FVector& Location);
	void ClientSaveDisplayChanged(bool bSaving);
	void CuratedPortalChanged();
	void UpdatePortal();
	void PortalOpenChanged();
	void TeleportToCreativeHub();
	void DisplayNameChanged();
	void PopulationChanged();
	void CheckShouldDisplayUI();
	void OwningPlayerChanged();
	void CheckIsMyPortal(bool Param_IsMyPortal);
	void EvaluateOverlap();
	void ClientTeleportToLobbyIsland(class AFortPlayerController* RequestingController);
	void NotifyTeleportedPlayerPawn(class AFortPlayerPawn* Param_PlayerPawn, bool bTeleportedToIslandStart);
	void LoadIslandUI(class AFortPlayerPawn* InteractingPawn);
	void NotifyTeleportedVehicle(class AActor* Param_VehicleActor);
	void OverlappingOnBeginPlay(class AActor* Actor);
	void PlayCosmeticFX(const struct FVector& DestinationLocation);
	void PlayTeleportFX(const struct FVector& PlayerLocation, const struct FVector& DestinationLocation);
	void ReceiveBeginPlay();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnLoaded_E60F9B1D4E758E4EA443468A995679B2(class UClass* Loaded);
	void OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5(class UClass* Loaded);
	void OnLoaded_A43955A14A20383F466DF18A87BBA501(class UClass* Loaded);
	void OnLoaded_25EC650C4A5067360B49BC87DAFA1B71(class UClass* Loaded);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void VectorScale__UpdateFunc();
	void VectorScale__FinishedFunc();
	void PlayExpandOrCollapseAudio(bool Expand, bool Temp_bool_Variable, class USoundBase* Temp_object_Variable, class USoundBase* Temp_object_Variable_1, class USoundBase* K2Node_Select_Default, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue);
	void OnRep_TeleportLocation();
	void OnRep_Vehicle();
	void OnRep_PlayerPawn();
	void CheckForRiftLocUpdate(class AController* InController, bool Temp_bool_Variable, class APawn* CallFunc_K2_GetPawn_ReturnValue, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface, bool K2Node_DynamicCast_bSuccess, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_1, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_HasMatchingGameplayTag_ReturnValue, bool CallFunc_HasMatchingGameplayTag_ReturnValue_1, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_2, bool K2Node_DynamicCast_bSuccess_2, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_3, bool K2Node_DynamicCast_bSuccess_3, bool CallFunc_HasMatchingGameplayTag_ReturnValue_2, bool CallFunc_HasMatchingGameplayTag_ReturnValue_3, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_4, bool K2Node_DynamicCast_bSuccess_4, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_5, bool K2Node_DynamicCast_bSuccess_5, bool CallFunc_HasMatchingGameplayTag_ReturnValue_4, bool CallFunc_HasMatchingGameplayTag_ReturnValue_5, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_6, bool K2Node_DynamicCast_bSuccess_6, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_7, bool K2Node_DynamicCast_bSuccess_7, bool CallFunc_HasMatchingGameplayTag_ReturnValue_6, bool CallFunc_HasMatchingGameplayTag_ReturnValue_7, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_8, bool K2Node_DynamicCast_bSuccess_8, bool CallFunc_HasMatchingGameplayTag_ReturnValue_8, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_9, bool K2Node_DynamicCast_bSuccess_9, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_10, bool K2Node_DynamicCast_bSuccess_10, bool CallFunc_HasMatchingGameplayTag_ReturnValue_9, bool CallFunc_HasMatchingGameplayTag_ReturnValue_10, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_11, bool K2Node_DynamicCast_bSuccess_11, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_12, bool K2Node_DynamicCast_bSuccess_12, bool CallFunc_HasMatchingGameplayTag_ReturnValue_11, bool CallFunc_HasMatchingGameplayTag_ReturnValue_12, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_13, bool K2Node_DynamicCast_bSuccess_13, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_14, bool K2Node_DynamicCast_bSuccess_14, bool CallFunc_HasMatchingGameplayTag_ReturnValue_13, bool CallFunc_HasMatchingGameplayTag_ReturnValue_14, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_15, bool K2Node_DynamicCast_bSuccess_15, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_16, bool K2Node_DynamicCast_bSuccess_16, bool CallFunc_HasMatchingGameplayTag_ReturnValue_15, bool CallFunc_HasMatchingGameplayTag_ReturnValue_16, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_17, bool K2Node_DynamicCast_bSuccess_17, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_18, bool K2Node_DynamicCast_bSuccess_18, bool CallFunc_HasMatchingGameplayTag_ReturnValue_17, bool CallFunc_HasMatchingGameplayTag_ReturnValue_18, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_19, bool K2Node_DynamicCast_bSuccess_19, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_20, bool K2Node_DynamicCast_bSuccess_20, bool CallFunc_HasMatchingGameplayTag_ReturnValue_19, bool CallFunc_HasMatchingGameplayTag_ReturnValue_20, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_21, bool K2Node_DynamicCast_bSuccess_21, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_22, bool K2Node_DynamicCast_bSuccess_22, bool CallFunc_HasMatchingGameplayTag_ReturnValue_21, bool CallFunc_HasMatchingGameplayTag_ReturnValue_22, TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_23, bool K2Node_DynamicCast_bSuccess_23, bool CallFunc_HasMatchingGameplayTag_ReturnValue_23, class AFortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess_24, bool CallFunc_IsValid_ReturnValue, TArray<class AFortPlayerController*>& K2Node_MakeArray_Array, bool Temp_bool_Variable_1, bool Temp_bool_Variable_2, bool Temp_bool_Variable_3, bool Temp_bool_Variable_4, bool Temp_bool_Variable_5, bool Temp_bool_Variable_6, bool Temp_bool_Variable_7, bool Temp_bool_Variable_8, bool Temp_bool_Variable_9, bool Temp_bool_Variable_10, bool Temp_bool_Variable_11, bool Temp_bool_Variable_12, bool Temp_bool_Variable_13, bool Temp_bool_Variable_14, bool Temp_bool_Variable_15, int32 Temp_int_Variable, class FName Temp_name_Variable, class FName Temp_name_Variable_1, class FName Temp_name_Variable_2, class FName Temp_name_Variable_3, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, class FName Temp_name_Variable_6, class FName Temp_name_Variable_7, class FName Temp_name_Variable_8, class FName Temp_name_Variable_9, class FName Temp_name_Variable_10, class FName Temp_name_Variable_11, class FName Temp_name_Variable_12, class FName Temp_name_Variable_13, class FName Temp_name_Variable_14, class FName Temp_name_Variable_15, class FName Temp_name_Variable_16, class FName Temp_name_Variable_17, class FName Temp_name_Variable_18, class FName Temp_name_Variable_19, class FName Temp_name_Variable_20, class FName Temp_name_Variable_21, class FName Temp_name_Variable_22, class FName Temp_name_Variable_23, bool Temp_bool_Variable_16, bool Temp_bool_Variable_17, bool Temp_bool_Variable_18, bool Temp_bool_Variable_19, bool Temp_bool_Variable_20, bool Temp_bool_Variable_21, bool Temp_bool_Variable_22, const class FString& CallFunc_Conv_IntToString_ReturnValue, class FName K2Node_Select_Default, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable_23, bool CallFunc_BooleanAND_ReturnValue);
	void UseRiftQuestUpdate(class AController* InController, class AFortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, TArray<class AFortPlayerController*>& K2Node_MakeArray_Array, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void GetPortalPosition(struct FVector* Location, float CallFunc_GetValueAtLevel_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_1, int32 Temp_int_Variable, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue_1, float CallFunc_Add_FloatFloat_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn, class AFortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, class AAthena_PlayerController_C* K2Node_DynamicCast_AsAthena_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_CanModifyPortal_bCanModify);
	void TeleportToLobbyIsland(class AFortPlayerController* RequestingController, class AFortAthenaVehicle* TravelingVehicle, class AFortPlayerPawn* TravelingPawn, const struct FVector& Destination, class AFortPlayerPawn* CallFunc_GetPlayerPawn_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsDrivingVehicle_ReturnValue, const struct FVector& CallFunc_GetPortalPosition_Location, const struct FRotator& CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_TeleportPlayerPawn_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue);
	void SetPortalUIVisibility(bool Show, float Distance, bool WasHidden, bool CallFunc_Not_PreBool_ReturnValue);
	void UpdatePopulationDisplay(int32 CallFunc_Conv_ByteToInt_ReturnValue);
	void UpdateNameDisplay(class FText CallFunc_GetTagline_ReturnValue, class FText CallFunc_GetTagline_ReturnValue_1, const class FString& CallFunc_GetMnemonic_ReturnValue, class FText CallFunc_GetCreatorName_ReturnValue, int32 CallFunc_Len_ReturnValue, class FText CallFunc_GetVolumeDisplayName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue, class FText CallFunc_TextToUpper_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, class AFortPlayerStateAthena* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, const class FString& CallFunc_GetPlayerName_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue_1);
	struct FVector ScaleThumbnailPlaneByTextureSize(bool Temp_bool_Variable, int32 CallFunc_GetThumbnailHeight_ReturnValue, int32 CallFunc_GetThumbnailWidth_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_1, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FVector& K2Node_Select_Default);
	void CanUseHUDInteract(bool* CanInteract, bool CallFunc_IsPortalInteractable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_3);
	void CloseAndClearDisplayedWidget(bool CallFunc_IsValid_ReturnValue);
	void ClearDisplayedWidget();
	void StartOrEndQuery(bool CallFunc_IsDedicatedServer_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
	void QueryPlayerLookAt();
	void UpdateCodeEntryScreen(bool bForceScreenUpdate, bool bLookingAtPortal, bool bLookingAtScreen, class UMaterialInstanceDynamic* Mid, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue_1, int32 Temp_int_Array_Index_Variable, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool Temp_bool_Variable_1, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsPortalInteractable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_NotEqual_BoolBool_ReturnValue_1, bool Temp_bool_Variable_2, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_2, const struct FLinearColor& K2Node_Select_Default, class APawn* CallFunc_Array_Get_Item, bool CallFunc_BooleanOR_ReturnValue_3, bool CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtScreen, bool CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtPortal, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_BooleanOR_ReturnValue_4, const struct FLinearColor& K2Node_Select_Default_1, bool CallFunc_BooleanOR_ReturnValue_5, const struct FLinearColor& K2Node_Select_Default_2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_5, bool CallFunc_Greater_IntInt_ReturnValue, class UMaterialInstanceDynamic* CallFunc_GetMID_MID);
	void UpdateCodeEntryVisibility(bool bCodeScreenHidden, bool Temp_bool_Variable, ECollisionEnabled Temp_byte_Variable, ECollisionEnabled Temp_byte_Variable_1, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_Not_PreBool_ReturnValue, ECollisionEnabled K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue);
	void UpdateBaseVisibility(bool bBaseIsHidden, bool Temp_bool_Variable, ECollisionEnabled Temp_byte_Variable, ECollisionEnabled Temp_byte_Variable_1, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_Not_PreBool_ReturnValue, ECollisionEnabled K2Node_Select_Default, bool CallFunc_IsPortalOpen_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_BooleanOR_ReturnValue);
	void LocalPlayerEnteredRange(class APawn* LocalPawn, int32 CallFunc_Array_AddUnique_ReturnValue);
	void LocalPlayerExitedRange(class APawn* LocalPawn, bool CallFunc_Array_RemoveItem_ReturnValue);
	void LocalPlayerRangeCheck(class AActor* OverlappingActor, bool bEnteredRange, class AFortPlayerController* OverlappingPlayerController, class AFortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, class APawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, TArray<class AFortPlayerController*>& CallFunc_GetLocalFortPlayerControllers_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);
	void StartTeleport(class AActor* Param_OverlapActor, bool CallFunc_IsPortalOpen_ReturnValue, class AFortVolume* CallFunc_GetLinkedVolume_ReturnValue, bool CallFunc_IsValid_ReturnValue, const struct FRotator& CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInVehicle_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, class AController* CallFunc_GetController_ReturnValue, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_HasAuthority_ReturnValue_1);
	void UpdateInfoPlatePointer(bool Temp_bool_Variable, bool CallFunc_IsPortalInteractable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_IsPortalOpen_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_BooleanOR_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_BooleanAND_ReturnValue_5, class USceneComponent* K2Node_Select_Default, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue);
	void StartTeleportByInteractionOnServer(class AActor* Param_OverlapActor, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction, bool CallFunc_IsOverlappingActor_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1);
	void DetermineWherePlayerIsLooking(class APawn* Pawn, bool* bIsLookingAtScreen, bool* bIsLookingAtPortal, bool bLookingAtScreen, bool bLookingAtPortal, const struct FVector& EyesViewPointLocation, const struct FRotator& EyesViewPointRotation, bool CallFunc_IsValid_ReturnValue, class AController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, const struct FVector& CallFunc_GetActorEyesViewPoint_OutLocation, const struct FRotator& CallFunc_GetActorEyesViewPoint_OutRotation, bool CallFunc_IsLookingAtSphere_bIsLookingAtSphere, bool CallFunc_BooleanAND_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, float CallFunc_Vector_DistanceSquared_ReturnValue, float CallFunc_Vector_DistanceSquared_ReturnValue_1, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_IsLookingAtSphere_bIsLookingAtSphere_1);

	bool BlueprintCanInteract(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted, ETInteractionType InteractionType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_IsPortalOpen_ReturnValue) const;
	class FText BlueprintGetInteractionString(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted, class FText Temp_text_Variable, class FText Temp_text_Variable_1, bool Temp_bool_Variable, bool Temp_bool_Variable_1, class FText Temp_text_Variable_2, bool Temp_bool_Variable_2, class FText Temp_text_Variable_3, bool Temp_bool_Variable_3, class FText Temp_text_Variable_4, class FText Temp_text_Variable_5, bool Temp_bool_Variable_4, bool Temp_bool_Variable_5, bool Temp_bool_Variable_6, class FText Temp_text_Variable_6, class FText Temp_text_Variable_7, bool Temp_bool_Variable_7, class FText Temp_text_Variable_8, class FText Temp_text_Variable_9, bool Temp_bool_Variable_8, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_IsMobileGame_ReturnValue, class FText K2Node_Select_Default, class FText K2Node_Select_Default_1, class FText K2Node_Select_Default_2, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction, bool CallFunc_CanModifyPortal_bCanModify, bool CallFunc_IsMobileGame_ReturnValue_1, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_Not_PreBool_ReturnValue, class FText K2Node_Select_Default_3, class FText K2Node_Select_Default_4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsMobileGame_ReturnValue_2, class FText K2Node_Select_Default_5, class FText K2Node_Select_Default_6, class FText K2Node_Select_Default_7, class FText K2Node_Select_Default_8) const;
	bool BlueprintGetInteractionTime(class AFortPawn* InteractingPawn, float* OutInteractionTime, EInteractionBeingAttempted InteractionBeingAttempted, bool CallFunc_CanModifyPortal_bCanModify, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) const;
	void PortalTeleportsByInteraction(bool* bRequiresInteraction, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2) const;
	void PortalUsesCodeScreen(bool* bUsesCodeScreen, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_IsPortalInteractable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_UniqueNetIdRepl_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_3) const;
	void IsLookingAtSphere(class USphereComponent* LookAtSphere, const struct FVector& Eyes_View_Point_Location, const struct FRotator& Eyes_View_Point_Rotation, bool* bIsLookingAtSphere, const struct FVector& LookAtWorldLocation, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_GetForwardVector_ReturnValue, float CallFunc_GetScaledSphereRadius_ReturnValue, const struct FVector& CallFunc_FindClosestPointOnLine_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Vector_Distance2DSquared_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue) const;
	void CanModifyPortal(bool* bCanModify, bool CallFunc_IsPortalInteractable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GetIsPublishedPortal_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_BooleanOR_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_5) const;
	void GetIconPlacement(class AActor* SelfActor, class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, const struct FVector& CallFunc_GetIconPlacement_OutLocation, const struct FVector& CallFunc_GetIconPlacement_OutExtents, bool CallFunc_BooleanAND_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_Conv_FloatToVector_ReturnValue) const;
	bool IconPlacementNeedsUpdate() const;
	bool BlueprintUseMobileHighlight(bool CallFunc_MobileInteractIsValid_bIsValid) const;
	bool BlueprintDisplayMobileInteractPrompt(bool CallFunc_MobileInteractIsValid_bIsValid) const;
	void MobileInteractIsValid(bool* bIsValid, bool CallFunc_PortalTeleportsByInteraction_bRequiresInteraction, bool CallFunc_PortalUsesCodeScreen_bUsesCodeScreen, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_IslandPortal_C">();
	}
	static class ABGA_IslandPortal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_IslandPortal_C>();
	}
};
static_assert(alignof(ABGA_IslandPortal_C) == 0x000008, "Wrong alinment on ABGA_IslandPortal_C");
static_assert(sizeof(ABGA_IslandPortal_C) == 0x000FD8, "Wrong size on ABGA_IslandPortal_C");
static_assert(offsetof(ABGA_IslandPortal_C, UberGraphFrame) == 0x000B10, "Member 'ABGA_IslandPortal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CodeScreenLookAtSphere) == 0x000B18, "Member 'ABGA_IslandPortal_C::CodeScreenLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalLookAtSphere) == 0x000B20, "Member 'ABGA_IslandPortal_C::PortalLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, HUD_Visibility_Volume) == 0x000B28, "Member 'ABGA_IslandPortal_C::HUD_Visibility_Volume' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Code_Entry_Screen) == 0x000B30, "Member 'ABGA_IslandPortal_C::Code_Entry_Screen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Base_Mesh) == 0x000B38, "Member 'ABGA_IslandPortal_C::Base_Mesh' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalHUDDetails_PointerOrigin) == 0x000B40, "Member 'ABGA_IslandPortal_C::PortalHUDDetails_PointerOrigin' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlate) == 0x000B48, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlate' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailPlane) == 0x000B50, "Member 'ABGA_IslandPortal_C::ThumbnailPlane' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop_Gold) == 0x000B58, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPostProcess) == 0x000B60, "Member 'ABGA_IslandPortal_C::RiftPostProcess' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PostProcessRadius) == 0x000B68, "Member 'ABGA_IslandPortal_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_RiftClosingUp) == 0x000B70, "Member 'ABGA_IslandPortal_C::P_RiftClosingUp' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop) == 0x000B78, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapCapsule) == 0x000B80, "Member 'ABGA_IslandPortal_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Capsule) == 0x000B88, "Member 'ABGA_IslandPortal_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, SM_Rift) == 0x000B90, "Member 'ABGA_IslandPortal_C::SM_Rift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Audio_Looping) == 0x000B98, "Member 'ABGA_IslandPortal_C::Audio_Looping' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0_Open_D988993744202060C85FC18A08065960) == 0x000BA0, "Member 'ABGA_IslandPortal_C::Timeline_0_Open_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0__Direction_D988993744202060C85FC18A08065960) == 0x000BA4, "Member 'ABGA_IslandPortal_C::Timeline_0__Direction_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0) == 0x000BA8, "Member 'ABGA_IslandPortal_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E) == 0x000BB0, "Member 'ABGA_IslandPortal_C::VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E) == 0x000BB4, "Member 'ABGA_IslandPortal_C::VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale) == 0x000BB8, "Member 'ABGA_IslandPortal_C::VectorScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DeathEffects) == 0x000BC0, "Member 'ABGA_IslandPortal_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnteredRift) == 0x000BC8, "Member 'ABGA_IslandPortal_C::EnteredRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftDestroyed) == 0x000BD0, "Member 'ABGA_IslandPortal_C::RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerPawn) == 0x000BD8, "Member 'ABGA_IslandPortal_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnterRift) == 0x000BE0, "Member 'ABGA_IslandPortal_C::EnterRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VehicleActor) == 0x000BE8, "Member 'ABGA_IslandPortal_C::VehicleActor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, FallingAnimation) == 0x000BF0, "Member 'ABGA_IslandPortal_C::FallingAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportHeight) == 0x000BF8, "Member 'ABGA_IslandPortal_C::TeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, HangTime) == 0x000C20, "Member 'ABGA_IslandPortal_C::HangTime' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportDelay) == 0x000C48, "Member 'ABGA_IslandPortal_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PassengerArray) == 0x000C50, "Member 'ABGA_IslandPortal_C::PassengerArray' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CrackExitRift) == 0x000C60, "Member 'ABGA_IslandPortal_C::CrackExitRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerExitSkyCrack) == 0x000C68, "Member 'ABGA_IslandPortal_C::PlayerExitSkyCrack' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorOriginalLocation) == 0x000C70, "Member 'ABGA_IslandPortal_C::ActorOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, MaxSpawnHeightMultiplier) == 0x000C7C, "Member 'ABGA_IslandPortal_C::MaxSpawnHeightMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, QuestItem) == 0x000C80, "Member 'ABGA_IslandPortal_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjectiveBackendName) == 0x000C88, "Member 'ABGA_IslandPortal_C::ObjectiveBackendName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPortalLocationsQuest) == 0x000C90, "Member 'ABGA_IslandPortal_C::RiftPortalLocationsQuest' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CreativeMode) == 0x000C98, "Member 'ABGA_IslandPortal_C::CreativeMode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapActor) == 0x000CA0, "Member 'ABGA_IslandPortal_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftLocationNum) == 0x000CA8, "Member 'ABGA_IslandPortal_C::RiftLocationNum' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorRotation) == 0x000CAC, "Member 'ABGA_IslandPortal_C::ActorRotation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ShouldSpawnRift_) == 0x000CB8, "Member 'ABGA_IslandPortal_C::ShouldSpawnRift_' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportExitDistance_0) == 0x000CE0, "Member 'ABGA_IslandPortal_C::TeleportExitDistance_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalCount) == 0x000D08, "Member 'ABGA_IslandPortal_C::PortalCount' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, XPortalSeparation) == 0x000D10, "Member 'ABGA_IslandPortal_C::XPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StarterIslandTeleportHeight) == 0x000D38, "Member 'ABGA_IslandPortal_C::StarterIslandTeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bCanPlayerInteract) == 0x000D60, "Member 'ABGA_IslandPortal_C::bCanPlayerInteract' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, YPortalSeparation) == 0x000D68, "Member 'ABGA_IslandPortal_C::YPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PendingTeleport) == 0x000D90, "Member 'ABGA_IslandPortal_C::PendingTeleport' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, IsMyPortal) == 0x000D98, "Member 'ABGA_IslandPortal_C::IsMyPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Enter_Rift_Gold) == 0x000DA0, "Member 'ABGA_IslandPortal_C::Enter_Rift_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Beacon) == 0x000DA8, "Member 'ABGA_IslandPortal_C::Beacon' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIDistanceCheckTimer) == 0x000DB0, "Member 'ABGA_IslandPortal_C::UIDistanceCheckTimer' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIShowDistance) == 0x000DB8, "Member 'ABGA_IslandPortal_C::UIShowDistance' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_InteractionDisplayWidgetSoftClass) == 0x000DC0, "Member 'ABGA_IslandPortal_C::UI_InteractionDisplayWidgetSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlateSoftClass) == 0x000DE8, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlateSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerName) == 0x000E10, "Member 'ABGA_IslandPortal_C::UpdatePlayerName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerPop) == 0x000E20, "Member 'ABGA_IslandPortal_C::UpdatePlayerPop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIslandName) == 0x000E30, "Member 'ABGA_IslandPortal_C::UpdateIslandName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePortalUIVis) == 0x000E40, "Member 'ABGA_IslandPortal_C::UpdatePortalUIVis' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectSoftClass) == 0x000E50, "Member 'ABGA_IslandPortal_C::UI_IslandSelectSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectClass) == 0x000E78, "Member 'ABGA_IslandPortal_C::UI_IslandSelectClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StartSkydiving) == 0x000E80, "Member 'ABGA_IslandPortal_C::StartSkydiving' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIsCuratedPortal) == 0x000E88, "Member 'ABGA_IslandPortal_C::UpdateIsCuratedPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntrySoftClass) == 0x000E98, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntrySoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntryClass) == 0x000EC0, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntryClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateDescription) == 0x000EC8, "Member 'ABGA_IslandPortal_C::UpdateDescription' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateLinkCode) == 0x000ED8, "Member 'ABGA_IslandPortal_C::UpdateLinkCode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bIsBeingDisplayed) == 0x000EE8, "Member 'ABGA_IslandPortal_C::bIsBeingDisplayed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailWorldSizeScale) == 0x000EEC, "Member 'ABGA_IslandPortal_C::ThumbnailWorldSizeScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OwnedThumbnailColor) == 0x000EF0, "Member 'ABGA_IslandPortal_C::OwnedThumbnailColor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UnownedThumbnailColor) == 0x000F00, "Member 'ABGA_IslandPortal_C::UnownedThumbnailColor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverrideName) == 0x000F10, "Member 'ABGA_IslandPortal_C::OverrideName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bAlwaysDisplay) == 0x000F28, "Member 'ABGA_IslandPortal_C::bAlwaysDisplay' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, IsBeingInteractedWith) == 0x000F30, "Member 'ABGA_IslandPortal_C::IsBeingInteractedWith' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DisplayedWidget) == 0x000F40, "Member 'ABGA_IslandPortal_C::DisplayedWidget' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CloseShownUI) == 0x000F48, "Member 'ABGA_IslandPortal_C::CloseShownUI' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LocalPawnsInRange) == 0x000F58, "Member 'ABGA_IslandPortal_C::LocalPawnsInRange' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LookAtUpdateTimeSecs) == 0x000F68, "Member 'ABGA_IslandPortal_C::LookAtUpdateTimeSecs' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LookAtCodeScreenHandle) == 0x000F70, "Member 'ABGA_IslandPortal_C::LookAtCodeScreenHandle' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorNotHighlighted) == 0x000F78, "Member 'ABGA_IslandPortal_C::ScreenColorNotHighlighted' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorCanUpdate) == 0x000F88, "Member 'ABGA_IslandPortal_C::ScreenColorCanUpdate' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorLocked) == 0x000F98, "Member 'ABGA_IslandPortal_C::ScreenColorLocked' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorDisabled) == 0x000FA8, "Member 'ABGA_IslandPortal_C::ScreenColorDisabled' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bUseCodeEntryScreen) == 0x000FB8, "Member 'ABGA_IslandPortal_C::bUseCodeEntryScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bPlayerMustInteractToUsePortal) == 0x000FB9, "Member 'ABGA_IslandPortal_C::bPlayerMustInteractToUsePortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bEnableBaseAndCodeEntryInteractions) == 0x000FBA, "Member 'ABGA_IslandPortal_C::bEnableBaseAndCodeEntryInteractions' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateLocalPlayerLookingAtScreen) == 0x000FC0, "Member 'ABGA_IslandPortal_C::UpdateLocalPlayerLookingAtScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bLocalPlayerLookingAtScreen) == 0x000FD0, "Member 'ABGA_IslandPortal_C::bLocalPlayerLookingAtScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bLocalPlayerLookingAtPortal) == 0x000FD1, "Member 'ABGA_IslandPortal_C::bLocalPlayerLookingAtPortal' has a wrong offset!");

}

