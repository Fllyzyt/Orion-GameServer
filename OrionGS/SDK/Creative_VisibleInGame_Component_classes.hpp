#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_VisibleInGame_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EVisibleInGameState_structs.hpp"
#include "Enum_ForcedValueDuringGame_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Creative_DeviceComponent_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_VisibleInGame_Component.Creative_VisibleInGame_Component_C
// 0x0090 (0x0148 - 0x00B8)
class UCreative_VisibleInGame_Component_C final  : public UCreative_DeviceComponent_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Creative_VisibleInGame_Component_C; // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             On_Visibility_Changed;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class USceneComponent*>                VisibleSceneComponents;                            // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bEnableCollisionUpdates;                           // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Default_Collision_Enabled_State;                   // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Collision_Disabled_State;                          // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisibleInGameState                           VisibleDuringPhase;                                // 0x00E3(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bResetOnComponentActivation;                       // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B52[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RetryBindMiniGameEventsTimer;                      // 0x00E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class USceneComponent*, ECollisionEnabled> Collision_Enabled_Overrides;                       // 0x00F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	Enum_ForcedValueDuringGame                    ForcedVisibilityDuringGame;                        // 0x0140(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSetHiddenInGame;                               // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Update_Foliage_on_Visibility_Change;               // 0x0142(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void On_Visibility_Changed__DelegateSignature(bool Visible);
	void ExecuteUbergraph_Creative_VisibleInGame_Component(int32 EntryPoint, class AFortVolumeManager* CallFunc_GetVolumeManager_OutVolumeManager, EVolumeValidityResult CallFunc_GetVolumeManager_OutIsValid, class AFortMinigame* K2Node_CustomEvent_Minigame_1, bool K2Node_CustomEvent_bIsInPlayMode, bool K2Node_SwitchEnum_CmpSuccess, class AActor* CallFunc_GetOwner_ReturnValue, class AFortMinigame* CallFunc_GetMinigameFromVolume_ReturnValue, bool CallFunc_IsValid_ReturnValue, TDelegate<void(class AFortMinigame* Minigame, bool bIsInPlayMode)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, class AFortMinigame* K2Node_CustomEvent_Minigame, EFortMinigameState K2Node_CustomEvent_MinigameState, TDelegate<void(class AFortMinigame* Minigame, EFortMinigameState MinigameState)> K2Node_CreateDelegate_OutputDelegate_2, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void OnMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void Bind_Minigame_Events();
	void OnPlayModeChangedDelegate(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void ReceiveBeginPlay();
	void Get_Visibility_Components(TArray<class USceneComponent*>* Components);
	void Update_Visibility(TArray<class USceneComponent*>& CallFunc_Get_Visibility_Components_Components);
	void Set_Visiblity_During_Phase(EVisibleInGameState New_Visible_During_Phase, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);
	void Update_Component_Visibility(class USceneComponent* Component, bool Visible, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class UParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, class UAudioComponent* K2Node_DynamicCast_AsAudio_Component, bool K2Node_DynamicCast_bSuccess_1, class UPrimitiveComponent* K2Node_DynamicCast_AsPrimitive_Component, bool K2Node_DynamicCast_bSuccess_2);
	void Update_Primitive_Component_Collision(class UPrimitiveComponent* Primitive_Component, bool Visible, bool CallFunc_IsValid_ReturnValue, ECollisionEnabled CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable_1, ECollisionEnabled K2Node_Select_Default, ECollisionEnabled K2Node_Select_Default_1);
	void Update_Audio_Component(class UAudioComponent* Audio_Component, bool Visible, bool CallFunc_IsValid_ReturnValue);
	void Update_Particle_Component(class UParticleSystemComponent* Particle_Component, bool Visible, bool CallFunc_IsValid_ReturnValue);
	bool Is_In_Play_Mode(class AFortVolumeManager* CallFunc_GetVolumeManager_OutVolumeManager, EVolumeValidityResult CallFunc_GetVolumeManager_OutIsValid, class AActor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class AFortVolume* CallFunc_GetVolumeForActor_ReturnValue, class AFortMinigame* CallFunc_GetMinigameForVolume_ReturnValue, bool CallFunc_IsReadOnly_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsInPlayMode_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1);
	void Set_Visibility_Components(TArray<class USceneComponent*>& Scene_Components, const TArray<ECollisionEnabled>& Local_Collision_List);
	void OnRep_VisibleDuringPhase();
	void Should_Be_Visible(bool* Visible, bool Temp_bool_Variable, bool CallFunc_Is_In_Play_Mode_ReturnValue, bool Temp_bool_Variable_1, bool CallFunc_Not_PreBool_ReturnValue, Enum_ForcedValueDuringGame Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool K2Node_Select_Default);
	void Set_Visibility_Components_with_Collision(const TMap<class USceneComponent*, ECollisionEnabled>& Collision_Overrides, TArray<class USceneComponent*>& CallFunc_Map_Keys_Keys);
	void Update_Array_Visibility(TArray<class USceneComponent*>& Array, bool CacheVisible, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, int32 Temp_int_Array_Index_Variable, bool CallFunc_Conv_IntToBool_ReturnValue, class USceneComponent* CallFunc_Array_Get_Item, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Should_Be_Visible_Visible);
	void SetForcedVisibilityDuringGame(Enum_ForcedValueDuringGame NewForcedVisibilityDuringGame, class AActor* CallFunc_GetOwner_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);
	void OnRep_ForcedVisibilityDuringGame();
	void Update_Foliage(bool CallFunc_IsDedicatedServer_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, class ABuildingActor* K2Node_DynamicCast_AsBuilding_Actor, bool K2Node_DynamicCast_bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_VisibleInGame_Component_C">();
	}
	static class UCreative_VisibleInGame_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreative_VisibleInGame_Component_C>();
	}
};
static_assert(alignof(UCreative_VisibleInGame_Component_C) == 0x000008, "Wrong alinment on UCreative_VisibleInGame_Component_C");
static_assert(sizeof(UCreative_VisibleInGame_Component_C) == 0x000148, "Wrong size on UCreative_VisibleInGame_Component_C");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, UberGraphFrame_Creative_VisibleInGame_Component_C) == 0x0000B8, "Member 'UCreative_VisibleInGame_Component_C::UberGraphFrame_Creative_VisibleInGame_Component_C' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, On_Visibility_Changed) == 0x0000C0, "Member 'UCreative_VisibleInGame_Component_C::On_Visibility_Changed' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, VisibleSceneComponents) == 0x0000D0, "Member 'UCreative_VisibleInGame_Component_C::VisibleSceneComponents' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, bEnableCollisionUpdates) == 0x0000E0, "Member 'UCreative_VisibleInGame_Component_C::bEnableCollisionUpdates' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, Default_Collision_Enabled_State) == 0x0000E1, "Member 'UCreative_VisibleInGame_Component_C::Default_Collision_Enabled_State' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, Collision_Disabled_State) == 0x0000E2, "Member 'UCreative_VisibleInGame_Component_C::Collision_Disabled_State' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, VisibleDuringPhase) == 0x0000E3, "Member 'UCreative_VisibleInGame_Component_C::VisibleDuringPhase' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, bResetOnComponentActivation) == 0x0000E4, "Member 'UCreative_VisibleInGame_Component_C::bResetOnComponentActivation' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, RetryBindMiniGameEventsTimer) == 0x0000E8, "Member 'UCreative_VisibleInGame_Component_C::RetryBindMiniGameEventsTimer' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, Collision_Enabled_Overrides) == 0x0000F0, "Member 'UCreative_VisibleInGame_Component_C::Collision_Enabled_Overrides' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, ForcedVisibilityDuringGame) == 0x000140, "Member 'UCreative_VisibleInGame_Component_C::ForcedVisibilityDuringGame' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, bUseSetHiddenInGame) == 0x000141, "Member 'UCreative_VisibleInGame_Component_C::bUseSetHiddenInGame' has a wrong offset!");
static_assert(offsetof(UCreative_VisibleInGame_Component_C, Update_Foliage_on_Visibility_Change) == 0x000142, "Member 'UCreative_VisibleInGame_Component_C::Update_Foliage_on_Visibility_Change' has a wrong offset!");

}

