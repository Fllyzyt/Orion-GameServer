#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Quat4

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Quat4.Quat4.calcTangents
// 0x0028 (0x0028 - 0x0000)
struct Quat4_CalcTangents final 
{
public:
	class UQuat4*                                 __verse_0x07BDAE31_prevQ;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC170DC03_nextQ;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x35918A51_tension;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A4F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_CalcTangents) == 0x000008, "Wrong alinment on Quat4_CalcTangents");
static_assert(sizeof(Quat4_CalcTangents) == 0x000028, "Wrong size on Quat4_CalcTangents");
static_assert(offsetof(Quat4_CalcTangents, __verse_0x07BDAE31_prevQ) == 0x000000, "Member 'Quat4_CalcTangents::__verse_0x07BDAE31_prevQ' has a wrong offset!");
static_assert(offsetof(Quat4_CalcTangents, __verse_0xE518C7F2_q) == 0x000008, "Member 'Quat4_CalcTangents::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_CalcTangents, __verse_0xC170DC03_nextQ) == 0x000010, "Member 'Quat4_CalcTangents::__verse_0xC170DC03_nextQ' has a wrong offset!");
static_assert(offsetof(Quat4_CalcTangents, __verse_0x35918A51_tension) == 0x000018, "Member 'Quat4_CalcTangents::__verse_0x35918A51_tension' has a wrong offset!");
static_assert(offsetof(Quat4_CalcTangents, RetVal) == 0x000020, "Member 'Quat4_CalcTangents::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Create
// 0x0018 (0x0018 - 0x0000)
struct Quat4_Create final 
{
public:
	class UVector3*                               __verse_0xAB14FAEF_axis;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x8ADC6410_radians;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A50[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Create) == 0x000008, "Wrong alinment on Quat4_Create");
static_assert(sizeof(Quat4_Create) == 0x000018, "Wrong size on Quat4_Create");
static_assert(offsetof(Quat4_Create, __verse_0xAB14FAEF_axis) == 0x000000, "Member 'Quat4_Create::__verse_0xAB14FAEF_axis' has a wrong offset!");
static_assert(offsetof(Quat4_Create, __verse_0x8ADC6410_radians) == 0x000008, "Member 'Quat4_Create::__verse_0x8ADC6410_radians' has a wrong offset!");
static_assert(offsetof(Quat4_Create, RetVal) == 0x000010, "Member 'Quat4_Create::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createFromRotation
// 0x0010 (0x0010 - 0x0000)
struct Quat4_CreateFromRotation final 
{
public:
	class URotation3*                             __verse_0xAA1ABDC9_rotation;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_CreateFromRotation) == 0x000008, "Wrong alinment on Quat4_CreateFromRotation");
static_assert(sizeof(Quat4_CreateFromRotation) == 0x000010, "Wrong size on Quat4_CreateFromRotation");
static_assert(offsetof(Quat4_CreateFromRotation, __verse_0xAA1ABDC9_rotation) == 0x000000, "Member 'Quat4_CreateFromRotation::__verse_0xAA1ABDC9_rotation' has a wrong offset!");
static_assert(offsetof(Quat4_CreateFromRotation, RetVal) == 0x000008, "Member 'Quat4_CreateFromRotation::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createIdentity
// 0x0008 (0x0008 - 0x0000)
struct Quat4_CreateIdentity final 
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_CreateIdentity) == 0x000008, "Wrong alinment on Quat4_CreateIdentity");
static_assert(sizeof(Quat4_CreateIdentity) == 0x000008, "Wrong size on Quat4_CreateIdentity");
static_assert(offsetof(Quat4_CreateIdentity, RetVal) == 0x000000, "Member 'Quat4_CreateIdentity::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.createZero
// 0x0008 (0x0008 - 0x0000)
struct Quat4_CreateZero final 
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_CreateZero) == 0x000008, "Wrong alinment on Quat4_CreateZero");
static_assert(sizeof(Quat4_CreateZero) == 0x000008, "Wrong size on Quat4_CreateZero");
static_assert(offsetof(Quat4_CreateZero, RetVal) == 0x000000, "Member 'Quat4_CreateZero::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Error
// 0x0018 (0x0018 - 0x0000)
struct Quat4_Error final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Error) == 0x000008, "Wrong alinment on Quat4_Error");
static_assert(sizeof(Quat4_Error) == 0x000018, "Wrong size on Quat4_Error");
static_assert(offsetof(Quat4_Error, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_Error::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_Error, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_Error::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_Error, RetVal) == 0x000010, "Member 'Quat4_Error::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.fastBilerp
// 0x0030 (0x0030 - 0x0000)
struct Quat4_FastBilerp final 
{
public:
	class UQuat4*                                 __verse_0x47EC792A_p00;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xD9ECD3E6_p10;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x228BC592_p01;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xBC8B6F5E_p11;                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x4DC01E1F_fracX;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x28A7A2A7_fracY;                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_FastBilerp) == 0x000008, "Wrong alinment on Quat4_FastBilerp");
static_assert(sizeof(Quat4_FastBilerp) == 0x000030, "Wrong size on Quat4_FastBilerp");
static_assert(offsetof(Quat4_FastBilerp, __verse_0x47EC792A_p00) == 0x000000, "Member 'Quat4_FastBilerp::__verse_0x47EC792A_p00' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, __verse_0xD9ECD3E6_p10) == 0x000008, "Member 'Quat4_FastBilerp::__verse_0xD9ECD3E6_p10' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, __verse_0x228BC592_p01) == 0x000010, "Member 'Quat4_FastBilerp::__verse_0x228BC592_p01' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, __verse_0xBC8B6F5E_p11) == 0x000018, "Member 'Quat4_FastBilerp::__verse_0xBC8B6F5E_p11' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, __verse_0x4DC01E1F_fracX) == 0x000020, "Member 'Quat4_FastBilerp::__verse_0x4DC01E1F_fracX' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, __verse_0x28A7A2A7_fracY) == 0x000024, "Member 'Quat4_FastBilerp::__verse_0x28A7A2A7_fracY' has a wrong offset!");
static_assert(offsetof(Quat4_FastBilerp, RetVal) == 0x000028, "Member 'Quat4_FastBilerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.fastLerp
// 0x0020 (0x0020 - 0x0000)
struct Quat4_FastLerp final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A51[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_FastLerp) == 0x000008, "Wrong alinment on Quat4_FastLerp");
static_assert(sizeof(Quat4_FastLerp) == 0x000020, "Wrong size on Quat4_FastLerp");
static_assert(offsetof(Quat4_FastLerp, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_FastLerp::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_FastLerp, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_FastLerp::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_FastLerp, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_FastLerp::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_FastLerp, RetVal) == 0x000018, "Member 'Quat4_FastLerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetween
// 0x0018 (0x0018 - 0x0000)
struct Quat4_FindBetween final 
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_FindBetween) == 0x000008, "Wrong alinment on Quat4_FindBetween");
static_assert(sizeof(Quat4_FindBetween) == 0x000018, "Wrong size on Quat4_FindBetween");
static_assert(offsetof(Quat4_FindBetween, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Quat4_FindBetween::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetween, __verse_0x54773F55_v2) == 0x000008, "Member 'Quat4_FindBetween::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetween, RetVal) == 0x000010, "Member 'Quat4_FindBetween::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetweenNormals
// 0x0018 (0x0018 - 0x0000)
struct Quat4_FindBetweenNormals final 
{
public:
	class UVector3*                               __verse_0x24F2D4E8_n1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0xCA5D61FA_n2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_FindBetweenNormals) == 0x000008, "Wrong alinment on Quat4_FindBetweenNormals");
static_assert(sizeof(Quat4_FindBetweenNormals) == 0x000018, "Wrong size on Quat4_FindBetweenNormals");
static_assert(offsetof(Quat4_FindBetweenNormals, __verse_0x24F2D4E8_n1) == 0x000000, "Member 'Quat4_FindBetweenNormals::__verse_0x24F2D4E8_n1' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetweenNormals, __verse_0xCA5D61FA_n2) == 0x000008, "Member 'Quat4_FindBetweenNormals::__verse_0xCA5D61FA_n2' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetweenNormals, RetVal) == 0x000010, "Member 'Quat4_FindBetweenNormals::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.findBetweenVectors
// 0x0018 (0x0018 - 0x0000)
struct Quat4_FindBetweenVectors final 
{
public:
	class UVector3*                               __verse_0xBAD88A47_v1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               __verse_0x54773F55_v2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_FindBetweenVectors) == 0x000008, "Wrong alinment on Quat4_FindBetweenVectors");
static_assert(sizeof(Quat4_FindBetweenVectors) == 0x000018, "Wrong size on Quat4_FindBetweenVectors");
static_assert(offsetof(Quat4_FindBetweenVectors, __verse_0xBAD88A47_v1) == 0x000000, "Member 'Quat4_FindBetweenVectors::__verse_0xBAD88A47_v1' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetweenVectors, __verse_0x54773F55_v2) == 0x000008, "Member 'Quat4_FindBetweenVectors::__verse_0x54773F55_v2' has a wrong offset!");
static_assert(offsetof(Quat4_FindBetweenVectors, RetVal) == 0x000010, "Member 'Quat4_FindBetweenVectors::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.safeError
// 0x0018 (0x0018 - 0x0000)
struct Quat4_SafeError final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SafeError) == 0x000008, "Wrong alinment on Quat4_SafeError");
static_assert(sizeof(Quat4_SafeError) == 0x000018, "Wrong size on Quat4_SafeError");
static_assert(offsetof(Quat4_SafeError, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_SafeError::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_SafeError, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_SafeError::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_SafeError, RetVal) == 0x000010, "Member 'Quat4_SafeError::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerp
// 0x0020 (0x0020 - 0x0000)
struct Quat4_Slerp final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A52[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Slerp) == 0x000008, "Wrong alinment on Quat4_Slerp");
static_assert(sizeof(Quat4_Slerp) == 0x000020, "Wrong size on Quat4_Slerp");
static_assert(offsetof(Quat4_Slerp, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_Slerp::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_Slerp, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_Slerp::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_Slerp, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_Slerp::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_Slerp, RetVal) == 0x000018, "Member 'Quat4_Slerp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpFullPath
// 0x0020 (0x0020 - 0x0000)
struct Quat4_SlerpFullPath final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A53[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SlerpFullPath) == 0x000008, "Wrong alinment on Quat4_SlerpFullPath");
static_assert(sizeof(Quat4_SlerpFullPath) == 0x000020, "Wrong size on Quat4_SlerpFullPath");
static_assert(offsetof(Quat4_SlerpFullPath, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_SlerpFullPath::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPath, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_SlerpFullPath::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPath, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_SlerpFullPath::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPath, RetVal) == 0x000018, "Member 'Quat4_SlerpFullPath::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpFullPathNotNormalized
// 0x0020 (0x0020 - 0x0000)
struct Quat4_SlerpFullPathNotNormalized final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A54[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SlerpFullPathNotNormalized) == 0x000008, "Wrong alinment on Quat4_SlerpFullPathNotNormalized");
static_assert(sizeof(Quat4_SlerpFullPathNotNormalized) == 0x000020, "Wrong size on Quat4_SlerpFullPathNotNormalized");
static_assert(offsetof(Quat4_SlerpFullPathNotNormalized, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_SlerpFullPathNotNormalized::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPathNotNormalized, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_SlerpFullPathNotNormalized::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPathNotNormalized, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_SlerpFullPathNotNormalized::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpFullPathNotNormalized, RetVal) == 0x000018, "Member 'Quat4_SlerpFullPathNotNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.slerpNotNormalized
// 0x0020 (0x0020 - 0x0000)
struct Quat4_SlerpNotNormalized final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A55[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SlerpNotNormalized) == 0x000008, "Wrong alinment on Quat4_SlerpNotNormalized");
static_assert(sizeof(Quat4_SlerpNotNormalized) == 0x000020, "Wrong size on Quat4_SlerpNotNormalized");
static_assert(offsetof(Quat4_SlerpNotNormalized, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_SlerpNotNormalized::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpNotNormalized, __verse_0x4D7EFA5F_q2) == 0x000008, "Member 'Quat4_SlerpNotNormalized::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpNotNormalized, __verse_0x05A40B7F_alpha) == 0x000010, "Member 'Quat4_SlerpNotNormalized::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_SlerpNotNormalized, RetVal) == 0x000018, "Member 'Quat4_SlerpNotNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Squad
// 0x0030 (0x0030 - 0x0000)
struct Quat4_Squad final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC7DFAF05_t1;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x29701A17_t2;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A56[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Squad) == 0x000008, "Wrong alinment on Quat4_Squad");
static_assert(sizeof(Quat4_Squad) == 0x000030, "Wrong size on Quat4_Squad");
static_assert(offsetof(Quat4_Squad, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_Squad::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0xC7DFAF05_t1) == 0x000008, "Member 'Quat4_Squad::__verse_0xC7DFAF05_t1' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x4D7EFA5F_q2) == 0x000010, "Member 'Quat4_Squad::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x29701A17_t2) == 0x000018, "Member 'Quat4_Squad::__verse_0x29701A17_t2' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, __verse_0x05A40B7F_alpha) == 0x000020, "Member 'Quat4_Squad::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_Squad, RetVal) == 0x000028, "Member 'Quat4_Squad::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.squadFullPath
// 0x0030 (0x0030 - 0x0000)
struct Quat4_SquadFullPath final 
{
public:
	class UQuat4*                                 __verse_0xA3D14F4D_q1;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0xC7DFAF05_t1;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x4D7EFA5F_q2;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 __verse_0x29701A17_t2;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x05A40B7F_alpha;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A57[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SquadFullPath) == 0x000008, "Wrong alinment on Quat4_SquadFullPath");
static_assert(sizeof(Quat4_SquadFullPath) == 0x000030, "Wrong size on Quat4_SquadFullPath");
static_assert(offsetof(Quat4_SquadFullPath, __verse_0xA3D14F4D_q1) == 0x000000, "Member 'Quat4_SquadFullPath::__verse_0xA3D14F4D_q1' has a wrong offset!");
static_assert(offsetof(Quat4_SquadFullPath, __verse_0xC7DFAF05_t1) == 0x000008, "Member 'Quat4_SquadFullPath::__verse_0xC7DFAF05_t1' has a wrong offset!");
static_assert(offsetof(Quat4_SquadFullPath, __verse_0x4D7EFA5F_q2) == 0x000010, "Member 'Quat4_SquadFullPath::__verse_0x4D7EFA5F_q2' has a wrong offset!");
static_assert(offsetof(Quat4_SquadFullPath, __verse_0x29701A17_t2) == 0x000018, "Member 'Quat4_SquadFullPath::__verse_0x29701A17_t2' has a wrong offset!");
static_assert(offsetof(Quat4_SquadFullPath, __verse_0x05A40B7F_alpha) == 0x000020, "Member 'Quat4_SquadFullPath::__verse_0x05A40B7F_alpha' has a wrong offset!");
static_assert(offsetof(Quat4_SquadFullPath, RetVal) == 0x000028, "Member 'Quat4_SquadFullPath::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Add
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Add final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Add) == 0x000008, "Wrong alinment on Quat4_Add");
static_assert(sizeof(Quat4_Add) == 0x000010, "Wrong size on Quat4_Add");
static_assert(offsetof(Quat4_Add, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Add::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Add, RetVal) == 0x000008, "Member 'Quat4_Add::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.angularRadianDistance
// 0x0010 (0x0010 - 0x0000)
struct Quat4_AngularRadianDistance final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_AngularRadianDistance) == 0x000008, "Wrong alinment on Quat4_AngularRadianDistance");
static_assert(sizeof(Quat4_AngularRadianDistance) == 0x000010, "Wrong size on Quat4_AngularRadianDistance");
static_assert(offsetof(Quat4_AngularRadianDistance, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_AngularRadianDistance::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_AngularRadianDistance, RetVal) == 0x000008, "Member 'Quat4_AngularRadianDistance::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.divideByScalar
// 0x0018 (0x0018 - 0x0000)
struct Quat4_DivideByScalar final 
{
public:
	float                                         __verse_0x6ED0CE58_s;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A58[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x0FA0AFBE_reciprocal_0;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_DivideByScalar) == 0x000008, "Wrong alinment on Quat4_DivideByScalar");
static_assert(sizeof(Quat4_DivideByScalar) == 0x000018, "Wrong size on Quat4_DivideByScalar");
static_assert(offsetof(Quat4_DivideByScalar, __verse_0x6ED0CE58_s) == 0x000000, "Member 'Quat4_DivideByScalar::__verse_0x6ED0CE58_s' has a wrong offset!");
static_assert(offsetof(Quat4_DivideByScalar, RetVal) == 0x000008, "Member 'Quat4_DivideByScalar::RetVal' has a wrong offset!");
static_assert(offsetof(Quat4_DivideByScalar, __verse_0x0FA0AFBE_reciprocal_0) == 0x000010, "Member 'Quat4_DivideByScalar::__verse_0x0FA0AFBE_reciprocal_0' has a wrong offset!");

// Function Math_Quat4.Quat4.DoT
// 0x0010 (0x0010 - 0x0000)
struct Quat4_DoT final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_DoT) == 0x000008, "Wrong alinment on Quat4_DoT");
static_assert(sizeof(Quat4_DoT) == 0x000010, "Wrong size on Quat4_DoT");
static_assert(offsetof(Quat4_DoT, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_DoT::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_DoT, RetVal) == 0x000008, "Member 'Quat4_DoT::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.enforceShortestArcWith
// 0x0008 (0x0008 - 0x0000)
struct Quat4_EnforceShortestArcWith final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_EnforceShortestArcWith) == 0x000008, "Wrong alinment on Quat4_EnforceShortestArcWith");
static_assert(sizeof(Quat4_EnforceShortestArcWith) == 0x000008, "Wrong size on Quat4_EnforceShortestArcWith");
static_assert(offsetof(Quat4_EnforceShortestArcWith, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_EnforceShortestArcWith::__verse_0xE518C7F2_q' has a wrong offset!");

// Function Math_Quat4.Quat4.Equals
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Equals final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_Equals) == 0x000008, "Wrong alinment on Quat4_Equals");
static_assert(sizeof(Quat4_Equals) == 0x000010, "Wrong size on Quat4_Equals");
static_assert(offsetof(Quat4_Equals, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Equals::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Equals, __verse_0xB4A6AEEC_tolerance) == 0x000008, "Member 'Quat4_Equals::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.Exp
// 0x0008 (0x0008 - 0x0000)
struct Quat4_Exp final 
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Exp) == 0x000008, "Wrong alinment on Quat4_Exp");
static_assert(sizeof(Quat4_Exp) == 0x000008, "Wrong size on Quat4_Exp");
static_assert(offsetof(Quat4_Exp, RetVal) == 0x000000, "Member 'Quat4_Exp::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAngle
// 0x0004 (0x0004 - 0x0000)
struct Quat4_GetAngle final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetAngle) == 0x000004, "Wrong alinment on Quat4_GetAngle");
static_assert(sizeof(Quat4_GetAngle) == 0x000004, "Wrong size on Quat4_GetAngle");
static_assert(offsetof(Quat4_GetAngle, RetVal) == 0x000000, "Member 'Quat4_GetAngle::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisX
// 0x0008 (0x0008 - 0x0000)
struct Quat4_GetAxisX final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetAxisX) == 0x000008, "Wrong alinment on Quat4_GetAxisX");
static_assert(sizeof(Quat4_GetAxisX) == 0x000008, "Wrong size on Quat4_GetAxisX");
static_assert(offsetof(Quat4_GetAxisX, RetVal) == 0x000000, "Member 'Quat4_GetAxisX::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisY
// 0x0008 (0x0008 - 0x0000)
struct Quat4_GetAxisY final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetAxisY) == 0x000008, "Wrong alinment on Quat4_GetAxisY");
static_assert(sizeof(Quat4_GetAxisY) == 0x000008, "Wrong size on Quat4_GetAxisY");
static_assert(offsetof(Quat4_GetAxisY, RetVal) == 0x000000, "Member 'Quat4_GetAxisY::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getAxisZ
// 0x0008 (0x0008 - 0x0000)
struct Quat4_GetAxisZ final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetAxisZ) == 0x000008, "Wrong alinment on Quat4_GetAxisZ");
static_assert(sizeof(Quat4_GetAxisZ) == 0x000008, "Wrong size on Quat4_GetAxisZ");
static_assert(offsetof(Quat4_GetAxisZ, RetVal) == 0x000000, "Member 'Quat4_GetAxisZ::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getNormalized
// 0x0010 (0x0010 - 0x0000)
struct Quat4_GetNormalized final 
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A59[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetNormalized) == 0x000008, "Wrong alinment on Quat4_GetNormalized");
static_assert(sizeof(Quat4_GetNormalized) == 0x000010, "Wrong size on Quat4_GetNormalized");
static_assert(offsetof(Quat4_GetNormalized, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_GetNormalized::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");
static_assert(offsetof(Quat4_GetNormalized, RetVal) == 0x000008, "Member 'Quat4_GetNormalized::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.GetRotationAxis
// 0x0008 (0x0008 - 0x0000)
struct Quat4_GetRotationAxis final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetRotationAxis) == 0x000008, "Wrong alinment on Quat4_GetRotationAxis");
static_assert(sizeof(Quat4_GetRotationAxis) == 0x000008, "Wrong size on Quat4_GetRotationAxis");
static_assert(offsetof(Quat4_GetRotationAxis, RetVal) == 0x000000, "Member 'Quat4_GetRotationAxis::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getSwing
// 0x0010 (0x0010 - 0x0000)
struct Quat4_GetSwing final 
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetSwing) == 0x000008, "Wrong alinment on Quat4_GetSwing");
static_assert(sizeof(Quat4_GetSwing) == 0x000010, "Wrong size on Quat4_GetSwing");
static_assert(offsetof(Quat4_GetSwing, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_GetSwing::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_GetSwing, RetVal) == 0x000008, "Member 'Quat4_GetSwing::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getTwist
// 0x0010 (0x0010 - 0x0000)
struct Quat4_GetTwist final 
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetTwist) == 0x000008, "Wrong alinment on Quat4_GetTwist");
static_assert(sizeof(Quat4_GetTwist) == 0x000010, "Wrong size on Quat4_GetTwist");
static_assert(offsetof(Quat4_GetTwist, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_GetTwist::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_GetTwist, RetVal) == 0x000008, "Member 'Quat4_GetTwist::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.getTwistRadianAngle
// 0x0010 (0x0010 - 0x0000)
struct Quat4_GetTwistRadianAngle final 
{
public:
	class UVector3*                               __verse_0x32625C4E_twistAxis;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_GetTwistRadianAngle) == 0x000008, "Wrong alinment on Quat4_GetTwistRadianAngle");
static_assert(sizeof(Quat4_GetTwistRadianAngle) == 0x000010, "Wrong size on Quat4_GetTwistRadianAngle");
static_assert(offsetof(Quat4_GetTwistRadianAngle, __verse_0x32625C4E_twistAxis) == 0x000000, "Member 'Quat4_GetTwistRadianAngle::__verse_0x32625C4E_twistAxis' has a wrong offset!");
static_assert(offsetof(Quat4_GetTwistRadianAngle, RetVal) == 0x000008, "Member 'Quat4_GetTwistRadianAngle::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.inverse
// 0x0008 (0x0008 - 0x0000)
struct Quat4_Inverse final 
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Inverse) == 0x000008, "Wrong alinment on Quat4_Inverse");
static_assert(sizeof(Quat4_Inverse) == 0x000008, "Wrong size on Quat4_Inverse");
static_assert(offsetof(Quat4_Inverse, RetVal) == 0x000000, "Member 'Quat4_Inverse::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.isIdentity
// 0x0008 (0x0008 - 0x0000)
struct Quat4_IsIdentity final 
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_IsIdentity) == 0x000004, "Wrong alinment on Quat4_IsIdentity");
static_assert(sizeof(Quat4_IsIdentity) == 0x000008, "Wrong size on Quat4_IsIdentity");
static_assert(offsetof(Quat4_IsIdentity, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_IsIdentity::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.isNormalized
// 0x0001 (0x0001 - 0x0000)
struct Quat4_IsNormalized final 
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_IsNormalized) == 0x000001, "Wrong alinment on Quat4_IsNormalized");
static_assert(sizeof(Quat4_IsNormalized) == 0x000001, "Wrong size on Quat4_IsNormalized");

// Function Math_Quat4.Quat4.IsValid
// 0x0001 (0x0001 - 0x0000)
struct Quat4_IsValid final 
{
public:
	uint8                                         RetVal : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor))
};
static_assert(alignof(Quat4_IsValid) == 0x000001, "Wrong alinment on Quat4_IsValid");
static_assert(sizeof(Quat4_IsValid) == 0x000001, "Wrong size on Quat4_IsValid");

// Function Math_Quat4.Quat4.Log
// 0x0008 (0x0008 - 0x0000)
struct Quat4_Log final 
{
public:
	class UQuat4*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Log) == 0x000008, "Wrong alinment on Quat4_Log");
static_assert(sizeof(Quat4_Log) == 0x000008, "Wrong size on Quat4_Log");
static_assert(offsetof(Quat4_Log, RetVal) == 0x000000, "Member 'Quat4_Log::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.multiplyByScalar
// 0x0010 (0x0010 - 0x0000)
struct Quat4_MultiplyByScalar final 
{
public:
	float                                         __verse_0x6ED0CE58_s;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A5A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_MultiplyByScalar) == 0x000008, "Wrong alinment on Quat4_MultiplyByScalar");
static_assert(sizeof(Quat4_MultiplyByScalar) == 0x000010, "Wrong size on Quat4_MultiplyByScalar");
static_assert(offsetof(Quat4_MultiplyByScalar, __verse_0x6ED0CE58_s) == 0x000000, "Member 'Quat4_MultiplyByScalar::__verse_0x6ED0CE58_s' has a wrong offset!");
static_assert(offsetof(Quat4_MultiplyByScalar, RetVal) == 0x000008, "Member 'Quat4_MultiplyByScalar::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.normalize
// 0x0004 (0x0004 - 0x0000)
struct Quat4_Normalize final 
{
public:
	float                                         __verse_0xB4A6AEEC_tolerance;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Normalize) == 0x000004, "Wrong alinment on Quat4_Normalize");
static_assert(sizeof(Quat4_Normalize) == 0x000004, "Wrong size on Quat4_Normalize");
static_assert(offsetof(Quat4_Normalize, __verse_0xB4A6AEEC_tolerance) == 0x000000, "Member 'Quat4_Normalize::__verse_0xB4A6AEEC_tolerance' has a wrong offset!");

// Function Math_Quat4.Quat4.RotateVector
// 0x0010 (0x0010 - 0x0000)
struct Quat4_RotateVector final 
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_RotateVector) == 0x000008, "Wrong alinment on Quat4_RotateVector");
static_assert(sizeof(Quat4_RotateVector) == 0x000010, "Wrong size on Quat4_RotateVector");
static_assert(offsetof(Quat4_RotateVector, __verse_0x5C20106F_v) == 0x000000, "Member 'Quat4_RotateVector::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Quat4_RotateVector, RetVal) == 0x000008, "Member 'Quat4_RotateVector::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Size
// 0x0004 (0x0004 - 0x0000)
struct Quat4_Size final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Size) == 0x000004, "Wrong alinment on Quat4_Size");
static_assert(sizeof(Quat4_Size) == 0x000004, "Wrong size on Quat4_Size");
static_assert(offsetof(Quat4_Size, RetVal) == 0x000000, "Member 'Quat4_Size::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.sizeSquared
// 0x0004 (0x0004 - 0x0000)
struct Quat4_SizeSquared final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_SizeSquared) == 0x000004, "Wrong alinment on Quat4_SizeSquared");
static_assert(sizeof(Quat4_SizeSquared) == 0x000004, "Wrong size on Quat4_SizeSquared");
static_assert(offsetof(Quat4_SizeSquared, RetVal) == 0x000000, "Member 'Quat4_SizeSquared::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.Subtract
// 0x0010 (0x0010 - 0x0000)
struct Quat4_Subtract final 
{
public:
	class UQuat4*                                 __verse_0xE518C7F2_q;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuat4*                                 RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_Subtract) == 0x000008, "Wrong alinment on Quat4_Subtract");
static_assert(sizeof(Quat4_Subtract) == 0x000010, "Wrong size on Quat4_Subtract");
static_assert(offsetof(Quat4_Subtract, __verse_0xE518C7F2_q) == 0x000000, "Member 'Quat4_Subtract::__verse_0xE518C7F2_q' has a wrong offset!");
static_assert(offsetof(Quat4_Subtract, RetVal) == 0x000008, "Member 'Quat4_Subtract::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.toEulerRotation3
// 0x0008 (0x0008 - 0x0000)
struct Quat4_ToEulerRotation3 final 
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_ToEulerRotation3) == 0x000008, "Wrong alinment on Quat4_ToEulerRotation3");
static_assert(sizeof(Quat4_ToEulerRotation3) == 0x000008, "Wrong size on Quat4_ToEulerRotation3");
static_assert(offsetof(Quat4_ToEulerRotation3, RetVal) == 0x000000, "Member 'Quat4_ToEulerRotation3::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.ToRotation3
// 0x0008 (0x0008 - 0x0000)
struct Quat4_ToRotation3 final 
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_ToRotation3) == 0x000008, "Wrong alinment on Quat4_ToRotation3");
static_assert(sizeof(Quat4_ToRotation3) == 0x000008, "Wrong size on Quat4_ToRotation3");
static_assert(offsetof(Quat4_ToRotation3, RetVal) == 0x000000, "Member 'Quat4_ToRotation3::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.ToString
// 0x0010 (0x0010 - 0x0000)
struct Quat4_ToString final 
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_ToString) == 0x000008, "Wrong alinment on Quat4_ToString");
static_assert(sizeof(Quat4_ToString) == 0x000010, "Wrong size on Quat4_ToString");
static_assert(offsetof(Quat4_ToString, RetVal) == 0x000000, "Member 'Quat4_ToString::RetVal' has a wrong offset!");

// Function Math_Quat4.Quat4.unrotateVector
// 0x0010 (0x0010 - 0x0000)
struct Quat4_UnrotateVector final 
{
public:
	class UVector3*                               __verse_0x5C20106F_v;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVector3*                               RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Quat4_UnrotateVector) == 0x000008, "Wrong alinment on Quat4_UnrotateVector");
static_assert(sizeof(Quat4_UnrotateVector) == 0x000010, "Wrong size on Quat4_UnrotateVector");
static_assert(offsetof(Quat4_UnrotateVector, __verse_0x5C20106F_v) == 0x000000, "Member 'Quat4_UnrotateVector::__verse_0x5C20106F_v' has a wrong offset!");
static_assert(offsetof(Quat4_UnrotateVector, RetVal) == 0x000008, "Member 'Quat4_UnrotateVector::RetVal' has a wrong offset!");

}

