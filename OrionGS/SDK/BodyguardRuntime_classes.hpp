#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyguardRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "BodyguardRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class BodyguardRuntime.BodyguardPlayerComponent
// 0x0090 (0x0140 - 0x00B0)
class UBodyguardPlayerComponent final  : public UFortControllerComponent
{
public:
	uint8                                         Pad_462E[0x70];                                    // 0x00B0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsReviving;                                       // 0x0120(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyguardPlayerRole                          BodyguardRole;                                     // 0x0121(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_462F[0xE];                                     // 0x0122(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaMutator_Bodyguard*           ManagingMutator;                                   // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableSkinSwapping;                               // 0x0138(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4630[0x7];                                     // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientOnBodyguardIsTooFarFromVIP();
	void ClientOnLocalSquadVIPTookDamage();
	void ClientOnNotifyVIPTeammateIsDowned();
	void ClientOnTeamEliminated();
	void ClientOnVIPHasBeenReassigned(class AFortPlayerStateAthena* NewVIPlayerState);
	void ClientPlayerEliminatedVIP();
	void OnEmoteMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnFortPCPawnChangedEvent(class AFortPawn* NewPawn);
	void OnPawnStartedEmote(class UFortItemDefinition* MontageItemDef, class AFortPawn* PawnEmoting);
	void OnPlacementSet(class AFortPlayerStateAthena* Sender, int32 NewPlace);
	void OnPlayerRevived(class AController* EventInstigator);
	void OnRep_BodyguardRole();
	void SetIsBodyguardTooFarFromVIP(bool bValue);

	bool IsSkinSwappingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BodyguardPlayerComponent">();
	}
	static class UBodyguardPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyguardPlayerComponent>();
	}
};
static_assert(alignof(UBodyguardPlayerComponent) == 0x000008, "Wrong alinment on UBodyguardPlayerComponent");
static_assert(sizeof(UBodyguardPlayerComponent) == 0x000140, "Wrong size on UBodyguardPlayerComponent");
static_assert(offsetof(UBodyguardPlayerComponent, bIsReviving) == 0x000120, "Member 'UBodyguardPlayerComponent::bIsReviving' has a wrong offset!");
static_assert(offsetof(UBodyguardPlayerComponent, BodyguardRole) == 0x000121, "Member 'UBodyguardPlayerComponent::BodyguardRole' has a wrong offset!");
static_assert(offsetof(UBodyguardPlayerComponent, ManagingMutator) == 0x000130, "Member 'UBodyguardPlayerComponent::ManagingMutator' has a wrong offset!");
static_assert(offsetof(UBodyguardPlayerComponent, bEnableSkinSwapping) == 0x000138, "Member 'UBodyguardPlayerComponent::bEnableSkinSwapping' has a wrong offset!");

// Class BodyguardRuntime.BodyguardSoundActor
// 0x0028 (0x0248 - 0x0220)
class ABodyguardSoundActor final  : public AActor
{
public:
	uint8                                         Pad_4633[0x8];                                     // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0228(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void HandleVIPNotAllowItemPickup_BP(bool bIsLocalPlayerTheVIP);
	void UpdateTeamVIPHealth_BP(float CurrentHealth, float MaxHealth, bool bIsLocalPlayerTheVIP);
	void UpdateTeamVIPIsBeingRevived_BP(bool bIsBeingRevived, bool bIsTeamVIP_DBNO, bool bIsReviving, bool bIsLocalPlayerTheVIP);
	void UpdateTeamVIPIsDBNO_BP(bool bIsTeamVIP_DBNO, bool bIsLocalPlayerTheVIP, bool bIsDead);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BodyguardSoundActor">();
	}
	static class ABodyguardSoundActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABodyguardSoundActor>();
	}
};
static_assert(alignof(ABodyguardSoundActor) == 0x000008, "Wrong alinment on ABodyguardSoundActor");
static_assert(sizeof(ABodyguardSoundActor) == 0x000248, "Wrong size on ABodyguardSoundActor");
static_assert(offsetof(ABodyguardSoundActor, GameplayTags) == 0x000228, "Member 'ABodyguardSoundActor::GameplayTags' has a wrong offset!");

// Class BodyguardRuntime.FortAthenaMutator_Bodyguard
// 0x04F8 (0x08C8 - 0x03D0)
class AFortAthenaMutator_Bodyguard : public AFortAthenaMutator_GameModeBase
{
public:
	uint8                                         Pad_4635[0x20];                                    // 0x03D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VIPKillAccoladeTag;                                // 0x03F0(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VIPMultiKillAccoladeTag;                           // 0x03F8(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BodyguardReviveAccoladeTag;                        // 0x0400(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VIPReviveAccoladeTag;                              // 0x0408(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VIPSurviveAccoladeTag;                             // 0x0410(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         VIPMultikillAccoladeThreshold;                     // 0x0418(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class ABodyguardSoundActor*                   BodyguardSoundPlayer;                              // 0x0440(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  VIPLostDeathReasonTagContainter;                   // 0x0448(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FItemAndCount>                  VIPItemList;                                       // 0x0468(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FItemAndCount>                  BodyguardItemList;                                 // 0x0478(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UFortItemDefinition*, int32>       ItemToDesiredQuickBarSlotMap;                      // 0x0488(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  VIPProhibitedItemTags;                             // 0x04D8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BodyguardProhibitedItemTags;                       // 0x04F8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RespawnZLocationOffset;                            // 0x0518(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   VIPBlockedItemText;                                // 0x0540(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            VIPMapIconBrush;                                   // 0x0558(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              MinimapPositionShiftPercent;                       // 0x05E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              MiniMapIconScale;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortAthenaCompassIcon                 VIPCompassIconBackDrop;                            // 0x05F0(0x00A0)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FFortAthenaCompassIcon                 VIPCompassIcon;                                    // 0x0690(0x00A0)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             VIPBlockInteractClasses;                           // 0x0730(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         VIPEliminatedEndGameScreenDelay;                   // 0x0740(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EAthenaGamePhase                              StartingVIPPlayerStateChangeTrackingGamePhase;     // 0x0768(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4636[0xF];                                     // 0x0769(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         UpdateIntervalMonitorVIPPlayerStateChanges;        // 0x0778(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HideDBNOVIPPlayerIndicators;                       // 0x07A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBodyGuardPartOverrideData>     PartOverrideCustomizations;                        // 0x07C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCustomCharacterPart*>           PartsToSwapInToRemoveExtras;                       // 0x07D8(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShouldSwapSkins;                                   // 0x07E8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  SkinMetaTagsToSkip;                                // 0x0810(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  SpecialTags;                                       // 0x0830(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ExtraSpecialTags;                                  // 0x0850(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4637[0x8];                                     // 0x0870(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBodyguardVIPPlayerData>        VIPPlayerDataList;                                 // 0x0878(0x0010)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FBodyguardVIPDeathState>        VIPDeathStateList;                                 // 0x0888(0x0010)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBodyguardVIPPlayerData                PreviousTeamVIPPlayerData;                         // 0x0898(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AFortGameplayMutator>       MutatorClassToWaitFor;                             // 0x08B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortGameplayMutator*                   CustomCharacterPartsMutator;                       // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RevealPlayerRole;                                  // 0x08C0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4638[0x7];                                     // 0x08C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssignPlayerRolesForSquads();
	void EndGameShutOffAnyDBNOSounds();
	void NotifySquadmatesOnVIPTookDamage(uint8 VIPTeam);
	void NotifyVIPOnTeammateDBNO(uint8 VIPTeam);
	void OnRep_RevealPlayerRole();
	void OnRep_VIPDeathStateList();
	void OnRep_VIPPlayerDataList();
	void ShutOffAnyDBNOSounds(bool bIsDead);
	void UpdateSquadmatesIsReviving(uint8 VIPTeam);

	bool GetTeamVIPPlayerData(uint8 TeamNum, struct FBodyguardVIPPlayerData* OutVIPPlayerData) const;
	bool IsReviving(class AFortPlayerStateAthena* PlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortAthenaMutator_Bodyguard">();
	}
	static class AFortAthenaMutator_Bodyguard* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_Bodyguard>();
	}
};
static_assert(alignof(AFortAthenaMutator_Bodyguard) == 0x000008, "Wrong alinment on AFortAthenaMutator_Bodyguard");
static_assert(sizeof(AFortAthenaMutator_Bodyguard) == 0x0008C8, "Wrong size on AFortAthenaMutator_Bodyguard");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPKillAccoladeTag) == 0x0003F0, "Member 'AFortAthenaMutator_Bodyguard::VIPKillAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPMultiKillAccoladeTag) == 0x0003F8, "Member 'AFortAthenaMutator_Bodyguard::VIPMultiKillAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, BodyguardReviveAccoladeTag) == 0x000400, "Member 'AFortAthenaMutator_Bodyguard::BodyguardReviveAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPReviveAccoladeTag) == 0x000408, "Member 'AFortAthenaMutator_Bodyguard::VIPReviveAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPSurviveAccoladeTag) == 0x000410, "Member 'AFortAthenaMutator_Bodyguard::VIPSurviveAccoladeTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPMultikillAccoladeThreshold) == 0x000418, "Member 'AFortAthenaMutator_Bodyguard::VIPMultikillAccoladeThreshold' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, BodyguardSoundPlayer) == 0x000440, "Member 'AFortAthenaMutator_Bodyguard::BodyguardSoundPlayer' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPLostDeathReasonTagContainter) == 0x000448, "Member 'AFortAthenaMutator_Bodyguard::VIPLostDeathReasonTagContainter' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPItemList) == 0x000468, "Member 'AFortAthenaMutator_Bodyguard::VIPItemList' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, BodyguardItemList) == 0x000478, "Member 'AFortAthenaMutator_Bodyguard::BodyguardItemList' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, ItemToDesiredQuickBarSlotMap) == 0x000488, "Member 'AFortAthenaMutator_Bodyguard::ItemToDesiredQuickBarSlotMap' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPProhibitedItemTags) == 0x0004D8, "Member 'AFortAthenaMutator_Bodyguard::VIPProhibitedItemTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, BodyguardProhibitedItemTags) == 0x0004F8, "Member 'AFortAthenaMutator_Bodyguard::BodyguardProhibitedItemTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, RespawnZLocationOffset) == 0x000518, "Member 'AFortAthenaMutator_Bodyguard::RespawnZLocationOffset' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPBlockedItemText) == 0x000540, "Member 'AFortAthenaMutator_Bodyguard::VIPBlockedItemText' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPMapIconBrush) == 0x000558, "Member 'AFortAthenaMutator_Bodyguard::VIPMapIconBrush' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, MinimapPositionShiftPercent) == 0x0005E0, "Member 'AFortAthenaMutator_Bodyguard::MinimapPositionShiftPercent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, MiniMapIconScale) == 0x0005E8, "Member 'AFortAthenaMutator_Bodyguard::MiniMapIconScale' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPCompassIconBackDrop) == 0x0005F0, "Member 'AFortAthenaMutator_Bodyguard::VIPCompassIconBackDrop' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPCompassIcon) == 0x000690, "Member 'AFortAthenaMutator_Bodyguard::VIPCompassIcon' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPBlockInteractClasses) == 0x000730, "Member 'AFortAthenaMutator_Bodyguard::VIPBlockInteractClasses' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPEliminatedEndGameScreenDelay) == 0x000740, "Member 'AFortAthenaMutator_Bodyguard::VIPEliminatedEndGameScreenDelay' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, StartingVIPPlayerStateChangeTrackingGamePhase) == 0x000768, "Member 'AFortAthenaMutator_Bodyguard::StartingVIPPlayerStateChangeTrackingGamePhase' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, UpdateIntervalMonitorVIPPlayerStateChanges) == 0x000778, "Member 'AFortAthenaMutator_Bodyguard::UpdateIntervalMonitorVIPPlayerStateChanges' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, HideDBNOVIPPlayerIndicators) == 0x0007A0, "Member 'AFortAthenaMutator_Bodyguard::HideDBNOVIPPlayerIndicators' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, PartOverrideCustomizations) == 0x0007C8, "Member 'AFortAthenaMutator_Bodyguard::PartOverrideCustomizations' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, PartsToSwapInToRemoveExtras) == 0x0007D8, "Member 'AFortAthenaMutator_Bodyguard::PartsToSwapInToRemoveExtras' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, ShouldSwapSkins) == 0x0007E8, "Member 'AFortAthenaMutator_Bodyguard::ShouldSwapSkins' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, SkinMetaTagsToSkip) == 0x000810, "Member 'AFortAthenaMutator_Bodyguard::SkinMetaTagsToSkip' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, SpecialTags) == 0x000830, "Member 'AFortAthenaMutator_Bodyguard::SpecialTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, ExtraSpecialTags) == 0x000850, "Member 'AFortAthenaMutator_Bodyguard::ExtraSpecialTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPPlayerDataList) == 0x000878, "Member 'AFortAthenaMutator_Bodyguard::VIPPlayerDataList' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, VIPDeathStateList) == 0x000888, "Member 'AFortAthenaMutator_Bodyguard::VIPDeathStateList' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, PreviousTeamVIPPlayerData) == 0x000898, "Member 'AFortAthenaMutator_Bodyguard::PreviousTeamVIPPlayerData' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, MutatorClassToWaitFor) == 0x0008B0, "Member 'AFortAthenaMutator_Bodyguard::MutatorClassToWaitFor' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, CustomCharacterPartsMutator) == 0x0008B8, "Member 'AFortAthenaMutator_Bodyguard::CustomCharacterPartsMutator' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Bodyguard, RevealPlayerRole) == 0x0008C0, "Member 'AFortAthenaMutator_Bodyguard::RevealPlayerRole' has a wrong offset!");

// Class BodyguardRuntime.FortAthenaMutator_BodyguardRumble
// 0x0000 (0x08C8 - 0x08C8)
class AFortAthenaMutator_BodyguardRumble final  : public AFortAthenaMutator_Bodyguard
{
public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortAthenaMutator_BodyguardRumble">();
	}
	static class AFortAthenaMutator_BodyguardRumble* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_BodyguardRumble>();
	}
};
static_assert(alignof(AFortAthenaMutator_BodyguardRumble) == 0x000008, "Wrong alinment on AFortAthenaMutator_BodyguardRumble");
static_assert(sizeof(AFortAthenaMutator_BodyguardRumble) == 0x0008C8, "Wrong size on AFortAthenaMutator_BodyguardRumble");

}

