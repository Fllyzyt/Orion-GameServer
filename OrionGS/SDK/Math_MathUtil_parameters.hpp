#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_MathUtil

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_MathUtil.MathUtil.abs
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Abs final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Abs) == 0x000004, "Wrong alinment on MathUtil_Abs");
static_assert(sizeof(MathUtil_Abs) == 0x000008, "Wrong size on MathUtil_Abs");
static_assert(offsetof(MathUtil_Abs, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Abs::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Abs, RetVal) == 0x000004, "Member 'MathUtil_Abs::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.ceil
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Ceil final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Ceil) == 0x000004, "Wrong alinment on MathUtil_Ceil");
static_assert(sizeof(MathUtil_Ceil) == 0x000008, "Wrong size on MathUtil_Ceil");
static_assert(offsetof(MathUtil_Ceil, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Ceil::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Ceil, RetVal) == 0x000004, "Member 'MathUtil_Ceil::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.clampFloat
// 0x0010 (0x0010 - 0x0000)
struct MathUtil_ClampFloat final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x299075D9_min;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0xDF83E27F_max;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_ClampFloat) == 0x000004, "Wrong alinment on MathUtil_ClampFloat");
static_assert(sizeof(MathUtil_ClampFloat) == 0x000010, "Wrong size on MathUtil_ClampFloat");
static_assert(offsetof(MathUtil_ClampFloat, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_ClampFloat::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampFloat, __verse_0x299075D9_min) == 0x000004, "Member 'MathUtil_ClampFloat::__verse_0x299075D9_min' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampFloat, __verse_0xDF83E27F_max) == 0x000008, "Member 'MathUtil_ClampFloat::__verse_0xDF83E27F_max' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampFloat, RetVal) == 0x00000C, "Member 'MathUtil_ClampFloat::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.clampInt
// 0x0010 (0x0010 - 0x0000)
struct MathUtil_ClampInt final 
{
public:
	int32                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         __verse_0x299075D9_min;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         __verse_0xDF83E27F_max;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_ClampInt) == 0x000004, "Wrong alinment on MathUtil_ClampInt");
static_assert(sizeof(MathUtil_ClampInt) == 0x000010, "Wrong size on MathUtil_ClampInt");
static_assert(offsetof(MathUtil_ClampInt, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_ClampInt::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampInt, __verse_0x299075D9_min) == 0x000004, "Member 'MathUtil_ClampInt::__verse_0x299075D9_min' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampInt, __verse_0xDF83E27F_max) == 0x000008, "Member 'MathUtil_ClampInt::__verse_0xDF83E27F_max' has a wrong offset!");
static_assert(offsetof(MathUtil_ClampInt, RetVal) == 0x00000C, "Member 'MathUtil_ClampInt::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.convertToFloat
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_ConvertToFloat final 
{
public:
	int32                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_ConvertToFloat) == 0x000004, "Wrong alinment on MathUtil_ConvertToFloat");
static_assert(sizeof(MathUtil_ConvertToFloat) == 0x000008, "Wrong size on MathUtil_ConvertToFloat");
static_assert(offsetof(MathUtil_ConvertToFloat, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_ConvertToFloat::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_ConvertToFloat, RetVal) == 0x000004, "Member 'MathUtil_ConvertToFloat::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Cos
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Cos final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Cos) == 0x000004, "Wrong alinment on MathUtil_Cos");
static_assert(sizeof(MathUtil_Cos) == 0x000008, "Wrong size on MathUtil_Cos");
static_assert(offsetof(MathUtil_Cos, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Cos::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Cos, RetVal) == 0x000004, "Member 'MathUtil_Cos::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Floor
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Floor final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Floor) == 0x000004, "Wrong alinment on MathUtil_Floor");
static_assert(sizeof(MathUtil_Floor) == 0x000008, "Wrong size on MathUtil_Floor");
static_assert(offsetof(MathUtil_Floor, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Floor::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Floor, RetVal) == 0x000004, "Member 'MathUtil_Floor::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Round
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Round final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Round) == 0x000004, "Wrong alinment on MathUtil_Round");
static_assert(sizeof(MathUtil_Round) == 0x000008, "Wrong size on MathUtil_Round");
static_assert(offsetof(MathUtil_Round, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Round::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Round, RetVal) == 0x000004, "Member 'MathUtil_Round::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Sin
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Sin final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Sin) == 0x000004, "Wrong alinment on MathUtil_Sin");
static_assert(sizeof(MathUtil_Sin) == 0x000008, "Wrong size on MathUtil_Sin");
static_assert(offsetof(MathUtil_Sin, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Sin::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Sin, RetVal) == 0x000004, "Member 'MathUtil_Sin::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Sqrt
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Sqrt final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Sqrt) == 0x000004, "Wrong alinment on MathUtil_Sqrt");
static_assert(sizeof(MathUtil_Sqrt) == 0x000008, "Wrong size on MathUtil_Sqrt");
static_assert(offsetof(MathUtil_Sqrt, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Sqrt::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Sqrt, RetVal) == 0x000004, "Member 'MathUtil_Sqrt::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.Tan
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Tan final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Tan) == 0x000004, "Wrong alinment on MathUtil_Tan");
static_assert(sizeof(MathUtil_Tan) == 0x000008, "Wrong size on MathUtil_Tan");
static_assert(offsetof(MathUtil_Tan, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Tan::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Tan, RetVal) == 0x000004, "Member 'MathUtil_Tan::RetVal' has a wrong offset!");

// Function Math_MathUtil.MathUtil.trunc
// 0x0008 (0x0008 - 0x0000)
struct MathUtil_Trunc final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetVal;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MathUtil_Trunc) == 0x000004, "Wrong alinment on MathUtil_Trunc");
static_assert(sizeof(MathUtil_Trunc) == 0x000008, "Wrong size on MathUtil_Trunc");
static_assert(offsetof(MathUtil_Trunc, __verse_0xE50A13DD_val) == 0x000000, "Member 'MathUtil_Trunc::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(MathUtil_Trunc, RetVal) == 0x000004, "Member 'MathUtil_Trunc::RetVal' has a wrong offset!");

}

