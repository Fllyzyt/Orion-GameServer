#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_Enabled_Component

#include "Basic.hpp"

#include "Creative_EnabledState_structs.hpp"
#include "Engine_structs.hpp"
#include "Creative_DeviceComponent_Parent_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "EEnabledState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_Enabled_Component.Creative_Enabled_Component_C
// 0x00B0 (0x0168 - 0x00B8)
class UCreative_Enabled_Component_C final  : public UCreative_DeviceComponent_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Creative_Enabled_Component_C;       // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FCreative_EnabledState                 EnabledState;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_Enabled_State_Changed;                          // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnabledDuringPlayMode;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnabledDuringEditMode;                             // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7075[0x6];                                     // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_Reset_Complete;                                 // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           Reset_Timer;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSet<EFortMinigameState>                      IgnorePhases;                                      // 0x00F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ResetDelay;                                        // 0x0148(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Enabled_Index;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_be_Enabled_During_Edit_Mode;                   // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7076[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMinigameLogicComponent*            Logic_Component;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Switch_On_Phase_Change;                            // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Switch_On_Play_Change;                             // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBeEnabledDuringPreview;                         // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Check_Phase_Change_During_Play_Switch;             // 0x0163(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void On_Enabled_State_Changed__DelegateSignature(bool Enabled);
	void On_Reset_Complete__DelegateSignature();
	void ExecuteUbergraph_Creative_Enabled_Component(int32 EntryPoint, class AActor* CallFunc_GetOwner_ReturnValue, TDelegate<void(class AFortMinigame* Minigame)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, TDelegate<void(class AFortMinigame* Minigame, bool bIsInPlayMode)> K2Node_CreateDelegate_OutputDelegate_1, class UFortMinigameLogicComponent* K2Node_CustomEvent_Logic_Component, int32 K2Node_CustomEvent_Enabled_Index, class AFortMinigame* K2Node_CustomEvent_Minigame_2, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, class AFortMinigame* K2Node_CustomEvent_Minigame_1, EFortMinigameState K2Node_CustomEvent_MinigameState, class AFortMinigame* K2Node_CustomEvent_Minigame, bool K2Node_CustomEvent_bIsInPlayMode, bool CallFunc_IsValid_ReturnValue_3, TDelegate<void(class AFortMinigame* Minigame, EFortMinigameState MinigameState)> K2Node_CreateDelegate_OutputDelegate_2, bool CallFunc_IsValid_ReturnValue_4);
	void Minigame_Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void Minigame_State_Changed(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void Bind_to_Minigame(class AFortMinigame* Minigame);
	void Initialize_Component(class UFortMinigameLogicComponent* Param_Logic_Component, int32 Param_Enabled_Index);
	void Set_Enabled_on_Phase(EFortMinigameState State, int32 EnabledIndex, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsEnabledPhaseMatch_Enabled, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void IsEnabled(bool* Enabled, bool CallFunc_Can_be_Enabled_True, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void Set_Enabled(bool bEnabled, EEnabledState Temp_byte_Variable, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, EEnabledState Temp_byte_Variable_1, bool CallFunc_Can_be_Enabled_True, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, class AActor* CallFunc_GetOwner_ReturnValue_1, EEnabledState K2Node_Select_Default, const struct FCreative_EnabledState& K2Node_MakeStruct_Creative_EnabledState, bool CallFunc_NotEqual_ByteByte_ReturnValue);
	void Set_Enabled_on_Play_Mode(bool Play_Mode);
	void Reset_Delay_Complete(class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);
	void Reset_Delay_Start(float Delay, const struct FCreative_EnabledState& K2Node_MakeStruct_Creative_EnabledState, bool CallFunc_Greater_FloatFloat_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue_1, bool CallFunc_IsEnabled_Enabled, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsResetting_True, float CallFunc_IsResetting_Remaining_Time, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2);
	void IsResetting(bool* TURR, float* Remaining_Time, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void OnRep_EIsEnabled(TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1);
	void Can_be_Enabled(bool* TURR, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsInPlayMode_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, class ABuildingSMActor* K2Node_DynamicCast_AsBuilding_SMActor, bool K2Node_DynamicCast_bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_Enabled_Component_C">();
	}
	static class UCreative_Enabled_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreative_Enabled_Component_C>();
	}
};
static_assert(alignof(UCreative_Enabled_Component_C) == 0x000008, "Wrong alinment on UCreative_Enabled_Component_C");
static_assert(sizeof(UCreative_Enabled_Component_C) == 0x000168, "Wrong size on UCreative_Enabled_Component_C");
static_assert(offsetof(UCreative_Enabled_Component_C, UberGraphFrame_Creative_Enabled_Component_C) == 0x0000B8, "Member 'UCreative_Enabled_Component_C::UberGraphFrame_Creative_Enabled_Component_C' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledState) == 0x0000C0, "Member 'UCreative_Enabled_Component_C::EnabledState' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, On_Enabled_State_Changed) == 0x0000C8, "Member 'UCreative_Enabled_Component_C::On_Enabled_State_Changed' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledDuringPlayMode) == 0x0000D8, "Member 'UCreative_Enabled_Component_C::EnabledDuringPlayMode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledDuringEditMode) == 0x0000D9, "Member 'UCreative_Enabled_Component_C::EnabledDuringEditMode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, On_Reset_Complete) == 0x0000E0, "Member 'UCreative_Enabled_Component_C::On_Reset_Complete' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Reset_Timer) == 0x0000F0, "Member 'UCreative_Enabled_Component_C::Reset_Timer' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, IgnorePhases) == 0x0000F8, "Member 'UCreative_Enabled_Component_C::IgnorePhases' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, ResetDelay) == 0x000148, "Member 'UCreative_Enabled_Component_C::ResetDelay' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Enabled_Index) == 0x00014C, "Member 'UCreative_Enabled_Component_C::Enabled_Index' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Can_be_Enabled_During_Edit_Mode) == 0x000150, "Member 'UCreative_Enabled_Component_C::Can_be_Enabled_During_Edit_Mode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Logic_Component) == 0x000158, "Member 'UCreative_Enabled_Component_C::Logic_Component' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Switch_On_Phase_Change) == 0x000160, "Member 'UCreative_Enabled_Component_C::Switch_On_Phase_Change' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Switch_On_Play_Change) == 0x000161, "Member 'UCreative_Enabled_Component_C::Switch_On_Play_Change' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, CanBeEnabledDuringPreview) == 0x000162, "Member 'UCreative_Enabled_Component_C::CanBeEnabledDuringPreview' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Check_Phase_Change_During_Play_Switch) == 0x000163, "Member 'UCreative_Enabled_Component_C::Check_Phase_Change_During_Play_Switch' has a wrong offset!");

}

