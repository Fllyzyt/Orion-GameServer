#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyguardRuntime

#include "Basic.hpp"

#include "BodyguardRuntime_structs.hpp"


namespace SDK::Params
{

// Function BodyguardRuntime.BodyguardPlayerComponent.ClientOnVIPHasBeenReassigned
// 0x0008 (0x0008 - 0x0000)
struct BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned final 
{
public:
	class AFortPlayerStateAthena*                 NewVIPlayerState;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned");
static_assert(sizeof(BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned) == 0x000008, "Wrong size on BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned");
static_assert(offsetof(BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned, NewVIPlayerState) == 0x000000, "Member 'BodyguardPlayerComponent_ClientOnVIPHasBeenReassigned::NewVIPlayerState' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.OnEmoteMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct BodyguardPlayerComponent_OnEmoteMontageEnded final 
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4631[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BodyguardPlayerComponent_OnEmoteMontageEnded) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_OnEmoteMontageEnded");
static_assert(sizeof(BodyguardPlayerComponent_OnEmoteMontageEnded) == 0x000010, "Wrong size on BodyguardPlayerComponent_OnEmoteMontageEnded");
static_assert(offsetof(BodyguardPlayerComponent_OnEmoteMontageEnded, Montage) == 0x000000, "Member 'BodyguardPlayerComponent_OnEmoteMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(BodyguardPlayerComponent_OnEmoteMontageEnded, bInterrupted) == 0x000008, "Member 'BodyguardPlayerComponent_OnEmoteMontageEnded::bInterrupted' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.OnFortPCPawnChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct BodyguardPlayerComponent_OnFortPCPawnChangedEvent final 
{
public:
	class AFortPawn*                              NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_OnFortPCPawnChangedEvent) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_OnFortPCPawnChangedEvent");
static_assert(sizeof(BodyguardPlayerComponent_OnFortPCPawnChangedEvent) == 0x000008, "Wrong size on BodyguardPlayerComponent_OnFortPCPawnChangedEvent");
static_assert(offsetof(BodyguardPlayerComponent_OnFortPCPawnChangedEvent, NewPawn) == 0x000000, "Member 'BodyguardPlayerComponent_OnFortPCPawnChangedEvent::NewPawn' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.OnPawnStartedEmote
// 0x0010 (0x0010 - 0x0000)
struct BodyguardPlayerComponent_OnPawnStartedEmote final 
{
public:
	class UFortItemDefinition*                    MontageItemDef;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              PawnEmoting;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_OnPawnStartedEmote) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_OnPawnStartedEmote");
static_assert(sizeof(BodyguardPlayerComponent_OnPawnStartedEmote) == 0x000010, "Wrong size on BodyguardPlayerComponent_OnPawnStartedEmote");
static_assert(offsetof(BodyguardPlayerComponent_OnPawnStartedEmote, MontageItemDef) == 0x000000, "Member 'BodyguardPlayerComponent_OnPawnStartedEmote::MontageItemDef' has a wrong offset!");
static_assert(offsetof(BodyguardPlayerComponent_OnPawnStartedEmote, PawnEmoting) == 0x000008, "Member 'BodyguardPlayerComponent_OnPawnStartedEmote::PawnEmoting' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.OnPlacementSet
// 0x0010 (0x0010 - 0x0000)
struct BodyguardPlayerComponent_OnPlacementSet final 
{
public:
	class AFortPlayerStateAthena*                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPlace;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4632[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BodyguardPlayerComponent_OnPlacementSet) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_OnPlacementSet");
static_assert(sizeof(BodyguardPlayerComponent_OnPlacementSet) == 0x000010, "Wrong size on BodyguardPlayerComponent_OnPlacementSet");
static_assert(offsetof(BodyguardPlayerComponent_OnPlacementSet, Sender) == 0x000000, "Member 'BodyguardPlayerComponent_OnPlacementSet::Sender' has a wrong offset!");
static_assert(offsetof(BodyguardPlayerComponent_OnPlacementSet, NewPlace) == 0x000008, "Member 'BodyguardPlayerComponent_OnPlacementSet::NewPlace' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.OnPlayerRevived
// 0x0008 (0x0008 - 0x0000)
struct BodyguardPlayerComponent_OnPlayerRevived final 
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_OnPlayerRevived) == 0x000008, "Wrong alinment on BodyguardPlayerComponent_OnPlayerRevived");
static_assert(sizeof(BodyguardPlayerComponent_OnPlayerRevived) == 0x000008, "Wrong size on BodyguardPlayerComponent_OnPlayerRevived");
static_assert(offsetof(BodyguardPlayerComponent_OnPlayerRevived, EventInstigator) == 0x000000, "Member 'BodyguardPlayerComponent_OnPlayerRevived::EventInstigator' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.SetIsBodyguardTooFarFromVIP
// 0x0001 (0x0001 - 0x0000)
struct BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP final 
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP) == 0x000001, "Wrong alinment on BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP");
static_assert(sizeof(BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP) == 0x000001, "Wrong size on BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP");
static_assert(offsetof(BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP, bValue) == 0x000000, "Member 'BodyguardPlayerComponent_SetIsBodyguardTooFarFromVIP::bValue' has a wrong offset!");

// Function BodyguardRuntime.BodyguardPlayerComponent.IsSkinSwappingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BodyguardPlayerComponent_IsSkinSwappingEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerComponent_IsSkinSwappingEnabled) == 0x000001, "Wrong alinment on BodyguardPlayerComponent_IsSkinSwappingEnabled");
static_assert(sizeof(BodyguardPlayerComponent_IsSkinSwappingEnabled) == 0x000001, "Wrong size on BodyguardPlayerComponent_IsSkinSwappingEnabled");
static_assert(offsetof(BodyguardPlayerComponent_IsSkinSwappingEnabled, ReturnValue) == 0x000000, "Member 'BodyguardPlayerComponent_IsSkinSwappingEnabled::ReturnValue' has a wrong offset!");

// Function BodyguardRuntime.BodyguardSoundActor.HandleVIPNotAllowItemPickup_BP
// 0x0001 (0x0001 - 0x0000)
struct BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP final 
{
public:
	bool                                          bIsLocalPlayerTheVIP;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP) == 0x000001, "Wrong alinment on BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP");
static_assert(sizeof(BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP) == 0x000001, "Wrong size on BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP");
static_assert(offsetof(BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP, bIsLocalPlayerTheVIP) == 0x000000, "Member 'BodyguardSoundActor_HandleVIPNotAllowItemPickup_BP::bIsLocalPlayerTheVIP' has a wrong offset!");

// Function BodyguardRuntime.BodyguardSoundActor.UpdateTeamVIPHealth_BP
// 0x000C (0x000C - 0x0000)
struct BodyguardSoundActor_UpdateTeamVIPHealth_BP final 
{
public:
	float                                         CurrentHealth;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayerTheVIP;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4634[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BodyguardSoundActor_UpdateTeamVIPHealth_BP) == 0x000004, "Wrong alinment on BodyguardSoundActor_UpdateTeamVIPHealth_BP");
static_assert(sizeof(BodyguardSoundActor_UpdateTeamVIPHealth_BP) == 0x00000C, "Wrong size on BodyguardSoundActor_UpdateTeamVIPHealth_BP");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPHealth_BP, CurrentHealth) == 0x000000, "Member 'BodyguardSoundActor_UpdateTeamVIPHealth_BP::CurrentHealth' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPHealth_BP, MaxHealth) == 0x000004, "Member 'BodyguardSoundActor_UpdateTeamVIPHealth_BP::MaxHealth' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPHealth_BP, bIsLocalPlayerTheVIP) == 0x000008, "Member 'BodyguardSoundActor_UpdateTeamVIPHealth_BP::bIsLocalPlayerTheVIP' has a wrong offset!");

// Function BodyguardRuntime.BodyguardSoundActor.UpdateTeamVIPIsBeingRevived_BP
// 0x0004 (0x0004 - 0x0000)
struct BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP final 
{
public:
	bool                                          bIsBeingRevived;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamVIP_DBNO;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReviving;                                       // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayerTheVIP;                              // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP) == 0x000001, "Wrong alinment on BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP");
static_assert(sizeof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP) == 0x000004, "Wrong size on BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP, bIsBeingRevived) == 0x000000, "Member 'BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP::bIsBeingRevived' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP, bIsTeamVIP_DBNO) == 0x000001, "Member 'BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP::bIsTeamVIP_DBNO' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP, bIsReviving) == 0x000002, "Member 'BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP::bIsReviving' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP, bIsLocalPlayerTheVIP) == 0x000003, "Member 'BodyguardSoundActor_UpdateTeamVIPIsBeingRevived_BP::bIsLocalPlayerTheVIP' has a wrong offset!");

// Function BodyguardRuntime.BodyguardSoundActor.UpdateTeamVIPIsDBNO_BP
// 0x0003 (0x0003 - 0x0000)
struct BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP final 
{
public:
	bool                                          bIsTeamVIP_DBNO;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayerTheVIP;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP) == 0x000001, "Wrong alinment on BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP");
static_assert(sizeof(BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP) == 0x000003, "Wrong size on BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP, bIsTeamVIP_DBNO) == 0x000000, "Member 'BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP::bIsTeamVIP_DBNO' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP, bIsLocalPlayerTheVIP) == 0x000001, "Member 'BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP::bIsLocalPlayerTheVIP' has a wrong offset!");
static_assert(offsetof(BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP, bIsDead) == 0x000002, "Member 'BodyguardSoundActor_UpdateTeamVIPIsDBNO_BP::bIsDead' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.NotifySquadmatesOnVIPTookDamage
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage final 
{
public:
	uint8                                         VIPTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage) == 0x000001, "Wrong alinment on FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage");
static_assert(sizeof(FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage) == 0x000001, "Wrong size on FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage");
static_assert(offsetof(FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage, VIPTeam) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_NotifySquadmatesOnVIPTookDamage::VIPTeam' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.NotifyVIPOnTeammateDBNO
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO final 
{
public:
	uint8                                         VIPTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO) == 0x000001, "Wrong alinment on FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO");
static_assert(sizeof(FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO) == 0x000001, "Wrong size on FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO");
static_assert(offsetof(FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO, VIPTeam) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_NotifyVIPOnTeammateDBNO::VIPTeam' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.ShutOffAnyDBNOSounds
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds final 
{
public:
	bool                                          bIsDead;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds) == 0x000001, "Wrong alinment on FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds");
static_assert(sizeof(FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds) == 0x000001, "Wrong size on FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds");
static_assert(offsetof(FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds, bIsDead) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_ShutOffAnyDBNOSounds::bIsDead' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.UpdateSquadmatesIsReviving
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving final 
{
public:
	uint8                                         VIPTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving) == 0x000001, "Wrong alinment on FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving");
static_assert(sizeof(FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving) == 0x000001, "Wrong size on FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving");
static_assert(offsetof(FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving, VIPTeam) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_UpdateSquadmatesIsReviving::VIPTeam' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.GetTeamVIPPlayerData
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData final 
{
public:
	uint8                                         TeamNum;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4639[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyguardVIPPlayerData                OutVIPPlayerData;                                  // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_463A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData) == 0x000008, "Wrong alinment on FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData");
static_assert(sizeof(FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData) == 0x000028, "Wrong size on FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData");
static_assert(offsetof(FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData, TeamNum) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData::TeamNum' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData, OutVIPPlayerData) == 0x000008, "Member 'FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData::OutVIPPlayerData' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData, ReturnValue) == 0x000020, "Member 'FortAthenaMutator_Bodyguard_GetTeamVIPPlayerData::ReturnValue' has a wrong offset!");

// Function BodyguardRuntime.FortAthenaMutator_Bodyguard.IsReviving
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Bodyguard_IsReviving final 
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_463B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMutator_Bodyguard_IsReviving) == 0x000008, "Wrong alinment on FortAthenaMutator_Bodyguard_IsReviving");
static_assert(sizeof(FortAthenaMutator_Bodyguard_IsReviving) == 0x000010, "Wrong size on FortAthenaMutator_Bodyguard_IsReviving");
static_assert(offsetof(FortAthenaMutator_Bodyguard_IsReviving, PlayerState) == 0x000000, "Member 'FortAthenaMutator_Bodyguard_IsReviving::PlayerState' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Bodyguard_IsReviving, ReturnValue) == 0x000008, "Member 'FortAthenaMutator_Bodyguard_IsReviving::ReturnValue' has a wrong offset!");

}

