#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Entity_Client_WorldTextComponent

#include "Basic.hpp"

#include "Entity_Client_WorldTextVerticalAlignment_structs.hpp"
#include "Entity_Client_WorldTextHorizontalAlignment_structs.hpp"


namespace SDK::Params
{

// Function Entity_Client_WorldTextComponent.WorldTextComponent.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct WorldTextComponent_GetHorizontalAlignment final 
{
public:
	EWorldTextHorizontalAlignment                 RetVal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetHorizontalAlignment) == 0x000001, "Wrong alinment on WorldTextComponent_GetHorizontalAlignment");
static_assert(sizeof(WorldTextComponent_GetHorizontalAlignment) == 0x000001, "Wrong size on WorldTextComponent_GetHorizontalAlignment");
static_assert(offsetof(WorldTextComponent_GetHorizontalAlignment, RetVal) == 0x000000, "Member 'WorldTextComponent_GetHorizontalAlignment::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.GetRelativeLocation
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_GetRelativeLocation final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetRelativeLocation) == 0x000008, "Wrong alinment on WorldTextComponent_GetRelativeLocation");
static_assert(sizeof(WorldTextComponent_GetRelativeLocation) == 0x000008, "Wrong size on WorldTextComponent_GetRelativeLocation");
static_assert(offsetof(WorldTextComponent_GetRelativeLocation, RetVal) == 0x000000, "Member 'WorldTextComponent_GetRelativeLocation::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.GetSize
// 0x0004 (0x0004 - 0x0000)
struct WorldTextComponent_GetSize final 
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetSize) == 0x000004, "Wrong alinment on WorldTextComponent_GetSize");
static_assert(sizeof(WorldTextComponent_GetSize) == 0x000004, "Wrong size on WorldTextComponent_GetSize");
static_assert(offsetof(WorldTextComponent_GetSize, RetVal) == 0x000000, "Member 'WorldTextComponent_GetSize::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.GetTextRenderColor
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_GetTextRenderColor final 
{
public:
	class UColor*                                 RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetTextRenderColor) == 0x000008, "Wrong alinment on WorldTextComponent_GetTextRenderColor");
static_assert(sizeof(WorldTextComponent_GetTextRenderColor) == 0x000008, "Wrong size on WorldTextComponent_GetTextRenderColor");
static_assert(offsetof(WorldTextComponent_GetTextRenderColor, RetVal) == 0x000000, "Member 'WorldTextComponent_GetTextRenderColor::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct WorldTextComponent_GetVerticalAlignment final 
{
public:
	EWorldTextVerticalAlignment                   RetVal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetVerticalAlignment) == 0x000001, "Wrong alinment on WorldTextComponent_GetVerticalAlignment");
static_assert(sizeof(WorldTextComponent_GetVerticalAlignment) == 0x000001, "Wrong size on WorldTextComponent_GetVerticalAlignment");
static_assert(offsetof(WorldTextComponent_GetVerticalAlignment, RetVal) == 0x000000, "Member 'WorldTextComponent_GetVerticalAlignment::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.getWorldText
// 0x0010 (0x0010 - 0x0000)
struct WorldTextComponent_GetWorldText final 
{
public:
	class FString                                 RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_GetWorldText) == 0x000008, "Wrong alinment on WorldTextComponent_GetWorldText");
static_assert(sizeof(WorldTextComponent_GetWorldText) == 0x000010, "Wrong size on WorldTextComponent_GetWorldText");
static_assert(offsetof(WorldTextComponent_GetWorldText, RetVal) == 0x000000, "Member 'WorldTextComponent_GetWorldText::RetVal' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct WorldTextComponent_SetHorizontalAlignment final 
{
public:
	EWorldTextHorizontalAlignment                 __verse_0x3AF80D16_value;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetHorizontalAlignment) == 0x000001, "Wrong alinment on WorldTextComponent_SetHorizontalAlignment");
static_assert(sizeof(WorldTextComponent_SetHorizontalAlignment) == 0x000001, "Wrong size on WorldTextComponent_SetHorizontalAlignment");
static_assert(offsetof(WorldTextComponent_SetHorizontalAlignment, __verse_0x3AF80D16_value) == 0x000000, "Member 'WorldTextComponent_SetHorizontalAlignment::__verse_0x3AF80D16_value' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetRelativeLocation
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_SetRelativeLocation final 
{
public:
	class UVector3*                               __verse_0x6EC295F3_relativeLocation;               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetRelativeLocation) == 0x000008, "Wrong alinment on WorldTextComponent_SetRelativeLocation");
static_assert(sizeof(WorldTextComponent_SetRelativeLocation) == 0x000008, "Wrong size on WorldTextComponent_SetRelativeLocation");
static_assert(offsetof(WorldTextComponent_SetRelativeLocation, __verse_0x6EC295F3_relativeLocation) == 0x000000, "Member 'WorldTextComponent_SetRelativeLocation::__verse_0x6EC295F3_relativeLocation' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetRelativeRotation
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_SetRelativeRotation final 
{
public:
	class UVector3*                               __verse_0xA6C7E40A_relativeRotation;               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetRelativeRotation) == 0x000008, "Wrong alinment on WorldTextComponent_SetRelativeRotation");
static_assert(sizeof(WorldTextComponent_SetRelativeRotation) == 0x000008, "Wrong size on WorldTextComponent_SetRelativeRotation");
static_assert(offsetof(WorldTextComponent_SetRelativeRotation, __verse_0xA6C7E40A_relativeRotation) == 0x000000, "Member 'WorldTextComponent_SetRelativeRotation::__verse_0xA6C7E40A_relativeRotation' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetRelativeScale
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_SetRelativeScale final 
{
public:
	class UVector3*                               __verse_0x5FA07D28_relativeScale;                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetRelativeScale) == 0x000008, "Wrong alinment on WorldTextComponent_SetRelativeScale");
static_assert(sizeof(WorldTextComponent_SetRelativeScale) == 0x000008, "Wrong size on WorldTextComponent_SetRelativeScale");
static_assert(offsetof(WorldTextComponent_SetRelativeScale, __verse_0x5FA07D28_relativeScale) == 0x000000, "Member 'WorldTextComponent_SetRelativeScale::__verse_0x5FA07D28_relativeScale' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetSize
// 0x0004 (0x0004 - 0x0000)
struct WorldTextComponent_SetSize final 
{
public:
	float                                         __verse_0x31A8F10C_Value;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetSize) == 0x000004, "Wrong alinment on WorldTextComponent_SetSize");
static_assert(sizeof(WorldTextComponent_SetSize) == 0x000004, "Wrong size on WorldTextComponent_SetSize");
static_assert(offsetof(WorldTextComponent_SetSize, __verse_0x31A8F10C_Value) == 0x000000, "Member 'WorldTextComponent_SetSize::__verse_0x31A8F10C_Value' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetTextRenderColor
// 0x0008 (0x0008 - 0x0000)
struct WorldTextComponent_SetTextRenderColor final 
{
public:
	class UColor*                                 __verse_0x3AF80D16_value;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetTextRenderColor) == 0x000008, "Wrong alinment on WorldTextComponent_SetTextRenderColor");
static_assert(sizeof(WorldTextComponent_SetTextRenderColor) == 0x000008, "Wrong size on WorldTextComponent_SetTextRenderColor");
static_assert(offsetof(WorldTextComponent_SetTextRenderColor, __verse_0x3AF80D16_value) == 0x000000, "Member 'WorldTextComponent_SetTextRenderColor::__verse_0x3AF80D16_value' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct WorldTextComponent_SetVerticalAlignment final 
{
public:
	EWorldTextVerticalAlignment                   __verse_0x3AF80D16_value;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetVerticalAlignment) == 0x000001, "Wrong alinment on WorldTextComponent_SetVerticalAlignment");
static_assert(sizeof(WorldTextComponent_SetVerticalAlignment) == 0x000001, "Wrong size on WorldTextComponent_SetVerticalAlignment");
static_assert(offsetof(WorldTextComponent_SetVerticalAlignment, __verse_0x3AF80D16_value) == 0x000000, "Member 'WorldTextComponent_SetVerticalAlignment::__verse_0x3AF80D16_value' has a wrong offset!");

// Function Entity_Client_WorldTextComponent.WorldTextComponent.setWorldText
// 0x0010 (0x0010 - 0x0000)
struct WorldTextComponent_SetWorldText final 
{
public:
	class FString                                 __verse_0x4069CADB_Text;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldTextComponent_SetWorldText) == 0x000008, "Wrong alinment on WorldTextComponent_SetWorldText");
static_assert(sizeof(WorldTextComponent_SetWorldText) == 0x000010, "Wrong size on WorldTextComponent_SetWorldText");
static_assert(offsetof(WorldTextComponent_SetWorldText, __verse_0x4069CADB_Text) == 0x000000, "Member 'WorldTextComponent_SetWorldText::__verse_0x4069CADB_Text' has a wrong offset!");

}

