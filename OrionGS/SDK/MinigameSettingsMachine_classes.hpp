#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameSettingsMachine

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "MinigameScoringPreset_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MinigameSettingsMachine.MinigameSettingsMachine_C
// 0x01A0 (0x04D8 - 0x0338)
class AMinigameSettingsMachine_C final  : public AFortMinigameSettingsBuilding
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         GameModeIndex;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         TimeLimit;                                         // 0x034C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigamePlayerSpawnLocationSetting       SpawnLocationSetting;                              // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBD[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTeams;                                          // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EFortMinigamePostGameSpawnLocationSetting     PostGameSpawnLocationSetting;                      // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBE[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLives;                                       // 0x035C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AutoEndTeamThreshold;                              // 0x0360(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamToMoveToWhenOutOfSpawns;                       // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumKillsForEndCondition;                           // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AutoStartDelay;                                    // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumCollectItemsForEndCondition;                    // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBF[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMinigameScoringPreset>         ScoringPresets;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class UClass*>                         TrackedStats;                                      // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         NumAIKillsForEndCondition;                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreForEndCondition;                              // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalRounds;                                       // 0x03A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumObjectDestroysForWin;                           // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WinnerDisplayTime;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScoreDisplayTime;                                  // 0x03AC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat0;                                 // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat1;                                 // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat2;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat3;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat4;                                 // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC0[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TrackedScoreStats;                                 // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FGameplayTagContainer>          AvailableUIExtensions;                             // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CommonUIExtensions;                                // 0x03E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         UIExtensionSetting;                                // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC1[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat0_Definition;                      // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat1_Definition;                      // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat2_Definition;                      // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat3_Definition;                      // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat4_Definition;                      // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             UIExtensionSetting_Definition;                     // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         TeamSetting;                                       // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC2[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlaylistUserOptionIntEnum*             TeamSetting_Definition;                            // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EMinigameFullscreenMapWidgetType              MinigameFullscreenMapWidgetType;                   // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC3[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimerDirection;                                    // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamRotationSetting;                               // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundScoreDisplayTime;                             // 0x045C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundWinnerDisplayTime;                            // 0x0460(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopwatchMode;                                    // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStableTeamCosmetics;                              // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowCumulativeScoreOnHUD;                         // 0x0466(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMinigameWinCondition                         WinCondition;                                      // 0x0467(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllTeamsMustMatchEndConditions;                    // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndGameOnMatchPointWin;                            // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultClassSlot;                                  // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameClassResetType                   ClassResetType;                                    // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigamePlayerPersistence                    PlayerPersistence;                                 // 0x0475(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC4[0x2];                                      // 0x0476(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnlyAllowRespawningIfPlayerStartPadsFound;         // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowCumulativeScoreboard;                          // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowFriendlyFire;                                // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMinigameGameEndCallout                       GameEndCallout;                                    // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC5[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VictoryAudioIndex;                                 // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DrawAudioIndex;                                    // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefeatAudioIndex;                                  // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomVictoryCallout;                              // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CustomDefeatCallout;                               // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         StartCountdownDuration;                            // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC6[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceVictoryCallout;                              // 0x04B8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DeviceDefeatCallout;                               // 0x04C8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MinigameSettingsMachine(int32 EntryPoint, bool Temp_bool_IsClosed_Variable, const class FString& CallFunc_Conv_IntToString_ReturnValue, TArray<class AFortPlayerController*>& CallFunc_GetLocalFortPlayerControllers_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, class AFortPlayerController* CallFunc_Array_Get_Item, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess, TArray<class AFortPlayerController*>& CallFunc_GetLocalFortPlayerControllers_ReturnValue_1, class AFortPlayerController* CallFunc_Array_Get_Item_1, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena_1, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_HasAuthority_ReturnValue, TDelegate<void(class AFortMinigame* Minigame, EFortMinigameState MinigameState)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue_1, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue, const class FString& CallFunc_GetOptionKey_ReturnValue, TArray<class FString>& K2Node_MakeArray_Array, TMap<class FString, class FString>& K2Node_MakeMap_Map, bool CallFunc_SetPropertyOverrides_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_2, int32 Temp_int_Variable, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, class AFortMinigame* K2Node_CustomEvent_Minigame, EFortMinigameState K2Node_CustomEvent_MinigameState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, int32 K2Node_Select_Default);
	void OnMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void AbandonMinigameHelper();
	void StartMinigameHelper();
	void OnGameSettingsUpdated();
	void ReceiveBeginPlay();
	void GetPickupSpawnLocation(struct FVector* SpawnLocation, class AActor* CallFunc_GetOwner_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_GetActorForwardVector_ReturnValue, const struct FVector& CallFunc_Multiply_VectorInt_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1);
	void HasMinigameStarted(bool* bHasStarted, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasStarted_ReturnValue);
	void UpdateGameMode(class AFortMinigame* CurrentMinigame, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue_1, bool CallFunc_Conv_IntToBool_ReturnValue_2, bool CallFunc_Conv_IntToBool_ReturnValue_3, const struct FGameplayTagContainer& CallFunc_GetUIExtensions_Return_Value, TArray<class UClass*>& CallFunc_GetScoreboardStatsArray_ScoreboardStats, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateTimeLimit(class AFortMinigame* CurrentMinigame, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void GetCurrentMinigame(class AFortMinigame** Minigame, bool CallFunc_IsValid_ReturnValue, class UFortMinigameVolumeComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue_1);
	void UpdateSpawnLocationSetting(class AFortMinigame* CurrentMinigame, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateTeamSetting(bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdatePostGameSpawnLocationSetting(class AFortMinigame* CurrentMinigame, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdatePlayerLives(class AFortMinigame* NewLocalVar_0, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateAutoEndTeamThreshold(class AFortMinigame* Minigame, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateTeamToMoveToWhenOutOfSpawns(class AFortMinigame* Minigame, bool CallFunc_HasAuthority_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, uint8 CallFunc_MakeLiteralByte_ReturnValue, uint8 CallFunc_Add_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame);
	void UpdateEndConditions(const TArray<struct FFortMinigameStatQuery>& EndConditions, class AFortMinigame* Minigame, bool CallFunc_HasAuthority_ReturnValue, const struct FFortMinigameStatQuery& K2Node_MakeStruct_FortMinigameStatQuery, bool CallFunc_Greater_IntInt_ReturnValue, const struct FFortMinigameStatQuery& K2Node_MakeStruct_FortMinigameStatQuery_1, bool CallFunc_Greater_IntInt_ReturnValue_1, bool CallFunc_TryAddEndCondition_DestroyObjects_bResult, bool CallFunc_TryAddEndCondition_CollectItems_bResult, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1, const struct FFortMinigameStatQuery& K2Node_MakeStruct_FortMinigameStatQuery_2, bool CallFunc_Greater_IntInt_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue_2, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateAutoStart(class AFortMinigame* CurrentMinigame, bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void TryAddEndCondition_CollectItems(TArray<struct FFortMinigameStatQuery>& EndConditions, bool* bResult, bool bAdded, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const struct FFortMinigameStatQuery& K2Node_MakeStruct_FortMinigameStatQuery, int32 CallFunc_Array_Add_ReturnValue);
	void UpdateJoinInProgress(class AFortMinigame* NewLocalVar_1, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateMinigameMutators(class UFortMutatorListComponent* MutatorList, class AFortMinigame* CurrentMinigame, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UFortMutatorListComponent* CallFunc_GetComponentByClass_ReturnValue, const TMap<class FString, class FString>& CallFunc_GetPropertyOverrides_CurrentOptions, bool CallFunc_GetPropertyOverrides_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame);
	void UpdateTotalRounds(bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
	void TryAddEndCondition_DestroyObjects(TArray<struct FFortMinigameStatQuery>& EndConditions, bool* bResult, bool bAdded, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, const struct FFortMinigameStatQuery& K2Node_MakeStruct_FortMinigameStatQuery, int32 CallFunc_Array_Add_ReturnValue);
	void FillTrackedStats(TArray<int32>& K2Node_MakeArray_Array);
	void GetScoreboardStatsArray(TArray<class UClass*>* ScoreboardStats, const TArray<class UClass*>& TrackedScoreboardStats, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, class UClass* CallFunc_Array_Get_Item_1, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void Game_Mode_Preset_Upgrade_Path(TArray<class FString>& K2Node_MakeArray_Array, const class FString& CallFunc_Conv_IntToString_ReturnValue, const class FString& CallFunc_GetOptionKey_ReturnValue, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue, const class FString& CallFunc_Conv_IntToString_ReturnValue_1, const class FString& CallFunc_Conv_IntToString_ReturnValue_2, const class FString& CallFunc_Conv_IntToString_ReturnValue_3, const class FString& CallFunc_Conv_IntToString_ReturnValue_4, const class FString& CallFunc_Conv_IntToString_ReturnValue_5, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue_1, const class FString& CallFunc_GetOptionKey_ReturnValue_1, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue_2, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue_3, const class FString& CallFunc_GetOptionKey_ReturnValue_2, const class FString& CallFunc_GetOptionKey_ReturnValue_3, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue_4, const class FString& CallFunc_GetOptionValueNameFromValue_ReturnValue_5, const class FString& CallFunc_GetOptionKey_ReturnValue_4, const class FString& CallFunc_GetOptionKey_ReturnValue_5, TMap<class FString, class FString>& K2Node_MakeMap_Map, const struct FMinigameScoringPreset& CallFunc_Array_Get_Item, bool CallFunc_SetPropertyOverrides_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 CallFunc_Array_Find_ReturnValue, class UClass* CallFunc_Array_Get_Item_1, class UClass* CallFunc_Array_Get_Item_2, int32 CallFunc_Array_Find_ReturnValue_1, int32 CallFunc_Array_Find_ReturnValue_2, class UClass* CallFunc_Array_Get_Item_3, class UClass* CallFunc_Array_Get_Item_4, int32 CallFunc_Array_Find_ReturnValue_3, int32 CallFunc_Array_Find_ReturnValue_4, class UClass* CallFunc_Array_Get_Item_5, bool CallFunc_Array_IsValidIndex_ReturnValue_1, int32 CallFunc_Array_Find_ReturnValue_5, bool CallFunc_Array_IsValidIndex_ReturnValue_2, bool CallFunc_Array_IsValidIndex_ReturnValue_3, bool CallFunc_Array_IsValidIndex_ReturnValue_4, bool CallFunc_Array_IsValidIndex_ReturnValue_5);
	void GetUIExtensions(struct FGameplayTagContainer* Return_Value, const struct FGameplayTagContainer& Final_UI_Extensions, const struct FGameplayTagContainer& CallFunc_Array_Get_Item, bool CallFunc_AdditionalUIExtensionValidityChecks_bUIExtensionIsValid, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void UpdateClassSettings(class AFortMinigame* CurrentMinigame, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, uint8 CallFunc_MakeLiteralByte_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, uint8 K2Node_Select_Default);
	void UpdatePlayerPersistence(bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void UpdateGameSettings(class AFortMinigame* CurrentMinigame, bool CallFunc_IsValid_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame);
	void AdditionalUIExtensionValidityChecks(const struct FGameplayTagContainer& TagContainer, bool* bUIExtensionIsValid, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_HasTag_ReturnValue);
	void UpdateGameStartCountdown(bool CallFunc_HasAuthority_ReturnValue, class AFortMinigame* CallFunc_GetCurrentMinigame_Minigame, bool CallFunc_IsValid_ReturnValue);
	void Override_Custom_End_Callouts(const class FString& Param_DeviceVictoryCallout, const class FString& Param_DeviceDefeatCallout, bool CallFunc_HasAuthority_ReturnValue);
	void GetEndCallouts(class FString* Param_CustomVictoryCallout, class FString* Param_CustomDefeatCallout, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue_1, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue_1);

	bool BlueprintCanInteract(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted, ETInteractionType InteractionType, bool CanInteract, bool CallFunc_IsValid_ReturnValue, class AController* CallFunc_GetController_ReturnValue, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue_1, class AFortVolume* CallFunc_CanPlayerCreateInCurrentVolume_OutCurrentVolume, bool CallFunc_CanPlayerCreateInCurrentVolume_ReturnValue) const;
	class FText BlueprintGetInteractionString(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetFailedInteractionString(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted) const;
	int32 GetTeamSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MinigameSettingsMachine_C">();
	}
	static class AMinigameSettingsMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinigameSettingsMachine_C>();
	}
};
static_assert(alignof(AMinigameSettingsMachine_C) == 0x000008, "Wrong alinment on AMinigameSettingsMachine_C");
static_assert(sizeof(AMinigameSettingsMachine_C) == 0x0004D8, "Wrong size on AMinigameSettingsMachine_C");
static_assert(offsetof(AMinigameSettingsMachine_C, UberGraphFrame) == 0x000338, "Member 'AMinigameSettingsMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ToyOptionsComponent) == 0x000340, "Member 'AMinigameSettingsMachine_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, GameModeIndex) == 0x000348, "Member 'AMinigameSettingsMachine_C::GameModeIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TimeLimit) == 0x00034C, "Member 'AMinigameSettingsMachine_C::TimeLimit' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, SpawnLocationSetting) == 0x000350, "Member 'AMinigameSettingsMachine_C::SpawnLocationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumTeams) == 0x000354, "Member 'AMinigameSettingsMachine_C::NumTeams' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PostGameSpawnLocationSetting) == 0x000358, "Member 'AMinigameSettingsMachine_C::PostGameSpawnLocationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PlayerLives) == 0x00035C, "Member 'AMinigameSettingsMachine_C::PlayerLives' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AutoEndTeamThreshold) == 0x000360, "Member 'AMinigameSettingsMachine_C::AutoEndTeamThreshold' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamToMoveToWhenOutOfSpawns) == 0x000364, "Member 'AMinigameSettingsMachine_C::TeamToMoveToWhenOutOfSpawns' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumKillsForEndCondition) == 0x000368, "Member 'AMinigameSettingsMachine_C::NumKillsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AutoStartDelay) == 0x00036C, "Member 'AMinigameSettingsMachine_C::AutoStartDelay' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumCollectItemsForEndCondition) == 0x000370, "Member 'AMinigameSettingsMachine_C::NumCollectItemsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoringPresets) == 0x000378, "Member 'AMinigameSettingsMachine_C::ScoringPresets' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedStats) == 0x000388, "Member 'AMinigameSettingsMachine_C::TrackedStats' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumAIKillsForEndCondition) == 0x000398, "Member 'AMinigameSettingsMachine_C::NumAIKillsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoreForEndCondition) == 0x00039C, "Member 'AMinigameSettingsMachine_C::ScoreForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TotalRounds) == 0x0003A0, "Member 'AMinigameSettingsMachine_C::TotalRounds' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumObjectDestroysForWin) == 0x0003A4, "Member 'AMinigameSettingsMachine_C::NumObjectDestroysForWin' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, WinnerDisplayTime) == 0x0003A8, "Member 'AMinigameSettingsMachine_C::WinnerDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoreDisplayTime) == 0x0003AC, "Member 'AMinigameSettingsMachine_C::ScoreDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat0) == 0x0003B0, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat0' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat1) == 0x0003B4, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat1' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat2) == 0x0003B8, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat2' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat3) == 0x0003BC, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat3' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat4) == 0x0003C0, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat4' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStats) == 0x0003C8, "Member 'AMinigameSettingsMachine_C::TrackedScoreStats' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AvailableUIExtensions) == 0x0003D8, "Member 'AMinigameSettingsMachine_C::AvailableUIExtensions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CommonUIExtensions) == 0x0003E8, "Member 'AMinigameSettingsMachine_C::CommonUIExtensions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, UIExtensionSetting) == 0x000408, "Member 'AMinigameSettingsMachine_C::UIExtensionSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat0_Definition) == 0x000410, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat0_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat1_Definition) == 0x000418, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat1_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat2_Definition) == 0x000420, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat2_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat3_Definition) == 0x000428, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat3_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat4_Definition) == 0x000430, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat4_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, UIExtensionSetting_Definition) == 0x000438, "Member 'AMinigameSettingsMachine_C::UIExtensionSetting_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamSetting) == 0x000440, "Member 'AMinigameSettingsMachine_C::TeamSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamSetting_Definition) == 0x000448, "Member 'AMinigameSettingsMachine_C::TeamSetting_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, MinigameFullscreenMapWidgetType) == 0x000450, "Member 'AMinigameSettingsMachine_C::MinigameFullscreenMapWidgetType' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TimerDirection) == 0x000454, "Member 'AMinigameSettingsMachine_C::TimerDirection' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamRotationSetting) == 0x000458, "Member 'AMinigameSettingsMachine_C::TeamRotationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, RoundScoreDisplayTime) == 0x00045C, "Member 'AMinigameSettingsMachine_C::RoundScoreDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, RoundWinnerDisplayTime) == 0x000460, "Member 'AMinigameSettingsMachine_C::RoundWinnerDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bStopwatchMode) == 0x000464, "Member 'AMinigameSettingsMachine_C::bStopwatchMode' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bStableTeamCosmetics) == 0x000465, "Member 'AMinigameSettingsMachine_C::bStableTeamCosmetics' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bShowCumulativeScoreOnHUD) == 0x000466, "Member 'AMinigameSettingsMachine_C::bShowCumulativeScoreOnHUD' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, WinCondition) == 0x000467, "Member 'AMinigameSettingsMachine_C::WinCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AllTeamsMustMatchEndConditions) == 0x000468, "Member 'AMinigameSettingsMachine_C::AllTeamsMustMatchEndConditions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, EndGameOnMatchPointWin) == 0x00046C, "Member 'AMinigameSettingsMachine_C::EndGameOnMatchPointWin' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DefaultClassSlot) == 0x000470, "Member 'AMinigameSettingsMachine_C::DefaultClassSlot' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ClassResetType) == 0x000474, "Member 'AMinigameSettingsMachine_C::ClassResetType' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PlayerPersistence) == 0x000475, "Member 'AMinigameSettingsMachine_C::PlayerPersistence' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, OnlyAllowRespawningIfPlayerStartPadsFound) == 0x000478, "Member 'AMinigameSettingsMachine_C::OnlyAllowRespawningIfPlayerStartPadsFound' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ShowCumulativeScoreboard) == 0x00047C, "Member 'AMinigameSettingsMachine_C::ShowCumulativeScoreboard' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bAllowFriendlyFire) == 0x000480, "Member 'AMinigameSettingsMachine_C::bAllowFriendlyFire' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, GameEndCallout) == 0x000481, "Member 'AMinigameSettingsMachine_C::GameEndCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, VictoryAudioIndex) == 0x000484, "Member 'AMinigameSettingsMachine_C::VictoryAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DrawAudioIndex) == 0x000488, "Member 'AMinigameSettingsMachine_C::DrawAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DefeatAudioIndex) == 0x00048C, "Member 'AMinigameSettingsMachine_C::DefeatAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CustomVictoryCallout) == 0x000490, "Member 'AMinigameSettingsMachine_C::CustomVictoryCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CustomDefeatCallout) == 0x0004A0, "Member 'AMinigameSettingsMachine_C::CustomDefeatCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, StartCountdownDuration) == 0x0004B0, "Member 'AMinigameSettingsMachine_C::StartCountdownDuration' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DeviceVictoryCallout) == 0x0004B8, "Member 'AMinigameSettingsMachine_C::DeviceVictoryCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DeviceDefeatCallout) == 0x0004C8, "Member 'AMinigameSettingsMachine_C::DeviceDefeatCallout' has a wrong offset!");

}

