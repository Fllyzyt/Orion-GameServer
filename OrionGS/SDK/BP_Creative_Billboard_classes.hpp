#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Creative_Billboard

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EBillboardshadowDirection_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Creative_Billboard.BP_Creative_Billboard_C
// 0x00D8 (0x0C80 - 0x0BA8)
class ABP_Creative_Billboard_C final  : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        WidgetAnchor;                                      // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreative_Enabled_Component_C*          Creative_Enabled_Component;                        // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameLogicComponent*            FortMinigameLogic;                                 // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  HideTextReceiverComponent;                         // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  ShowTextReceiverComponent;                         // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ToolPickingBox;                                    // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 UserDefinedText;                                   // 0x0BE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bShowBorder;                                       // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72C6[0x3];                                     // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor;                                   // 0x0BFC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  HorizontalTextAlignment;                           // 0x0C0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C7[0x3];                                     // 0x0C0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextSize;                                          // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewDistance;                                      // 0x0C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x0C18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnabledIndex;                                      // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TextFont;                                          // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Debug_Text;                                   // 0x0C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72C8[0x3];                                     // 0x0C31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BackgroundRelativeRotationWithBorder;              // 0x0C34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               BackgroundRelativeRotationWithoutBorder;           // 0x0C40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         OutlineStrength;                                   // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBillboardshadowDirection                     DropShadow;                                        // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C9[0x3];                                     // 0x0C51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Shadow_Divisor;                                    // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetComponent;                                   // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          Widget;                                            // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTextSize;                                       // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameState                            Last_State_Updated;                                // 0x0C6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72CA[0x3];                                     // 0x0C6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ClearMaterial;                                     // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Creative_Billboard(int32 EntryPoint, ECollisionEnabled Temp_byte_Variable, ECollisionEnabled Temp_byte_Variable_1, bool Temp_bool_Variable, ECollisionResponse Temp_byte_Variable_2, bool Temp_bool_Variable_1, ECollisionResponse Temp_byte_Variable_3, ECollisionResponse Temp_byte_Variable_4, bool Temp_bool_Variable_2, bool CallFunc_IsValid_ReturnValue, TDelegate<void(class AFortMinigame* Minigame)> K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable_3, bool Temp_bool_Variable_4, ECollisionEnabled Temp_byte_Variable_5, ECollisionEnabled Temp_byte_Variable_6, bool CallFunc_IsDedicatedServer_ReturnValue, TDelegate<void(class AFortMinigame* Minigame, bool bIsInPlayMode)> K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_HasAuthority_ReturnValue, class AController* K2Node_ComponentBoundEvent_TriggerInstigator_1, class AController* K2Node_ComponentBoundEvent_TriggerInstigator, class AFortMinigame* K2Node_ComponentBoundEvent_Minigame_1, bool Temp_bool_Variable_5, bool CallFunc_IsValid_ReturnValue_1, class AFortMinigame* K2Node_CustomEvent_Minigame_1, bool K2Node_CustomEvent_bIsInPlayMode, bool CallFunc_Not_PreBool_ReturnValue, ECollisionEnabled K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_3, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, ECollisionResponse K2Node_Select_Default_1, ECollisionResponse K2Node_Select_Default_2, bool K2Node_ComponentBoundEvent_Enabled, class AFortMinigame* K2Node_ComponentBoundEvent_Minigame, EFortMinigameState K2Node_ComponentBoundEvent_NewMinigameState, class AFortMinigame* K2Node_CustomEvent_Minigame, bool CallFunc_IsInPlayMode_ReturnValue, const struct FRotator& K2Node_Select_Default_3, class UMaterialInterface* K2Node_Select_Default_4, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult, ECollisionEnabled K2Node_Select_Default_5);
	void OnWorldReady();
	void Initialize_Minigame_Options(class AFortMinigame* Minigame);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void ReceiveBeginPlay();
	void BndEvt__Creative_Enabled_Component_K2Node_ComponentBoundEvent_7_On_Enabled_State_Changed__DelegateSignature(bool Enabled);
	void Initialize_Device();
	void Update_Static_Mesh_Component_Visibility_Options();
	void Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_5_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_0_AnyPropertyChangedDelegate__DelegateSignature();
	void PostUpdateProperties();
	void SetBackgroundColor(bool CallFunc_IsValid_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue);
	void SetTextSize(bool CallFunc_IsValid_ReturnValue);
	void SetTextAlignment(bool CallFunc_IsValid_ReturnValue);
	void SetDisplayText(bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, const class FString& Temp_string_Variable, bool CallFunc_IsEnabled_Enabled, const class FString& K2Node_Select_Default);
	void UpdateProperties(bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, class FText CallFunc_Conv_ColorToText_ReturnValue, const class FString& CallFunc_Conv_ByteToString_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_2, class FText CallFunc_Conv_StringToText_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_3, class FText CallFunc_Conv_ColorToText_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_4, class FText CallFunc_Conv_BoolToText_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_5, class FText CallFunc_Conv_StringToText_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_6, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue);
	void SetTextColor(bool CallFunc_IsValid_ReturnValue);
	void SetViewDistance(float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);
	void SetTextFont(bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue);
	void SetShadow(bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
	void Create_Widget(struct FTransform& Temp_struct_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, class UWidgetComponent* CallFunc_AddComponent_ReturnValue, class UUserWidget* CallFunc_GetWidget_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, class UCreative_Background_Widget_C* K2Node_DynamicCast_AsCreative_Background_Widget, bool K2Node_DynamicCast_bSuccess);
	void Text_Visibility_On_Game_State(EFortMinigameState New_State, bool bIsTextVisible, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue_1, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue_2, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
	void Update_Last_Game_State_Enable_Changed(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1);
	void GetCreativeActorBounds(bool* Override_Bounds, struct FVector* Bounds, const struct FVector& CallFunc_GetComponentBounds_Origin, const struct FVector& CallFunc_GetComponentBounds_BoxExtent, float CallFunc_GetComponentBounds_SphereRadius, bool CallFunc_Not_PreBool_ReturnValue);
	void GetCreativeActorOrigin(bool* Override, struct FVector* Center, bool CallFunc_Not_PreBool_ReturnValue);

	class UMaterialInterface* GetOverrideMeshMaterial(class UStaticMeshComponent* MeshComp, int32 MatIdx, bool Temp_bool_Variable, class UMaterialInterface* K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue) const;
	TArray<class UMeshComponent*> GetMeshComponents(TArray<class UMeshComponent*>& K2Node_MakeArray_Array) const;
	class UStaticMesh* GetCollisionStaticMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Creative_Billboard_C">();
	}
	static class ABP_Creative_Billboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Creative_Billboard_C>();
	}
};
static_assert(alignof(ABP_Creative_Billboard_C) == 0x000008, "Wrong alinment on ABP_Creative_Billboard_C");
static_assert(sizeof(ABP_Creative_Billboard_C) == 0x000C80, "Wrong size on ABP_Creative_Billboard_C");
static_assert(offsetof(ABP_Creative_Billboard_C, UberGraphFrame) == 0x000BA8, "Member 'ABP_Creative_Billboard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, WidgetAnchor) == 0x000BB0, "Member 'ABP_Creative_Billboard_C::WidgetAnchor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Creative_Enabled_Component) == 0x000BB8, "Member 'ABP_Creative_Billboard_C::Creative_Enabled_Component' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, FortMinigameLogic) == 0x000BC0, "Member 'ABP_Creative_Billboard_C::FortMinigameLogic' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, HideTextReceiverComponent) == 0x000BC8, "Member 'ABP_Creative_Billboard_C::HideTextReceiverComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ShowTextReceiverComponent) == 0x000BD0, "Member 'ABP_Creative_Billboard_C::ShowTextReceiverComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ToolPickingBox) == 0x000BD8, "Member 'ABP_Creative_Billboard_C::ToolPickingBox' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ToyOptionsComponent) == 0x000BE0, "Member 'ABP_Creative_Billboard_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, UserDefinedText) == 0x000BE8, "Member 'ABP_Creative_Billboard_C::UserDefinedText' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, bShowBorder) == 0x000BF8, "Member 'ABP_Creative_Billboard_C::bShowBorder' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundColor) == 0x000BFC, "Member 'ABP_Creative_Billboard_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, HorizontalTextAlignment) == 0x000C0C, "Member 'ABP_Creative_Billboard_C::HorizontalTextAlignment' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextSize) == 0x000C10, "Member 'ABP_Creative_Billboard_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ViewDistance) == 0x000C14, "Member 'ABP_Creative_Billboard_C::ViewDistance' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextColor) == 0x000C18, "Member 'ABP_Creative_Billboard_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, EnabledIndex) == 0x000C28, "Member 'ABP_Creative_Billboard_C::EnabledIndex' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextFont) == 0x000C2C, "Member 'ABP_Creative_Billboard_C::TextFont' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Show_Debug_Text) == 0x000C30, "Member 'ABP_Creative_Billboard_C::Show_Debug_Text' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundRelativeRotationWithBorder) == 0x000C34, "Member 'ABP_Creative_Billboard_C::BackgroundRelativeRotationWithBorder' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundRelativeRotationWithoutBorder) == 0x000C40, "Member 'ABP_Creative_Billboard_C::BackgroundRelativeRotationWithoutBorder' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, OutlineStrength) == 0x000C4C, "Member 'ABP_Creative_Billboard_C::OutlineStrength' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, DropShadow) == 0x000C50, "Member 'ABP_Creative_Billboard_C::DropShadow' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Shadow_Divisor) == 0x000C54, "Member 'ABP_Creative_Billboard_C::Shadow_Divisor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, WidgetComponent) == 0x000C58, "Member 'ABP_Creative_Billboard_C::WidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Widget) == 0x000C60, "Member 'ABP_Creative_Billboard_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, MinTextSize) == 0x000C68, "Member 'ABP_Creative_Billboard_C::MinTextSize' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Last_State_Updated) == 0x000C6C, "Member 'ABP_Creative_Billboard_C::Last_State_Updated' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, DefaultMaterial) == 0x000C70, "Member 'ABP_Creative_Billboard_C::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ClearMaterial) == 0x000C78, "Member 'ABP_Creative_Billboard_C::ClearMaterial' has a wrong offset!");

}

