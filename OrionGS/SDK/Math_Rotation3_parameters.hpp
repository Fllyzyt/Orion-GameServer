#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Math_Rotation3

#include "Basic.hpp"


namespace SDK::Params
{

// Function Math_Rotation3.Rotation3.compose
// 0x0018 (0x0018 - 0x0000)
struct Rotation3_Compose final 
{
public:
	class URotation3*                             __verse_0xFE3567E9_rotation1;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URotation3*                             __verse_0x109AD2FB_rotation2;                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URotation3*                             RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_Compose) == 0x000008, "Wrong alinment on Rotation3_Compose");
static_assert(sizeof(Rotation3_Compose) == 0x000018, "Wrong size on Rotation3_Compose");
static_assert(offsetof(Rotation3_Compose, __verse_0xFE3567E9_rotation1) == 0x000000, "Member 'Rotation3_Compose::__verse_0xFE3567E9_rotation1' has a wrong offset!");
static_assert(offsetof(Rotation3_Compose, __verse_0x109AD2FB_rotation2) == 0x000008, "Member 'Rotation3_Compose::__verse_0x109AD2FB_rotation2' has a wrong offset!");
static_assert(offsetof(Rotation3_Compose, RetVal) == 0x000010, "Member 'Rotation3_Compose::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.Create
// 0x0018 (0x0018 - 0x0000)
struct Rotation3_Create final 
{
public:
	float                                         __verse_0xD38197A3_pitch;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x0A459F28_yaw;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __verse_0x19D30F18_roll;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A47[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URotation3*                             RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_Create) == 0x000008, "Wrong alinment on Rotation3_Create");
static_assert(sizeof(Rotation3_Create) == 0x000018, "Wrong size on Rotation3_Create");
static_assert(offsetof(Rotation3_Create, __verse_0xD38197A3_pitch) == 0x000000, "Member 'Rotation3_Create::__verse_0xD38197A3_pitch' has a wrong offset!");
static_assert(offsetof(Rotation3_Create, __verse_0x0A459F28_yaw) == 0x000004, "Member 'Rotation3_Create::__verse_0x0A459F28_yaw' has a wrong offset!");
static_assert(offsetof(Rotation3_Create, __verse_0x19D30F18_roll) == 0x000008, "Member 'Rotation3_Create::__verse_0x19D30F18_roll' has a wrong offset!");
static_assert(offsetof(Rotation3_Create, RetVal) == 0x000010, "Member 'Rotation3_Create::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.createFromEuler
// 0x0010 (0x0010 - 0x0000)
struct Rotation3_CreateFromEuler final 
{
public:
	class UVector3*                               __verse_0x7E9A2B4F_vector;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URotation3*                             RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_CreateFromEuler) == 0x000008, "Wrong alinment on Rotation3_CreateFromEuler");
static_assert(sizeof(Rotation3_CreateFromEuler) == 0x000010, "Wrong size on Rotation3_CreateFromEuler");
static_assert(offsetof(Rotation3_CreateFromEuler, __verse_0x7E9A2B4F_vector) == 0x000000, "Member 'Rotation3_CreateFromEuler::__verse_0x7E9A2B4F_vector' has a wrong offset!");
static_assert(offsetof(Rotation3_CreateFromEuler, RetVal) == 0x000008, "Member 'Rotation3_CreateFromEuler::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.createZero
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_CreateZero final 
{
public:
	class URotation3*                             RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_CreateZero) == 0x000008, "Wrong alinment on Rotation3_CreateZero");
static_assert(sizeof(Rotation3_CreateZero) == 0x000008, "Wrong size on Rotation3_CreateZero");
static_assert(offsetof(Rotation3_CreateZero, RetVal) == 0x000000, "Member 'Rotation3_CreateZero::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.ToVector3
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_ToVector3 final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_ToVector3) == 0x000008, "Wrong alinment on Rotation3_ToVector3");
static_assert(sizeof(Rotation3_ToVector3) == 0x000008, "Wrong size on Rotation3_ToVector3");
static_assert(offsetof(Rotation3_ToVector3, RetVal) == 0x000000, "Member 'Rotation3_ToVector3::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.getEulerRotationVector
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_GetEulerRotationVector final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_GetEulerRotationVector) == 0x000008, "Wrong alinment on Rotation3_GetEulerRotationVector");
static_assert(sizeof(Rotation3_GetEulerRotationVector) == 0x000008, "Wrong size on Rotation3_GetEulerRotationVector");
static_assert(offsetof(Rotation3_GetEulerRotationVector, RetVal) == 0x000000, "Member 'Rotation3_GetEulerRotationVector::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.GetForwardVector
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_GetForwardVector final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_GetForwardVector) == 0x000008, "Wrong alinment on Rotation3_GetForwardVector");
static_assert(sizeof(Rotation3_GetForwardVector) == 0x000008, "Wrong size on Rotation3_GetForwardVector");
static_assert(offsetof(Rotation3_GetForwardVector, RetVal) == 0x000000, "Member 'Rotation3_GetForwardVector::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.GetRightVector
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_GetRightVector final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_GetRightVector) == 0x000008, "Wrong alinment on Rotation3_GetRightVector");
static_assert(sizeof(Rotation3_GetRightVector) == 0x000008, "Wrong size on Rotation3_GetRightVector");
static_assert(offsetof(Rotation3_GetRightVector, RetVal) == 0x000000, "Member 'Rotation3_GetRightVector::RetVal' has a wrong offset!");

// Function Math_Rotation3.Rotation3.GetUpVector
// 0x0008 (0x0008 - 0x0000)
struct Rotation3_GetUpVector final 
{
public:
	class UVector3*                               RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rotation3_GetUpVector) == 0x000008, "Wrong alinment on Rotation3_GetUpVector");
static_assert(sizeof(Rotation3_GetUpVector) == 0x000008, "Wrong size on Rotation3_GetUpVector");
static_assert(offsetof(Rotation3_GetUpVector, RetVal) == 0x000000, "Member 'Rotation3_GetUpVector::RetVal' has a wrong offset!");

}

