#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Athena_Environmental_ZipLine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Athena_Environmental_ZipLine.BP_Athena_Environmental_ZipLine_C
// 0x0110 (0x0A28 - 0x0918)
class ABP_Athena_Environmental_ZipLine_C final  : public AFortAthenaZipline
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0918(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      InteractCapsule;                                   // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Line;                                           // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Zipline;                                           // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0948(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0954(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MotorOffset;                                       // 0x0960(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineThickness;                                     // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineCollisionThickness;                            // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6173[0x4];                                     // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PoleA;                                             // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 PoleB;                                             // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   SpeedCTHandle;                                     // 0x0988(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   ZipLineEnabledCTHandle;                            // 0x0998(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   LineCollisionRadiusCTHandle;                       // 0x09A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   BuildingCheckBoxExtentsCTHandle;                   // 0x09B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   BackendName;                                       // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineExtendBeyondPoleLength;                        // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoleASocketLocation;                               // 0x09DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PoleBSocketLocation;                               // 0x09E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6174[0x4];                                     // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                PlayersPendingMovementModeChange;                  // 0x0A00(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CollisionHeightAboveLine;                          // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerOffsetToLine_Hoverboard;                     // 0x0A14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EndOverlapReleaseTimer;                            // 0x0A20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Athena_Environmental_ZipLine(int32 EntryPoint, bool CallFunc_UseInteractToEnterZipline_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_EvaluateCurveTableRow_OutXY, bool CallFunc_EvaluateCurveTableRow_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const struct FVector& CallFunc_GetDirectionUnitVector_ReturnValue, const struct FVector& CallFunc_GetDirectionUnitVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue_1, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, class AGameModeBase* CallFunc_GetGameMode_ReturnValue, class AFortGameModeAthena* K2Node_DynamicCast_AsFort_Game_Mode_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsMapInfoInitialized_ReturnValue, const struct FGameplayEventData& K2Node_MakeStruct_GameplayEventData, bool CallFunc_IsDedicatedServer_ReturnValue_1, int32 CallFunc_Array_AddUnique_ReturnValue, class ACharacter* K2Node_CustomEvent_Character, EMovementMode K2Node_CustomEvent_PrevMovementMode, uint8 K2Node_CustomEvent_PreviousCustomMode, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess_1, TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsWalking_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate_2, bool CallFunc_Array_RemoveItem_ReturnValue_1, bool CallFunc_IsDBNO_ReturnValue, bool CallFunc_HasRecentlyExitedZiplineFromJumping_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_2, class UPrimitiveComponent* K2Node_CustomEvent_OverlappedComponent_1, class AActor* K2Node_CustomEvent_OtherActor_1, class UPrimitiveComponent* K2Node_CustomEvent_OtherComp_1, int32 K2Node_CustomEvent_OtherBodyIndex_1, bool K2Node_CustomEvent_bFromSweep, struct FHitResult& K2Node_CustomEvent_SweepResult, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn_1, bool K2Node_DynamicCast_bSuccess_2, class UPrimitiveComponent* K2Node_CustomEvent_OverlappedComponent, class AActor* K2Node_CustomEvent_OtherActor, class UPrimitiveComponent* K2Node_CustomEvent_OtherComp, int32 K2Node_CustomEvent_OtherBodyIndex, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn_2, bool K2Node_DynamicCast_bSuccess_3, TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_4, bool CallFunc_IsWalking_ReturnValue_1, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue_1);
	void ReleaseZipline();
	void HandleOnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void HandleOnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void HandleOnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void HandleOnMapInfoInitialized();
	void ReceiveBeginPlay();
	void UserConstructionScript(const struct FVector& CallFunc_MakeVector_ReturnValue, bool CallFunc_IsMobilePlatform_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, const struct FHitResult& CallFunc_K2_AddWorldOffset_SweepHitResult, float CallFunc_EvaluateCurveTableRow_OutXY, bool CallFunc_EvaluateCurveTableRow_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FHitResult& CallFunc_K2_AddWorldOffset_SweepHitResult_1, const struct FVector& CallFunc_GetDirectionUnitVector_ReturnValue, const struct FVector& CallFunc_GetDirectionUnitVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue_1, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue_1, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue_3, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue_1, float CallFunc_Add_FloatFloat_ReturnValue_2, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FHitResult& CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_DistanceBetweenTwoVectors_Distance, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue_2, float CallFunc_Divide_FloatFloat_ReturnValue_2, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_2, const struct FVector& CallFunc_Divide_VectorInt_ReturnValue, const struct FHitResult& CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);
	void StartZipLining(class AFortPlayerPawn* FortPlayerPawn);
	void GetCharacterCustomMovementMode(class APawn* Character, EFortCustomMovement* CustomMovementMode, EMovementMode* MovementMode, class UPawnMovementComponent* CallFunc_GetMovementComponent_ReturnValue, class UCharacterMovementComponent* K2Node_DynamicCast_AsCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, uint8 CallFunc_GetValidValue_ReturnValue);
	void QuestCheckForUse(class AFortPlayerController* FortPlayerController, class AGameStateBase* CallFunc_GetGameState_ReturnValue, class AFortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, bool CallFunc_Athena_CheckCreativeMode_CanCompleteQuest, TArray<class AFortPlayerController*>& K2Node_MakeArray_Array, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void CheckForBuildings(class AFortPlayerPawn* Player, bool* BuildingNearby_, bool BuildingsNearby, bool Temp_bool_True_if_break_was_hit_Variable, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<class AActor*>& K2Node_MakeArray_Array, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_EvaluateCurveTableRow_OutXY, bool CallFunc_EvaluateCurveTableRow_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_FindClosestPointOnSegment_ReturnValue, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, TArray<EObjectTypeQuery>& K2Node_MakeArray_Array_1, const struct FVector& CallFunc_MakeVector_ReturnValue_1, TArray<class AActor*>& CallFunc_BoxOverlapActors_OutActors, bool CallFunc_BoxOverlapActors_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, class AActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, class ABuildingActor* K2Node_DynamicCast_AsBuilding_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, class ABuildingProp* K2Node_DynamicCast_AsBuilding_Prop, bool K2Node_DynamicCast_bSuccess_1);
	void HandleEnterZipline(class AFortPlayerPawn* InPlayerPawn, const struct FGameplayEventData& K2Node_MakeStruct_GameplayEventData);
	void Setup_Overlap_Bindings(TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate_1, bool CallFunc_IsDedicatedServer_ReturnValue);
	void CalculatePositionsOfPoles(class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue_1, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1);

	bool BlueprintCanInteract(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted, ETInteractionType InteractionType, TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput, bool CallFunc_HasMatchingGameplayTag_ReturnValue, class AFortWaterBodyActor* CallFunc_GetCurrentWaterBody_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1, bool CallFunc_HasMatchingGameplayTag_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Athena_Environmental_ZipLine_C">();
	}
	static class ABP_Athena_Environmental_ZipLine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Athena_Environmental_ZipLine_C>();
	}
};
static_assert(alignof(ABP_Athena_Environmental_ZipLine_C) == 0x000008, "Wrong alinment on ABP_Athena_Environmental_ZipLine_C");
static_assert(sizeof(ABP_Athena_Environmental_ZipLine_C) == 0x000A28, "Wrong size on ABP_Athena_Environmental_ZipLine_C");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, UberGraphFrame) == 0x000918, "Member 'ABP_Athena_Environmental_ZipLine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, InteractCapsule) == 0x000920, "Member 'ABP_Athena_Environmental_ZipLine_C::InteractCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, SM_Line) == 0x000928, "Member 'ABP_Athena_Environmental_ZipLine_C::SM_Line' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, OverlapCapsule) == 0x000930, "Member 'ABP_Athena_Environmental_ZipLine_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, Zipline) == 0x000938, "Member 'ABP_Athena_Environmental_ZipLine_C::Zipline' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, Scene) == 0x000940, "Member 'ABP_Athena_Environmental_ZipLine_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, StartLocation) == 0x000948, "Member 'ABP_Athena_Environmental_ZipLine_C::StartLocation' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, TargetLocation) == 0x000954, "Member 'ABP_Athena_Environmental_ZipLine_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, MotorOffset) == 0x000960, "Member 'ABP_Athena_Environmental_ZipLine_C::MotorOffset' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, LineThickness) == 0x00096C, "Member 'ABP_Athena_Environmental_ZipLine_C::LineThickness' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, LineCollisionThickness) == 0x000970, "Member 'ABP_Athena_Environmental_ZipLine_C::LineCollisionThickness' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PoleA) == 0x000978, "Member 'ABP_Athena_Environmental_ZipLine_C::PoleA' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PoleB) == 0x000980, "Member 'ABP_Athena_Environmental_ZipLine_C::PoleB' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, SpeedCTHandle) == 0x000988, "Member 'ABP_Athena_Environmental_ZipLine_C::SpeedCTHandle' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, ZipLineEnabledCTHandle) == 0x000998, "Member 'ABP_Athena_Environmental_ZipLine_C::ZipLineEnabledCTHandle' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, LineCollisionRadiusCTHandle) == 0x0009A8, "Member 'ABP_Athena_Environmental_ZipLine_C::LineCollisionRadiusCTHandle' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, BuildingCheckBoxExtentsCTHandle) == 0x0009B8, "Member 'ABP_Athena_Environmental_ZipLine_C::BuildingCheckBoxExtentsCTHandle' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, BackendName) == 0x0009C8, "Member 'ABP_Athena_Environmental_ZipLine_C::BackendName' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, QuestItem) == 0x0009D0, "Member 'ABP_Athena_Environmental_ZipLine_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, LineExtendBeyondPoleLength) == 0x0009D8, "Member 'ABP_Athena_Environmental_ZipLine_C::LineExtendBeyondPoleLength' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PoleASocketLocation) == 0x0009DC, "Member 'ABP_Athena_Environmental_ZipLine_C::PoleASocketLocation' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PoleBSocketLocation) == 0x0009E8, "Member 'ABP_Athena_Environmental_ZipLine_C::PoleBSocketLocation' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PlayerPawn) == 0x0009F8, "Member 'ABP_Athena_Environmental_ZipLine_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PlayersPendingMovementModeChange) == 0x000A00, "Member 'ABP_Athena_Environmental_ZipLine_C::PlayersPendingMovementModeChange' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, CollisionHeightAboveLine) == 0x000A10, "Member 'ABP_Athena_Environmental_ZipLine_C::CollisionHeightAboveLine' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, PlayerOffsetToLine_Hoverboard) == 0x000A14, "Member 'ABP_Athena_Environmental_ZipLine_C::PlayerOffsetToLine_Hoverboard' has a wrong offset!");
static_assert(offsetof(ABP_Athena_Environmental_ZipLine_C, EndOverlapReleaseTimer) == 0x000A20, "Member 'ABP_Athena_Environmental_ZipLine_C::EndOverlapReleaseTimer' has a wrong offset!");

}

