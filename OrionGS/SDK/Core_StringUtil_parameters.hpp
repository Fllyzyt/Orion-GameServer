#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Core_StringUtil

#include "Basic.hpp"


namespace SDK::Params
{

// Function Core_StringUtil.StringUtil.Concat
// 0x0030 (0x0030 - 0x0000)
struct StringUtil_Concat final 
{
public:
	class FString                                 __verse_0x9A53092C_lhs;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0x786D20C9_rhs;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_Concat) == 0x000008, "Wrong alinment on StringUtil_Concat");
static_assert(sizeof(StringUtil_Concat) == 0x000030, "Wrong size on StringUtil_Concat");
static_assert(offsetof(StringUtil_Concat, __verse_0x9A53092C_lhs) == 0x000000, "Member 'StringUtil_Concat::__verse_0x9A53092C_lhs' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat, __verse_0x786D20C9_rhs) == 0x000010, "Member 'StringUtil_Concat::__verse_0x786D20C9_rhs' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat, RetVal) == 0x000020, "Member 'StringUtil_Concat::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.concat3
// 0x0040 (0x0040 - 0x0000)
struct StringUtil_Concat3 final 
{
public:
	class FString                                 __verse_0xAE808AE8_one;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0x38034999_two;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0xA18F2A98_three;                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 RetVal;                                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_Concat3) == 0x000008, "Wrong alinment on StringUtil_Concat3");
static_assert(sizeof(StringUtil_Concat3) == 0x000040, "Wrong size on StringUtil_Concat3");
static_assert(offsetof(StringUtil_Concat3, __verse_0xAE808AE8_one) == 0x000000, "Member 'StringUtil_Concat3::__verse_0xAE808AE8_one' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat3, __verse_0x38034999_two) == 0x000010, "Member 'StringUtil_Concat3::__verse_0x38034999_two' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat3, __verse_0xA18F2A98_three) == 0x000020, "Member 'StringUtil_Concat3::__verse_0xA18F2A98_three' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat3, RetVal) == 0x000030, "Member 'StringUtil_Concat3::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.concat4
// 0x0050 (0x0050 - 0x0000)
struct StringUtil_Concat4 final 
{
public:
	class FString                                 __verse_0xAE808AE8_one;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0x38034999_two;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0xA18F2A98_three;                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 __verse_0xACAB2BF9_four;                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 RetVal;                                            // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_Concat4) == 0x000008, "Wrong alinment on StringUtil_Concat4");
static_assert(sizeof(StringUtil_Concat4) == 0x000050, "Wrong size on StringUtil_Concat4");
static_assert(offsetof(StringUtil_Concat4, __verse_0xAE808AE8_one) == 0x000000, "Member 'StringUtil_Concat4::__verse_0xAE808AE8_one' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat4, __verse_0x38034999_two) == 0x000010, "Member 'StringUtil_Concat4::__verse_0x38034999_two' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat4, __verse_0xA18F2A98_three) == 0x000020, "Member 'StringUtil_Concat4::__verse_0xA18F2A98_three' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat4, __verse_0xACAB2BF9_four) == 0x000030, "Member 'StringUtil_Concat4::__verse_0xACAB2BF9_four' has a wrong offset!");
static_assert(offsetof(StringUtil_Concat4, RetVal) == 0x000040, "Member 'StringUtil_Concat4::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.concatArray
// 0x0020 (0x0020 - 0x0000)
struct StringUtil_ConcatArray final 
{
public:
	TArray<class FString>                         __verse_0x7817A78F_strings;                        // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	class FString                                 RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_ConcatArray) == 0x000008, "Wrong alinment on StringUtil_ConcatArray");
static_assert(sizeof(StringUtil_ConcatArray) == 0x000020, "Wrong size on StringUtil_ConcatArray");
static_assert(offsetof(StringUtil_ConcatArray, __verse_0x7817A78F_strings) == 0x000000, "Member 'StringUtil_ConcatArray::__verse_0x7817A78F_strings' has a wrong offset!");
static_assert(offsetof(StringUtil_ConcatArray, RetVal) == 0x000010, "Member 'StringUtil_ConcatArray::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.fromBool
// 0x0018 (0x0018 - 0x0000)
struct StringUtil_FromBool final 
{
public:
	uint8                                         __verse_0xE50A13DD_val : 1;                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor))
	uint8                                         Pad_7A61[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_FromBool) == 0x000008, "Wrong alinment on StringUtil_FromBool");
static_assert(sizeof(StringUtil_FromBool) == 0x000018, "Wrong size on StringUtil_FromBool");
static_assert(offsetof(StringUtil_FromBool, RetVal) == 0x000008, "Member 'StringUtil_FromBool::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.fromFloat
// 0x0018 (0x0018 - 0x0000)
struct StringUtil_FromFloat final 
{
public:
	float                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A62[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_FromFloat) == 0x000008, "Wrong alinment on StringUtil_FromFloat");
static_assert(sizeof(StringUtil_FromFloat) == 0x000018, "Wrong size on StringUtil_FromFloat");
static_assert(offsetof(StringUtil_FromFloat, __verse_0xE50A13DD_val) == 0x000000, "Member 'StringUtil_FromFloat::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(StringUtil_FromFloat, RetVal) == 0x000008, "Member 'StringUtil_FromFloat::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.fromInt
// 0x0018 (0x0018 - 0x0000)
struct StringUtil_FromInt final 
{
public:
	int32                                         __verse_0xE50A13DD_val;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A63[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_FromInt) == 0x000008, "Wrong alinment on StringUtil_FromInt");
static_assert(sizeof(StringUtil_FromInt) == 0x000018, "Wrong size on StringUtil_FromInt");
static_assert(offsetof(StringUtil_FromInt, __verse_0xE50A13DD_val) == 0x000000, "Member 'StringUtil_FromInt::__verse_0xE50A13DD_val' has a wrong offset!");
static_assert(offsetof(StringUtil_FromInt, RetVal) == 0x000008, "Member 'StringUtil_FromInt::RetVal' has a wrong offset!");

// Function Core_StringUtil.StringUtil.Join
// 0x0030 (0x0030 - 0x0000)
struct StringUtil_Join final 
{
public:
	class FString                                 __verse_0x7B90A06E_separator;                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         __verse_0x7817A78F_strings;                        // 0x0010(0x0010)(Parm, HasGetValueTypeHash)
	class FString                                 RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(StringUtil_Join) == 0x000008, "Wrong alinment on StringUtil_Join");
static_assert(sizeof(StringUtil_Join) == 0x000030, "Wrong size on StringUtil_Join");
static_assert(offsetof(StringUtil_Join, __verse_0x7B90A06E_separator) == 0x000000, "Member 'StringUtil_Join::__verse_0x7B90A06E_separator' has a wrong offset!");
static_assert(offsetof(StringUtil_Join, __verse_0x7817A78F_strings) == 0x000010, "Member 'StringUtil_Join::__verse_0x7817A78F_strings' has a wrong offset!");
static_assert(offsetof(StringUtil_Join, RetVal) == 0x000020, "Member 'StringUtil_Join::RetVal' has a wrong offset!");

}

