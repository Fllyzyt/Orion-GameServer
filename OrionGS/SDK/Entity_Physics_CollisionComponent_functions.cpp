#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Entity_Physics_CollisionComponent

#include "Basic.hpp"

#include "Entity_Physics_CollisionComponent_classes.hpp"
#include "Entity_Physics_CollisionComponent_parameters.hpp"


namespace SDK
{

// Function Entity_Physics_CollisionComponent.CollisionComponent.$InitCDO
// ()

void UCollisionComponent::_InitCDO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.$InitInstance
// ()

void UCollisionComponent::_InitInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "$InitInstance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.GetCollisionProfileName
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UCollisionComponent::GetCollisionProfileName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "GetCollisionProfileName");

	Params::CollisionComponent_GetCollisionProfileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getEnabled
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getEnabled");

	Params::CollisionComponent_GetEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getGravityEnabled
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetGravityEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getGravityEnabled");

	Params::CollisionComponent_GetGravityEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getMovable
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetMovable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getMovable");

	Params::CollisionComponent_GetMovable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getSendHitEventsOnCollide
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetSendHitEventsOnCollide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getSendHitEventsOnCollide");

	Params::CollisionComponent_GetSendHitEventsOnCollide Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getSendOverlapEvents
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetSendOverlapEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getSendOverlapEvents");

	Params::CollisionComponent_GetSendOverlapEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.getUseContinuousCollisionDetection
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   RetVal                                                 (Parm, OutParm, ReturnParm, NoDestructor)

uint8 UCollisionComponent::GetUseContinuousCollisionDetection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "getUseContinuousCollisionDetection");

	Params::CollisionComponent_GetUseContinuousCollisionDetection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.SetCollisionProfileName
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           __verse_0x29B886CB_CollisionProfile                    (Parm, ZeroConstructor, HasGetValueTypeHash)

void UCollisionComponent::SetCollisionProfileName(const class FString& __verse_0x29B886CB_CollisionProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "SetCollisionProfileName");

	Params::CollisionComponent_SetCollisionProfileName Parms{};

	Parms.__verse_0x29B886CB_CollisionProfile = std::move(__verse_0x29B886CB_CollisionProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setCustomDegreeOfFreedomConstrain
// (Native, Public, BlueprintCallable)
// Parameters:
// class UVector3*                         __verse_0x64488B5B_CustomMovementPlaneNormal           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCollisionComponent::SetCustomDegreeOfFreedomConstrain(class UVector3* __verse_0x64488B5B_CustomMovementPlaneNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setCustomDegreeOfFreedomConstrain");

	Params::CollisionComponent_SetCustomDegreeOfFreedomConstrain Parms{};

	Parms.__verse_0x64488B5B_CustomMovementPlaneNormal = __verse_0x64488B5B_CustomMovementPlaneNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setDegreeOfFreedomContraint
// (Native, Public, BlueprintCallable)
// Parameters:
// EDOFMovementMode                        __verse_0xC6FC7EEF_MovementMode                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCollisionComponent::SetDegreeOfFreedomContraint(EDOFMovementMode __verse_0xC6FC7EEF_MovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setDegreeOfFreedomContraint");

	Params::CollisionComponent_SetDegreeOfFreedomContraint Parms{};

	Parms.__verse_0xC6FC7EEF_MovementMode = __verse_0xC6FC7EEF_MovementMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.SetEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0xD50E43B9_InIsEnabled                         (Parm, NoDestructor)

void UCollisionComponent::SetEnabled(uint8 __verse_0xD50E43B9_InIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "SetEnabled");

	Params::CollisionComponent_SetEnabled Parms{};

	Parms.__verse_0xD50E43B9_InIsEnabled = __verse_0xD50E43B9_InIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setGravityEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0x322B83BC_EnableGravity                       (Parm, NoDestructor)

void UCollisionComponent::SetGravityEnabled(uint8 __verse_0x322B83BC_EnableGravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setGravityEnabled");

	Params::CollisionComponent_SetGravityEnabled Parms{};

	Parms.__verse_0x322B83BC_EnableGravity = __verse_0x322B83BC_EnableGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setMovable
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0xD261A0E8_IsMovable                           (Parm, NoDestructor)

void UCollisionComponent::SetMovable(uint8 __verse_0xD261A0E8_IsMovable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setMovable");

	Params::CollisionComponent_SetMovable Parms{};

	Parms.__verse_0xD261A0E8_IsMovable = __verse_0xD261A0E8_IsMovable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setSendHitEventsOnCollide
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0x9FB5B901_EnableHitEvents                     (Parm, NoDestructor)

void UCollisionComponent::SetSendHitEventsOnCollide(uint8 __verse_0x9FB5B901_EnableHitEvents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setSendHitEventsOnCollide");

	Params::CollisionComponent_SetSendHitEventsOnCollide Parms{};

	Parms.__verse_0x9FB5B901_EnableHitEvents = __verse_0x9FB5B901_EnableHitEvents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setSendOverlapEvents
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0xD2175A3C_EnableOverlapEvents                 (Parm, NoDestructor)

void UCollisionComponent::SetSendOverlapEvents(uint8 __verse_0xD2175A3C_EnableOverlapEvents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setSendOverlapEvents");

	Params::CollisionComponent_SetSendOverlapEvents Parms{};

	Parms.__verse_0xD2175A3C_EnableOverlapEvents = __verse_0xD2175A3C_EnableOverlapEvents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.CollisionComponent.setUseContinuousCollisionDetection
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0xD79DBFC5_UseCCD                              (Parm, NoDestructor)

void UCollisionComponent::SetUseContinuousCollisionDetection(uint8 __verse_0xD79DBFC5_UseCCD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionComponent", "setUseContinuousCollisionDetection");

	Params::CollisionComponent_SetUseContinuousCollisionDetection Parms{};

	Parms.__verse_0xD79DBFC5_UseCCD = __verse_0xD79DBFC5_UseCCD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitBeginOverlap.Update
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UContext_CollisionComponent_WaitBeginOverlap::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Context_CollisionComponent_WaitBeginOverlap", "Update");

	Params::Context_CollisionComponent_WaitBeginOverlap_Update Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitEndOverlap.Update
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UContext_CollisionComponent_WaitEndOverlap::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Context_CollisionComponent_WaitEndOverlap", "Update");

	Params::Context_CollisionComponent_WaitEndOverlap_Update Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Entity_Physics_CollisionComponent.Context_CollisionComponent_WaitHit.Update
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UContext_CollisionComponent_WaitHit::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Context_CollisionComponent_WaitHit", "Update");

	Params::Context_CollisionComponent_WaitHit_Update Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

