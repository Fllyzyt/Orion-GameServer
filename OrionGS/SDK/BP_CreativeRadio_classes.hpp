#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CreativeRadio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "EVisibleInGameState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CreativeRadio.BP_CreativeRadio_C
// 0x0040 (0x0C88 - 0x0C48)
class ABP_CreativeRadio_C final  : public ABuildingPropPlaygroundMusicPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreative_VisibleInGame_Component_C*    VisibleInGameComponent;                            // 0x0C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreative_Radio_AudioToMPC_C*           Creative_Radio_AudioToMPC;                         // 0x0C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RadioAttenuationDistance;                          // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeOverride;                                    // 0x0C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedVolumeMultiplier;                            // 0x0C78(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         CachedAttenuationSetting;                          // 0x0C7C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDriveVisualization;                          // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          CachedShouldDriveVisualization;                    // 0x0C81(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsMeshVisibleDuringMinigame;                       // 0x0C82(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CreativeRadio(int32 EntryPoint, TArray<class USceneComponent*>& K2Node_MakeArray_Array, bool CallFunc_IsDedicatedServer_ReturnValue);
	void OnWorldReady();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_0_AnyPropertyChangedDelegate__DelegateSignature();
	void ReceiveBeginPlay();
	void OnPropertyChanged(EVisibleInGameState Temp_byte_Variable, EVisibleInGameState Temp_byte_Variable_1, bool CallFunc_HasAuthority_ReturnValue, bool Temp_bool_Variable, EVisibleInGameState K2Node_Select_Default, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, class AFortVolumeManager* CallFunc_GetVolumeManager_OutVolumeManager, EVolumeValidityResult CallFunc_GetVolumeManager_OutIsValid, bool K2Node_SwitchEnum_CmpSuccess);
	void OnRep_CachedVolumeMultiplier(bool CallFunc_IsDedicatedServer_ReturnValue);
	void OnRep_CachedAttenuationSetting();
	void OnRep_CachedShouldDriveVisualization(bool CallFunc_IsDedicatedServer_ReturnValue);
	void SetAttenuationDistance(bool CallFunc_NotEqual_FloatFloat_ReturnValue);
	void UpdateCachedAttenuationSettings(bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);
	void PlaybackTypeUpgradePath(bool Temp_bool_Variable, const class FString& Temp_string_Variable, const class FString& Temp_string_Variable_1, class FString& Temp_string_Variable_2, TArray<class FString>& K2Node_MakeArray_Array, const TMap<class FString, class FString>& CallFunc_GetPropertyOverrides_CurrentOptions, bool CallFunc_GetPropertyOverrides_ReturnValue, const class FString& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, const class FString& K2Node_Select_Default, TMap<class FString, class FString>& K2Node_MakeMap_Map, bool CallFunc_SetPropertyOverrides_ReturnValue);
	void CheckMinigameStateOnPropertyChanged(bool CallFunc_IsValid_ReturnValue);

	class FText BlueprintGetInteractionString(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintCanInteract(class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionBeingAttempted, ETInteractionType InteractionType, bool InteractSuccess, bool CallFunc_IsValid_ReturnValue, class AController* CallFunc_GetController_ReturnValue, class AFortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue_1, class AFortVolume* CallFunc_CanPlayerCreateInCurrentVolume_OutCurrentVolume, bool CallFunc_CanPlayerCreateInCurrentVolume_ReturnValue, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_3, bool CallFunc_HasStarted_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CreativeRadio_C">();
	}
	static class ABP_CreativeRadio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CreativeRadio_C>();
	}
};
static_assert(alignof(ABP_CreativeRadio_C) == 0x000008, "Wrong alinment on ABP_CreativeRadio_C");
static_assert(sizeof(ABP_CreativeRadio_C) == 0x000C88, "Wrong size on ABP_CreativeRadio_C");
static_assert(offsetof(ABP_CreativeRadio_C, UberGraphFrame) == 0x000C48, "Member 'ABP_CreativeRadio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, VisibleInGameComponent) == 0x000C50, "Member 'ABP_CreativeRadio_C::VisibleInGameComponent' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, Creative_Radio_AudioToMPC) == 0x000C58, "Member 'ABP_CreativeRadio_C::Creative_Radio_AudioToMPC' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, FortMinigameProgress) == 0x000C60, "Member 'ABP_CreativeRadio_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, ToyOptionsComponent) == 0x000C68, "Member 'ABP_CreativeRadio_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, RadioAttenuationDistance) == 0x000C70, "Member 'ABP_CreativeRadio_C::RadioAttenuationDistance' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, VolumeOverride) == 0x000C74, "Member 'ABP_CreativeRadio_C::VolumeOverride' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedVolumeMultiplier) == 0x000C78, "Member 'ABP_CreativeRadio_C::CachedVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedAttenuationSetting) == 0x000C7C, "Member 'ABP_CreativeRadio_C::CachedAttenuationSetting' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, ShouldDriveVisualization) == 0x000C80, "Member 'ABP_CreativeRadio_C::ShouldDriveVisualization' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedShouldDriveVisualization) == 0x000C81, "Member 'ABP_CreativeRadio_C::CachedShouldDriveVisualization' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, IsMeshVisibleDuringMinigame) == 0x000C82, "Member 'ABP_CreativeRadio_C::IsMeshVisibleDuringMinigame' has a wrong offset!");

}

