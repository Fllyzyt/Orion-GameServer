#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyguardUI

#include "Basic.hpp"

#include "BodyguardRuntime_structs.hpp"


namespace SDK::Params
{

// Function BodyguardUI.BodyguardWidgetBase.HandleOnTeamVIPReassignment_BP
// 0x0008 (0x0008 - 0x0000)
struct BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP final 
{
public:
	class AFortPlayerStateAthena*                 NewVIPPlayerState;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP) == 0x000008, "Wrong alinment on BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP");
static_assert(sizeof(BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP) == 0x000008, "Wrong size on BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP");
static_assert(offsetof(BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP, NewVIPPlayerState) == 0x000000, "Member 'BodyguardWidgetBase_HandleOnTeamVIPReassignment_BP::NewVIPPlayerState' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.HandlePlayerRoleChange_BP
// 0x0001 (0x0001 - 0x0000)
struct BodyguardWidgetBase_HandlePlayerRoleChange_BP final 
{
public:
	EBodyguardPlayerRole                          NewPlayerRole;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_HandlePlayerRoleChange_BP) == 0x000001, "Wrong alinment on BodyguardWidgetBase_HandlePlayerRoleChange_BP");
static_assert(sizeof(BodyguardWidgetBase_HandlePlayerRoleChange_BP) == 0x000001, "Wrong size on BodyguardWidgetBase_HandlePlayerRoleChange_BP");
static_assert(offsetof(BodyguardWidgetBase_HandlePlayerRoleChange_BP, NewPlayerRole) == 0x000000, "Member 'BodyguardWidgetBase_HandlePlayerRoleChange_BP::NewPlayerRole' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.OnMutatorAvailable
// 0x0008 (0x0008 - 0x0000)
struct BodyguardWidgetBase_OnMutatorAvailable final 
{
public:
	class AFortGameplayMutator*                   MutatorActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_OnMutatorAvailable) == 0x000008, "Wrong alinment on BodyguardWidgetBase_OnMutatorAvailable");
static_assert(sizeof(BodyguardWidgetBase_OnMutatorAvailable) == 0x000008, "Wrong size on BodyguardWidgetBase_OnMutatorAvailable");
static_assert(offsetof(BodyguardWidgetBase_OnMutatorAvailable, MutatorActor) == 0x000000, "Member 'BodyguardWidgetBase_OnMutatorAvailable::MutatorActor' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.UpdateEnemyVIPCount_BP
// 0x0001 (0x0001 - 0x0000)
struct BodyguardWidgetBase_UpdateEnemyVIPCount_BP final 
{
public:
	uint8                                         EnemyVIPCount;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_UpdateEnemyVIPCount_BP) == 0x000001, "Wrong alinment on BodyguardWidgetBase_UpdateEnemyVIPCount_BP");
static_assert(sizeof(BodyguardWidgetBase_UpdateEnemyVIPCount_BP) == 0x000001, "Wrong size on BodyguardWidgetBase_UpdateEnemyVIPCount_BP");
static_assert(offsetof(BodyguardWidgetBase_UpdateEnemyVIPCount_BP, EnemyVIPCount) == 0x000000, "Member 'BodyguardWidgetBase_UpdateEnemyVIPCount_BP::EnemyVIPCount' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.GetBodyguardMutator
// 0x0008 (0x0008 - 0x0000)
struct BodyguardWidgetBase_GetBodyguardMutator final 
{
public:
	class AFortAthenaMutator_Bodyguard*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_GetBodyguardMutator) == 0x000008, "Wrong alinment on BodyguardWidgetBase_GetBodyguardMutator");
static_assert(sizeof(BodyguardWidgetBase_GetBodyguardMutator) == 0x000008, "Wrong size on BodyguardWidgetBase_GetBodyguardMutator");
static_assert(offsetof(BodyguardWidgetBase_GetBodyguardMutator, ReturnValue) == 0x000000, "Member 'BodyguardWidgetBase_GetBodyguardMutator::ReturnValue' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.GetOwningPlayerRole
// 0x0001 (0x0001 - 0x0000)
struct BodyguardWidgetBase_GetOwningPlayerRole final 
{
public:
	EBodyguardPlayerRole                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_GetOwningPlayerRole) == 0x000001, "Wrong alinment on BodyguardWidgetBase_GetOwningPlayerRole");
static_assert(sizeof(BodyguardWidgetBase_GetOwningPlayerRole) == 0x000001, "Wrong size on BodyguardWidgetBase_GetOwningPlayerRole");
static_assert(offsetof(BodyguardWidgetBase_GetOwningPlayerRole, ReturnValue) == 0x000000, "Member 'BodyguardWidgetBase_GetOwningPlayerRole::ReturnValue' has a wrong offset!");

// Function BodyguardUI.BodyguardWidgetBase.GetVIPPlayerStateForTeam
// 0x0010 (0x0010 - 0x0000)
struct BodyguardWidgetBase_GetVIPPlayerStateForTeam final 
{
public:
	uint8                                         TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_463C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardWidgetBase_GetVIPPlayerStateForTeam) == 0x000008, "Wrong alinment on BodyguardWidgetBase_GetVIPPlayerStateForTeam");
static_assert(sizeof(BodyguardWidgetBase_GetVIPPlayerStateForTeam) == 0x000010, "Wrong size on BodyguardWidgetBase_GetVIPPlayerStateForTeam");
static_assert(offsetof(BodyguardWidgetBase_GetVIPPlayerStateForTeam, TeamNum) == 0x000000, "Member 'BodyguardWidgetBase_GetVIPPlayerStateForTeam::TeamNum' has a wrong offset!");
static_assert(offsetof(BodyguardWidgetBase_GetVIPPlayerStateForTeam, ReturnValue) == 0x000008, "Member 'BodyguardWidgetBase_GetVIPPlayerStateForTeam::ReturnValue' has a wrong offset!");

// Function BodyguardUI.BodyguardPlayerInfoBase.IsViewingPlayerVIP
// 0x0001 (0x0001 - 0x0000)
struct BodyguardPlayerInfoBase_IsViewingPlayerVIP final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerInfoBase_IsViewingPlayerVIP) == 0x000001, "Wrong alinment on BodyguardPlayerInfoBase_IsViewingPlayerVIP");
static_assert(sizeof(BodyguardPlayerInfoBase_IsViewingPlayerVIP) == 0x000001, "Wrong size on BodyguardPlayerInfoBase_IsViewingPlayerVIP");
static_assert(offsetof(BodyguardPlayerInfoBase_IsViewingPlayerVIP, ReturnValue) == 0x000000, "Member 'BodyguardPlayerInfoBase_IsViewingPlayerVIP::ReturnValue' has a wrong offset!");

// Function BodyguardUI.BodyguardPlayerRoleRevealWidget.SetTeamVIPAvatarImage
// 0x0010 (0x0010 - 0x0000)
struct BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage final 
{
public:
	uint8                                         TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_463E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLazyImage*                         AvatarImageWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage) == 0x000008, "Wrong alinment on BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage");
static_assert(sizeof(BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage) == 0x000010, "Wrong size on BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage");
static_assert(offsetof(BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage, TeamNum) == 0x000000, "Member 'BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage::TeamNum' has a wrong offset!");
static_assert(offsetof(BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage, AvatarImageWidget) == 0x000008, "Member 'BodyguardPlayerRoleRevealWidget_SetTeamVIPAvatarImage::AvatarImageWidget' has a wrong offset!");

// Function BodyguardUI.BodyguardRumbleHUD.UpdatedVIPCount_BP
// 0x0002 (0x0002 - 0x0000)
struct BodyguardRumbleHUD_UpdatedVIPCount_BP final 
{
public:
	uint8                                         EnemyVIPs;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FriendlyVIPs;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BodyguardRumbleHUD_UpdatedVIPCount_BP) == 0x000001, "Wrong alinment on BodyguardRumbleHUD_UpdatedVIPCount_BP");
static_assert(sizeof(BodyguardRumbleHUD_UpdatedVIPCount_BP) == 0x000002, "Wrong size on BodyguardRumbleHUD_UpdatedVIPCount_BP");
static_assert(offsetof(BodyguardRumbleHUD_UpdatedVIPCount_BP, EnemyVIPs) == 0x000000, "Member 'BodyguardRumbleHUD_UpdatedVIPCount_BP::EnemyVIPs' has a wrong offset!");
static_assert(offsetof(BodyguardRumbleHUD_UpdatedVIPCount_BP, FriendlyVIPs) == 0x000001, "Member 'BodyguardRumbleHUD_UpdatedVIPCount_BP::FriendlyVIPs' has a wrong offset!");

}

