#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemOnPawnPreview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ItemOnPawnPreview.ItemOnPawnPreview_C
// 0x00C0 (0x05A0 - 0x04E0)
class AItemOnPawnPreview_C final  : public AFortItemPreviewOnPawnActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkyLightComponent*                     SkyLightPC;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightLowMobile;                                 // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightMobile;                            // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight_StandaloneForSwitch;                      // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight5;                                         // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight6;                                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLigh3;                                          // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight2;                                         // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    BounceRear1;                                       // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLowerRight1;                                    // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLeft1;                                          // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimTopRight1;                                      // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimBottomLeft1;                                    // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Bounce1;                                           // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightTransform;                                    // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sample_Mesh;                                       // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysOn;                                          // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsActive;                                          // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugConstructionLighting;                         // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7998[0x5];                                     // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ObscuringLoopEmitter;                              // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ToonLightRotatio;                                  // 0x0588(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SwitchErebusLighting(bool Visibility, const TArray<class USpotLightComponent*>& L_lights);
	void SetFloorEnabled(bool Show_Floor, bool CallFunc_Not_PreBool_ReturnValue);
	void LightControl(bool Active, bool CallFunc_IsMobileGame_ReturnValue, class UFortGameUserSettings* CallFunc_GetFortGameUserSettings_ReturnValue, bool CallFunc_IsErebus_ReturnValue, bool CallFunc_IsInPerformanceMode_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, class UGameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int32 CallFunc_GetShadowQuality_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_2);
	void SwitchPCLighting(bool Visibility);
	void SwitchMobileLighting(bool NewParam);
	void OnPreviewVisualsSpawned();
	void UpdateSettings();
	void OnSetFloorMaterial(class UMaterialInterface* InMaterialInstance);
	void OnAllLODStreamingComplete();
	void OnCurrentVisualsCleanedUp();
	void OnUpdateFloorMaterial(bool bEnableAutotestBackground);
	void ExecuteUbergraph_ItemOnPawnPreview(int32 EntryPoint, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, class UGameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int32 CallFunc_GetShadowQuality_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_A_Execution_Happened_Variable, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, const struct FVector& CallFunc_GetPawnLocation_ReturnValue, class UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, class UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue_1, class UMaterialInterface* K2Node_Event_InMaterialInstance, bool CallFunc_IsErebus_ReturnValue, class UAthenaSkyDiveContrailItemDefinition* K2Node_DynamicCast_AsAthena_Sky_Dive_Contrail_Item_Definition, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_AttachToComponent_ReturnValue, const struct FVector& CallFunc_GetActorForwardVector_ReturnValue, bool Temp_bool_B_Execution_Happened_Variable, const struct FVector& CallFunc_GreaterGreater_VectorRotator_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const struct FLinearColor& CallFunc_Conv_VectorToLinearColor_ReturnValue, bool CallFunc_IsMobileGame_ReturnValue, class UFortGameUserSettings* CallFunc_GetFortGameUserSettings_ReturnValue, bool K2Node_Event_bEnableAutotestBackground, bool CallFunc_IsInPerformanceMode_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemOnPawnPreview_C">();
	}
	static class AItemOnPawnPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemOnPawnPreview_C>();
	}
};
static_assert(alignof(AItemOnPawnPreview_C) == 0x000010, "Wrong alinment on AItemOnPawnPreview_C");
static_assert(sizeof(AItemOnPawnPreview_C) == 0x0005A0, "Wrong size on AItemOnPawnPreview_C");
static_assert(offsetof(AItemOnPawnPreview_C, UberGraphFrame) == 0x0004E0, "Member 'AItemOnPawnPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, SkyLightPC) == 0x0004E8, "Member 'AItemOnPawnPreview_C::SkyLightPC' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, Arrow) == 0x0004F0, "Member 'AItemOnPawnPreview_C::Arrow' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, SkyLightLowMobile) == 0x0004F8, "Member 'AItemOnPawnPreview_C::SkyLightLowMobile' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, DirectionalLightMobile) == 0x000500, "Member 'AItemOnPawnPreview_C::DirectionalLightMobile' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, KeyLight_StandaloneForSwitch) == 0x000508, "Member 'AItemOnPawnPreview_C::KeyLight_StandaloneForSwitch' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, KeyLight5) == 0x000510, "Member 'AItemOnPawnPreview_C::KeyLight5' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, KeyLight6) == 0x000518, "Member 'AItemOnPawnPreview_C::KeyLight6' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, KeyLigh3) == 0x000520, "Member 'AItemOnPawnPreview_C::KeyLigh3' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, KeyLight2) == 0x000528, "Member 'AItemOnPawnPreview_C::KeyLight2' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, BounceRear1) == 0x000530, "Member 'AItemOnPawnPreview_C::BounceRear1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, RimLowerRight1) == 0x000538, "Member 'AItemOnPawnPreview_C::RimLowerRight1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, RimLeft1) == 0x000540, "Member 'AItemOnPawnPreview_C::RimLeft1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, RimTopRight1) == 0x000548, "Member 'AItemOnPawnPreview_C::RimTopRight1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, RimBottomLeft1) == 0x000550, "Member 'AItemOnPawnPreview_C::RimBottomLeft1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, Bounce1) == 0x000558, "Member 'AItemOnPawnPreview_C::Bounce1' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, LightTransform) == 0x000560, "Member 'AItemOnPawnPreview_C::LightTransform' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, Plane) == 0x000568, "Member 'AItemOnPawnPreview_C::Plane' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, Sample_Mesh) == 0x000570, "Member 'AItemOnPawnPreview_C::Sample_Mesh' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, AlwaysOn) == 0x000578, "Member 'AItemOnPawnPreview_C::AlwaysOn' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, IsActive) == 0x000579, "Member 'AItemOnPawnPreview_C::IsActive' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, DebugConstructionLighting) == 0x00057A, "Member 'AItemOnPawnPreview_C::DebugConstructionLighting' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, ObscuringLoopEmitter) == 0x000580, "Member 'AItemOnPawnPreview_C::ObscuringLoopEmitter' has a wrong offset!");
static_assert(offsetof(AItemOnPawnPreview_C, ToonLightRotatio) == 0x000588, "Member 'AItemOnPawnPreview_C::ToonLightRotatio' has a wrong offset!");

}

