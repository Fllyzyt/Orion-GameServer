#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwimmingAnimBP

#include "Basic.hpp"

#include "SwimmingAnimBP_classes.hpp"
#include "SwimmingAnimBP_parameters.hpp"


namespace SDK
{

// Function SwimmingAnimBP.SwimmingAnimBP_C.ExecuteUbergraph_SwimmingAnimBP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CallFunc_GetRelevantAnimTime_ReturnValue               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_Greater_FloatFloat_ReturnValue                (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Temp_bool_Has_Been_Initd_Variable                      (ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CallFunc_GetRelevantAnimTime_ReturnValue_1             (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_Greater_FloatFloat_ReturnValue_1              (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Temp_bool_IsClosed_Variable                            (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable(ZeroConstructor, IsPlainOldData, NoDestructor)

void USwimmingAnimBP_C::ExecuteUbergraph_SwimmingAnimBP(int32 EntryPoint, float CallFunc_GetRelevantAnimTime_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, float CallFunc_GetRelevantAnimTime_ReturnValue_1, bool CallFunc_Greater_FloatFloat_ReturnValue_1, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "ExecuteUbergraph_SwimmingAnimBP");

	Params::SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP Parms{};

	Parms.EntryPoint = EntryPoint;
	Parms.CallFunc_GetRelevantAnimTime_ReturnValue = CallFunc_GetRelevantAnimTime_ReturnValue;
	Parms.CallFunc_Greater_FloatFloat_ReturnValue = CallFunc_Greater_FloatFloat_ReturnValue;
	Parms.Temp_bool_Has_Been_Initd_Variable = Temp_bool_Has_Been_Initd_Variable;
	Parms.CallFunc_GetRelevantAnimTime_ReturnValue_1 = CallFunc_GetRelevantAnimTime_ReturnValue_1;
	Parms.CallFunc_Greater_FloatFloat_ReturnValue_1 = CallFunc_Greater_FloatFloat_ReturnValue_1;
	Parms.Temp_bool_IsClosed_Variable = Temp_bool_IsClosed_Variable;
	Parms.Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable = Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimMovementAccelAdditive_Exited_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimMovementAccelAdditive_Exited_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimMovementAccelAdditive_Exited_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimStartAdditive_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimStartAdditive_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimStartAdditive_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintSlow_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintSlow_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintSlow_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprint_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprint_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprint_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintStart_Exited_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintStart_Exited_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintStart_Exited_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintStart_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintStart_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintStart_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_E6B49F01423E469AF176989D25F6BA2A
// (BlueprintEvent)

void USwimmingAnimBP_C::EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_E6B49F01423E469AF176989D25F6BA2A()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_E6B49F01423E469AF176989D25F6BA2A");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_5830B69443C9B79B5F980CAE5DEC8E36
// (BlueprintEvent)

void USwimmingAnimBP_C::EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_5830B69443C9B79B5F980CAE5DEC8E36()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "EvaluateGraphExposedInputs_ExecuteUbergraph_SwimmingAnimBP_AnimGraphNode_TransitionResult_5830B69443C9B79B5F980CAE5DEC8E36");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        Param_AnimGraph                                        (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::AnimGraph(struct FPoseLink* Param_AnimGraph)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimGraph");

	Params::SwimmingAnimBP_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_AnimGraph != nullptr)
		*Param_AnimGraph = Parms.Param_AnimGraph;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        MainPlayerAnimBP                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingLayer                                    (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingLayer(const struct FPoseLink& MainPlayerAnimBP, struct FPoseLink* Param_SwimmingLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingLayer");

	Params::SwimmingAnimBP_C_SwimmingLayer Parms{};

	Parms.MainPlayerAnimBP = std::move(MainPlayerAnimBP);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingLayer != nullptr)
		*Param_SwimmingLayer = Parms.Param_SwimmingLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingSprintLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughSwimmingSprint                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    Param_IsHidingInPropLayer                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPoseLink                        Param_SwimmingSprintLayer                              (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingSprintLayer(const struct FPoseLink& PassThroughSwimmingSprint, bool Param_IsHidingInPropLayer, struct FPoseLink* Param_SwimmingSprintLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingSprintLayer");

	Params::SwimmingAnimBP_C_SwimmingSprintLayer Parms{};

	Parms.PassThroughSwimmingSprint = std::move(PassThroughSwimmingSprint);
	Parms.Param_IsHidingInPropLayer = Param_IsHidingInPropLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingSprintLayer != nullptr)
		*Param_SwimmingSprintLayer = Parms.Param_SwimmingSprintLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingMovementAdditiveLayerPose
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughSwimmingMovementAdditive                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingMovementAdditiveLayerPose                (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingMovementAdditiveLayerPose(const struct FPoseLink& PassThroughSwimmingMovementAdditive, struct FPoseLink* Param_SwimmingMovementAdditiveLayerPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingMovementAdditiveLayerPose");

	Params::SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose Parms{};

	Parms.PassThroughSwimmingMovementAdditive = std::move(PassThroughSwimmingMovementAdditive);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingMovementAdditiveLayerPose != nullptr)
		*Param_SwimmingMovementAdditiveLayerPose = Parms.Param_SwimmingMovementAdditiveLayerPose;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingUpperBodyPoseTargetingLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughSwimmingUpperBodyPoseTargeting              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingUpperBodyPoseTargetingLayer              (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingUpperBodyPoseTargetingLayer(const struct FPoseLink& PassThroughSwimmingUpperBodyPoseTargeting, struct FPoseLink* Param_SwimmingUpperBodyPoseTargetingLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingUpperBodyPoseTargetingLayer");

	Params::SwimmingAnimBP_C_SwimmingUpperBodyPoseTargetingLayer Parms{};

	Parms.PassThroughSwimmingUpperBodyPoseTargeting = std::move(PassThroughSwimmingUpperBodyPoseTargeting);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingUpperBodyPoseTargetingLayer != nullptr)
		*Param_SwimmingUpperBodyPoseTargetingLayer = Parms.Param_SwimmingUpperBodyPoseTargetingLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingUpperBodyPoseNonTargetingLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughSwimmingUpperBodyPoseNonTargeting           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingUpperBodyPoseNonTargetingLayer           (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingUpperBodyPoseNonTargetingLayer(const struct FPoseLink& PassThroughSwimmingUpperBodyPoseNonTargeting, struct FPoseLink* Param_SwimmingUpperBodyPoseNonTargetingLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingUpperBodyPoseNonTargetingLayer");

	Params::SwimmingAnimBP_C_SwimmingUpperBodyPoseNonTargetingLayer Parms{};

	Parms.PassThroughSwimmingUpperBodyPoseNonTargeting = std::move(PassThroughSwimmingUpperBodyPoseNonTargeting);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingUpperBodyPoseNonTargetingLayer != nullptr)
		*Param_SwimmingUpperBodyPoseNonTargetingLayer = Parms.Param_SwimmingUpperBodyPoseNonTargetingLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingLowerBodyLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        UpperBody_Cache                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        PreUpperBodySlot_Cache                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        PassThroughSwimmingLowerBody                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingLowerBodyLayer                           (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingLowerBodyLayer(const struct FPoseLink& UpperBody_Cache, const struct FPoseLink& PreUpperBodySlot_Cache, const struct FPoseLink& PassThroughSwimmingLowerBody, struct FPoseLink* Param_SwimmingLowerBodyLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingLowerBodyLayer");

	Params::SwimmingAnimBP_C_SwimmingLowerBodyLayer Parms{};

	Parms.UpperBody_Cache = std::move(UpperBody_Cache);
	Parms.PreUpperBodySlot_Cache = std::move(PreUpperBodySlot_Cache);
	Parms.PassThroughSwimmingLowerBody = std::move(PassThroughSwimmingLowerBody);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingLowerBodyLayer != nullptr)
		*Param_SwimmingLowerBodyLayer = Parms.Param_SwimmingLowerBodyLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingAdditiveLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        IdleAdditive_Cache                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        MovementAdditiveLayerPose_Cache                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        FullBody                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   Param_PlayMeleeAttackAOLayer                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_DisableArmsHeadAdditiveCurveAlphaLayer           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_DisableIKRootAdditiveCurveAlphaLayer             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_LocomotionAdditiveAlphaLayer                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_MainInstanceAdditiveLayerAlpha                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        UpperAndLowerBody_Cache                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        SprintingPose_PostMask_Cache                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingAdditiveLayer                            (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingAdditiveLayer(const struct FPoseLink& IdleAdditive_Cache, const struct FPoseLink& MovementAdditiveLayerPose_Cache, const struct FPoseLink& FullBody, float Param_PlayMeleeAttackAOLayer, float Param_DisableArmsHeadAdditiveCurveAlphaLayer, float Param_DisableIKRootAdditiveCurveAlphaLayer, float Param_LocomotionAdditiveAlphaLayer, float Param_MainInstanceAdditiveLayerAlpha, const struct FPoseLink& UpperAndLowerBody_Cache, const struct FPoseLink& SprintingPose_PostMask_Cache, struct FPoseLink* Param_SwimmingAdditiveLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingAdditiveLayer");

	Params::SwimmingAnimBP_C_SwimmingAdditiveLayer Parms{};

	Parms.IdleAdditive_Cache = std::move(IdleAdditive_Cache);
	Parms.MovementAdditiveLayerPose_Cache = std::move(MovementAdditiveLayerPose_Cache);
	Parms.FullBody = std::move(FullBody);
	Parms.Param_PlayMeleeAttackAOLayer = Param_PlayMeleeAttackAOLayer;
	Parms.Param_DisableArmsHeadAdditiveCurveAlphaLayer = Param_DisableArmsHeadAdditiveCurveAlphaLayer;
	Parms.Param_DisableIKRootAdditiveCurveAlphaLayer = Param_DisableIKRootAdditiveCurveAlphaLayer;
	Parms.Param_LocomotionAdditiveAlphaLayer = Param_LocomotionAdditiveAlphaLayer;
	Parms.Param_MainInstanceAdditiveLayerAlpha = Param_MainInstanceAdditiveLayerAlpha;
	Parms.UpperAndLowerBody_Cache = std::move(UpperAndLowerBody_Cache);
	Parms.SprintingPose_PostMask_Cache = std::move(SprintingPose_PostMask_Cache);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingAdditiveLayer != nullptr)
		*Param_SwimmingAdditiveLayer = Parms.Param_SwimmingAdditiveLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingFullBodyAdditiveLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughFullBodyAdditive                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Param_SwimmingFullBodyAdditiveLayer                    (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingFullBodyAdditiveLayer(const struct FPoseLink& PassThroughFullBodyAdditive, struct FPoseLink* Param_SwimmingFullBodyAdditiveLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingFullBodyAdditiveLayer");

	Params::SwimmingAnimBP_C_SwimmingFullBodyAdditiveLayer Parms{};

	Parms.PassThroughFullBodyAdditive = std::move(PassThroughFullBodyAdditive);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingFullBodyAdditiveLayer != nullptr)
		*Param_SwimmingFullBodyAdditiveLayer = Parms.Param_SwimmingFullBodyAdditiveLayer;
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingDiveJumpingLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        PassThroughSwimmingDiveJumping                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    Param_IsHidingInPropLayer2                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param_MainInstanceDiveJumpLayerAlpha                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortPlayerAnimBodyType                 Param_AnimBodyTypePassThrough                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        Param_SwimmingDiveJumpingLayer                         (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::SwimmingDiveJumpingLayer(const struct FPoseLink& PassThroughSwimmingDiveJumping, bool Param_IsHidingInPropLayer2, float Param_MainInstanceDiveJumpLayerAlpha, EFortPlayerAnimBodyType Param_AnimBodyTypePassThrough, struct FPoseLink* Param_SwimmingDiveJumpingLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "SwimmingDiveJumpingLayer");

	Params::SwimmingAnimBP_C_SwimmingDiveJumpingLayer Parms{};

	Parms.PassThroughSwimmingDiveJumping = std::move(PassThroughSwimmingDiveJumping);
	Parms.Param_IsHidingInPropLayer2 = Param_IsHidingInPropLayer2;
	Parms.Param_MainInstanceDiveJumpLayerAlpha = Param_MainInstanceDiveJumpLayerAlpha;
	Parms.Param_AnimBodyTypePassThrough = Param_AnimBodyTypePassThrough;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SwimmingDiveJumpingLayer != nullptr)
		*Param_SwimmingDiveJumpingLayer = Parms.Param_SwimmingDiveJumpingLayer;
}

}

