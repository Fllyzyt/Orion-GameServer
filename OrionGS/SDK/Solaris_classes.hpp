#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Solaris.SolarisMathLibrary_String
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_String final  : public UObject
{
public:
	static bool Equal(const class FString& Lhs, const class FString& Rhs);
	static bool Not_equal(const class FString& Lhs, const class FString& Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_String">();
	}
	static class USolarisMathLibrary_String* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_String>();
	}
};
static_assert(alignof(USolarisMathLibrary_String) == 0x000008, "Wrong alinment on USolarisMathLibrary_String");
static_assert(sizeof(USolarisMathLibrary_String) == 0x000028, "Wrong size on USolarisMathLibrary_String");

// Class Solaris.SolarisArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisArrayLibrary final  : public UObject
{
public:
	static int32 Add(TArray<int32>& Array, int32& New_item);
	static TArray<int32> Concat(TArray<int32>& Lhs, TArray<int32>& Rhs);
	static bool Contains(TArray<int32>& Array, int32& Search_item);
	static void Empty(TArray<int32>& Array);
	static bool IsValidIndex(TArray<int32>& Array, int32 Param_Index);
	static void Move(TArray<int32>& Target, TArray<int32>& Source);
	static int32 Num(TArray<int32>& Array);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisArrayLibrary">();
	}
	static class USolarisArrayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisArrayLibrary>();
	}
};
static_assert(alignof(USolarisArrayLibrary) == 0x000008, "Wrong alinment on USolarisArrayLibrary");
static_assert(sizeof(USolarisArrayLibrary) == 0x000028, "Wrong size on USolarisArrayLibrary");

// Class Solaris.SolarisCoroutineLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisCoroutineLibrary final  : public UObject
{
public:
	static void Abort(class UObject* Context, bool bAbortCallers);
	static class UObject* AllocateFinal(class UClass* Type, class UObject* Caller, int32 CallerResumeState);
	static class UObject* AllocateVirtual(class FName ContextName, class UObject* Caller, int32 CallerResumeState, class UObject* OwnerInstance);
	static void Deallocate(class UObject* Context);
	static int32 GetState(class UObject* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisCoroutineLibrary">();
	}
	static class USolarisCoroutineLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisCoroutineLibrary>();
	}
};
static_assert(alignof(USolarisCoroutineLibrary) == 0x000008, "Wrong alinment on USolarisCoroutineLibrary");
static_assert(sizeof(USolarisCoroutineLibrary) == 0x000028, "Wrong size on USolarisCoroutineLibrary");

// Class Solaris.SolarisGeneratedClass
// 0x00B8 (0x02E8 - 0x0230)
class USolarisGeneratedClass final  : public UClass
{
public:
	uint32                                        SolClassFlags;                                     // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DB5[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UClass*>              CoroClasses;                                       // 0x0238(0x0050)(NativeAccessSpecifierPublic)
	TArray<class UClass*>                         CoroBaseClasses;                                   // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           TraitClasses;                                      // 0x0298(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisGeneratedClass">();
	}
	static class USolarisGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGeneratedClass>();
	}
};
static_assert(alignof(USolarisGeneratedClass) == 0x000008, "Wrong alinment on USolarisGeneratedClass");
static_assert(sizeof(USolarisGeneratedClass) == 0x0002E8, "Wrong size on USolarisGeneratedClass");
static_assert(offsetof(USolarisGeneratedClass, SolClassFlags) == 0x000230, "Member 'USolarisGeneratedClass::SolClassFlags' has a wrong offset!");
static_assert(offsetof(USolarisGeneratedClass, CoroClasses) == 0x000238, "Member 'USolarisGeneratedClass::CoroClasses' has a wrong offset!");
static_assert(offsetof(USolarisGeneratedClass, CoroBaseClasses) == 0x000288, "Member 'USolarisGeneratedClass::CoroBaseClasses' has a wrong offset!");
static_assert(offsetof(USolarisGeneratedClass, TraitClasses) == 0x000298, "Member 'USolarisGeneratedClass::TraitClasses' has a wrong offset!");

// Class Solaris.SolarisGeneratedEnum
// 0x0000 (0x0060 - 0x0060)
class USolarisGeneratedEnum final  : public UEnum
{
public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisGeneratedEnum">();
	}
	static class USolarisGeneratedEnum* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGeneratedEnum>();
	}
};
static_assert(alignof(USolarisGeneratedEnum) == 0x000008, "Wrong alinment on USolarisGeneratedEnum");
static_assert(sizeof(USolarisGeneratedEnum) == 0x000060, "Wrong size on USolarisGeneratedEnum");

// Class Solaris.SolarisMathLibrary_Bool
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Bool final  : public UObject
{
public:
	static bool Equal(bool Lhs, bool Rhs);
	static bool Logical_xor(bool Lhs, bool Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_Bool">();
	}
	static class USolarisMathLibrary_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Bool>();
	}
};
static_assert(alignof(USolarisMathLibrary_Bool) == 0x000008, "Wrong alinment on USolarisMathLibrary_Bool");
static_assert(sizeof(USolarisMathLibrary_Bool) == 0x000028, "Wrong size on USolarisMathLibrary_Bool");

// Class Solaris.SolarisMathLibrary_Int
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Int final  : public UObject
{
public:
	static int32 Abs(int32 Value);
	static int32 Add(int32 Lhs, int32 Rhs);
	static int32 Add_equals(int32* Lhs, int32 Rhs);
	static int32 Divide(int32 Lhs, int32 Rhs);
	static int32 Divide_equals(int32* Lhs, int32 Rhs);
	static bool Equal(int32 Lhs, int32 Rhs);
	static bool Greater(int32 Lhs, int32 Rhs);
	static bool Greater_equal(int32 Lhs, int32 Rhs);
	static bool Less(int32 Lhs, int32 Rhs);
	static bool Less_equal(int32 Lhs, int32 Rhs);
	static int32 Max(int32 Lhs, int32 Rhs);
	static int32 Min(int32 Lhs, int32 Rhs);
	static int32 Multiply(int32 Lhs, int32 Rhs);
	static int32 Multiply_equals(int32* Lhs, int32 Rhs);
	static int32 Negate(int32 Value);
	static bool Not_equal(int32 Lhs, int32 Rhs);
	static int32 Subtract(int32 Lhs, int32 Rhs);
	static int32 Subtract_equals(int32* Lhs, int32 Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_Int">();
	}
	static class USolarisMathLibrary_Int* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Int>();
	}
};
static_assert(alignof(USolarisMathLibrary_Int) == 0x000008, "Wrong alinment on USolarisMathLibrary_Int");
static_assert(sizeof(USolarisMathLibrary_Int) == 0x000028, "Wrong size on USolarisMathLibrary_Int");

// Class Solaris.SolarisMathLibrary_Float
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Float final  : public UObject
{
public:
	static float Abs(float Value);
	static float Add(float Lhs, float Rhs);
	static float Add_equals(float* Lhs, float Rhs);
	static float Assign(float* Lhs, float Rhs);
	static float Divide(float Lhs, float Rhs);
	static float Divide_equals(float* Lhs, float Rhs);
	static bool Equal(float Lhs, float Rhs);
	static bool Greater(float Lhs, float Rhs);
	static bool Greater_equal(float Lhs, float Rhs);
	static bool Less(float Lhs, float Rhs);
	static bool Less_equal(float Lhs, float Rhs);
	static float Max(float Lhs, float Rhs);
	static float Min(float Lhs, float Rhs);
	static float Multiply(float Lhs, float Rhs);
	static float Multiply_equals(float* Lhs, float Rhs);
	static float Negate(float Value);
	static bool Not_equal(float Lhs, float Rhs);
	static float Subtract(float Lhs, float Rhs);
	static float Subtract_equals(float* Lhs, float Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_Float">();
	}
	static class USolarisMathLibrary_Float* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Float>();
	}
};
static_assert(alignof(USolarisMathLibrary_Float) == 0x000008, "Wrong alinment on USolarisMathLibrary_Float");
static_assert(sizeof(USolarisMathLibrary_Float) == 0x000028, "Wrong size on USolarisMathLibrary_Float");

// Class Solaris.SolarisMathLibrary_Object
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Object final  : public UObject
{
public:
	static bool Equal(class UObject* Lhs, class UObject* Rhs);
	static bool Not_equal(class UObject* Lhs, class UObject* Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_Object">();
	}
	static class USolarisMathLibrary_Object* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Object>();
	}
};
static_assert(alignof(USolarisMathLibrary_Object) == 0x000008, "Wrong alinment on USolarisMathLibrary_Object");
static_assert(sizeof(USolarisMathLibrary_Object) == 0x000028, "Wrong size on USolarisMathLibrary_Object");

// Class Solaris.SolarisMathLibrary_Enum
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Enum final  : public UObject
{
public:
	static bool Equal(uint8 Lhs, uint8 Rhs);
	static bool Not_equal(uint8 Lhs, uint8 Rhs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisMathLibrary_Enum">();
	}
	static class USolarisMathLibrary_Enum* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Enum>();
	}
};
static_assert(alignof(USolarisMathLibrary_Enum) == 0x000008, "Wrong alinment on USolarisMathLibrary_Enum");
static_assert(sizeof(USolarisMathLibrary_Enum) == 0x000028, "Wrong size on USolarisMathLibrary_Enum");

// Class Solaris.SolarisGameSettings
// 0x0018 (0x0040 - 0x0028)
class USolarisGameSettings final  : public UObject
{
public:
	TArray<class FString>                         Blacklist;                                         // 0x0028(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAllowedSize;                                    // 0x0038(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DC4[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisGameSettings">();
	}
	static class USolarisGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGameSettings>();
	}
};
static_assert(alignof(USolarisGameSettings) == 0x000008, "Wrong alinment on USolarisGameSettings");
static_assert(sizeof(USolarisGameSettings) == 0x000040, "Wrong size on USolarisGameSettings");
static_assert(offsetof(USolarisGameSettings, Blacklist) == 0x000028, "Member 'USolarisGameSettings::Blacklist' has a wrong offset!");
static_assert(offsetof(USolarisGameSettings, MaxAllowedSize) == 0x000038, "Member 'USolarisGameSettings::MaxAllowedSize' has a wrong offset!");

// Class Solaris.SolarisUtilLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisUtilLibrary final  : public UObject
{
public:
	static void CallDelegate();
	static class UClass* GetClass(class UObject* Object);
	static int32 GetOptionalValue(class UObject* Property, int32 Optional);
	static bool HasTrait(class UObject* Object, class UClass* TraitClass);
	static class UObject* InstantiateObject(class UClass* Type);
	static bool IsNonNullObject(class UObject* Object);
	static bool IsOptionalSet(class UObject* Property, int32 Optional);
	static bool MakeOptionalFromValue(class UObject* Property, int32 Value);
	static int32 MakeUnsetOptional(class UObject* Property);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarisUtilLibrary">();
	}
	static class USolarisUtilLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisUtilLibrary>();
	}
};
static_assert(alignof(USolarisUtilLibrary) == 0x000008, "Wrong alinment on USolarisUtilLibrary");
static_assert(sizeof(USolarisUtilLibrary) == 0x000028, "Wrong size on USolarisUtilLibrary");

}

