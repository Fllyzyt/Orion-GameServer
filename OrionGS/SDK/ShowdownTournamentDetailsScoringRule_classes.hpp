#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShowdownTournamentDetailsScoringRule

#include "Basic.hpp"

#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ShowdownTournamentDetailsScoringRule.ShowdownTournamentDetailsScoringRule_C
// 0x0030 (0x02B8 - 0x0288)
class UShowdownTournamentDetailsScoringRule_C final  : public UCommonUserWidget
{
public:
	class UCommonBorder*                          CommonBorder_BG;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          CommonBorder_TextContainer;                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       RuleIcon;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       RuleNameText;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       RuleValueText;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDataTable*                             ScoringRuleDisplayData;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetData(const struct FFortShowdownScoringRuleInfo& ScoreRule, const struct FFortTournamentDisplayInfo& TournamentDisplayInfo, const struct FLinearColor& Temp_struct_Variable, const struct FLinearColor& Temp_struct_Variable_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, bool CallFunc_EqualEqual_IntInt_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, class FText Temp_text_Variable, const struct FLinearColor& K2Node_Select_Default, bool Temp_bool_Variable_1, const struct FFortShowdownScoringRuleDisplayInfo& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, class FText CallFunc_Format_ReturnValue, class FText K2Node_Select_Default_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShowdownTournamentDetailsScoringRule_C">();
	}
	static class UShowdownTournamentDetailsScoringRule_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShowdownTournamentDetailsScoringRule_C>();
	}
};
static_assert(alignof(UShowdownTournamentDetailsScoringRule_C) == 0x000008, "Wrong alinment on UShowdownTournamentDetailsScoringRule_C");
static_assert(sizeof(UShowdownTournamentDetailsScoringRule_C) == 0x0002B8, "Wrong size on UShowdownTournamentDetailsScoringRule_C");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, CommonBorder_BG) == 0x000288, "Member 'UShowdownTournamentDetailsScoringRule_C::CommonBorder_BG' has a wrong offset!");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, CommonBorder_TextContainer) == 0x000290, "Member 'UShowdownTournamentDetailsScoringRule_C::CommonBorder_TextContainer' has a wrong offset!");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, RuleIcon) == 0x000298, "Member 'UShowdownTournamentDetailsScoringRule_C::RuleIcon' has a wrong offset!");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, RuleNameText) == 0x0002A0, "Member 'UShowdownTournamentDetailsScoringRule_C::RuleNameText' has a wrong offset!");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, RuleValueText) == 0x0002A8, "Member 'UShowdownTournamentDetailsScoringRule_C::RuleValueText' has a wrong offset!");
static_assert(offsetof(UShowdownTournamentDetailsScoringRule_C, ScoringRuleDisplayData) == 0x0002B0, "Member 'UShowdownTournamentDetailsScoringRule_C::ScoringRuleDisplayData' has a wrong offset!");

}

