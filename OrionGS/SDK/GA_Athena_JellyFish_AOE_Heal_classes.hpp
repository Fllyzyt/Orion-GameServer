#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_JellyFish_AOE_Heal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_JellyFish_AOE_Heal.GA_Athena_JellyFish_AOE_Heal_C
// 0x0130 (0x0BE8 - 0x0AB8)
class UGA_Athena_JellyFish_AOE_Heal_C final  : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsHealth;                                       // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasHealthCap;                                      // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_729F[0x2];                                     // 0x0ACA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthHealAmount;                                  // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerDuration;                                   // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0AD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72A0[0x3];                                     // 0x0AD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemIDToHolster;                                   // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_PotionConsumed;                                 // 0x0AE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_EffectToApply;                                  // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsShields;                                      // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasShieldCap;                                      // 0x0AF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72A1[0x2];                                     // 0x0AF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShieldHealAmount;                                  // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShieldCap;                                     // 0x0AF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ShieldAmount;                                  // 0x0B20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthCap;                                     // 0x0B48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthAmount;                                  // 0x0B70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tags_FailedResponse;                               // 0x0B98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreCalcsForEffectApplication;                   // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AlwaysActivate;                                    // 0x0BB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72A2[0x2];                                     // 0x0BBA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EquippingCue;                                      // 0x0BBC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OverHealing;                                       // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsEffective;                                 // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72A3[0x7];                                     // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplodeCue;                                        // 0x0BD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        TargetPawn;                                        // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Athena_JellyFish_AOE_Heal(int32 EntryPoint, bool CallFunc_K2_CommitAbility_ReturnValue, struct FGameplayAbilityTargetDataHandle& K2Node_CustomEvent_TargetData_1, const struct FGameplayTag& K2Node_CustomEvent_ApplicationTag_1, TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate, struct FGameplayAbilityTargetDataHandle& K2Node_CustomEvent_TargetData, const struct FGameplayTag& K2Node_CustomEvent_ApplicationTag, TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_1, const struct FGameplayTag& Temp_struct_Variable, const struct FGameplayAbilityTargetDataHandle& Temp_struct_Variable_1, TArray<class AActor*>& CallFunc_GetAllActorsFromTargetData_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, class UFortAbilityTask_WaitTargetSelection* CallFunc_WaitTargetSelection_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, struct FGameplayAbilityTargetDataHandle& K2Node_CustomEvent_TargetData_4, const struct FGameplayTag& K2Node_CustomEvent_ApplicationTag_4, class AActor* CallFunc_Array_Get_Item, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_CommitAbility_ReturnValue_1, TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_2, const struct FGameplayAbilityTargetDataHandle& Temp_struct_Variable_2, class UFortAbilityTask_PlayMontageWaitTarget* CallFunc_PlayMontageInfoAndWaitForTrigger_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, const struct FGameplayCueParameters& CallFunc_MakeGameplayCueParameters_ReturnValue, bool K2Node_Event_bWasCancelled, bool CallFunc_IsValid_ReturnValue_2, const struct FGameplayAbilityActorInfo& CallFunc_GetActorInfo_ReturnValue, class AFortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn_1, bool K2Node_DynamicCast_bSuccess_1, const struct FGameplayAbilityTargetDataHandle& CallFunc_AbilityTargetDataFromActor_ReturnValue, TArray<struct FActiveGameplayEffectHandle>& CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue, const struct FGameplayTag& Temp_struct_Variable_3, const struct FGameplayEffectSpecHandle& CallFunc_SetupGE_Effect_Out, const struct FActiveGameplayEffectHandle& CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue, struct FGameplayAbilityTargetDataHandle& K2Node_CustomEvent_TargetData_2, const struct FGameplayTag& K2Node_CustomEvent_ApplicationTag_2, bool CallFunc_IsServer_ReturnValue_1, class AFortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, bool CallFunc_IsValid_ReturnValue_3, TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_3, bool CallFunc_K2_CommitAbility_ReturnValue_2, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_RandomFloatInRange_ReturnValue, struct FGameplayAbilityTargetDataHandle& K2Node_CustomEvent_TargetData_3, const struct FGameplayTag& K2Node_CustomEvent_ApplicationTag_3, float CallFunc_Add_FloatFloat_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, class AActor* CallFunc_GetAvatarActorFromActorInfo_ReturnValue, class AFortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess_2, TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_4, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FTransform& CallFunc_Conv_VectorToTransform_ReturnValue, const struct FGameplayAbilityTargetDataHandle& CallFunc_AbilityTargetDataFromActor_ReturnValue_1, class AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, TArray<struct FActiveGameplayEffectHandle>& CallFunc_K2_ApplyGameplayEffectSpecToTarget_ReturnValue, class AB_Decal_Flopper_JellyFish_C* CallFunc_FinishSpawningActor_ReturnValue, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, const struct FHitResult& CallFunc_K2_SetWorldRotation_SweepHitResult);
	void K2_CommitExecute();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void Targeted_D9F6D24A49ABE8D7AAC30785C1A8DF0C(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_D9F6D24A49ABE8D7AAC30785C1A8DF0C(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_39BB44CE4B5ACBFAF09C9C960F1A3644(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_39BB44CE4B5ACBFAF09C9C960F1A3644(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_39BB44CE4B5ACBFAF09C9C960F1A3644(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ShieldCalc(float CallFunc_GetShield_ReturnValue, float CallFunc_GetMaxShield_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_1, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue_1);
	void HealthCalc(float Temp_float_Variable, float CallFunc_GetHealth_ReturnValue, float CallFunc_GetMaxHealth_ReturnValue, float CallFunc_GetHealth_ReturnValue_1, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_GetMaxHealth_ReturnValue_1, bool Temp_bool_Variable, float CallFunc_GetValueAtLevel_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue_1, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue_1, float CallFunc_Subtract_FloatFloat_ReturnValue_2, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_SelectFloat_ReturnValue_1);
	void SetupGE(struct FGameplayEffectSpecHandle* Effect_Out, float CallFunc_SelectFloat_ReturnValue, const struct FGameplayEffectSpecHandle& CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue, const struct FGameplayEffectSpecHandle& CallFunc_AssignTagSetByCallerMagnitude_ReturnValue, const struct FGameplayEffectSpecHandle& CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_1);
	void MakeCustomMontageInfo();
	void OnMontageTriggered();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags, bool Temp_bool_Variable, class AFortPlayerPawnAthena* K2Node_DynamicCast_AsFort_Player_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetMaxShield_ReturnValue, float CallFunc_GetShield_ReturnValue, float CallFunc_GetHealth_ReturnValue, int32 CallFunc_Round_ReturnValue, int32 CallFunc_Round_ReturnValue_1, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_1, float CallFunc_GetMaxHealth_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Variable_1, float CallFunc_GetValueAtLevel_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_GetValueAtLevel_ReturnValue_1, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default_1, bool CallFunc_Less_FloatFloat_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_1) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_JellyFish_AOE_Heal_C">();
	}
	static class UGA_Athena_JellyFish_AOE_Heal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_JellyFish_AOE_Heal_C>();
	}
};
static_assert(alignof(UGA_Athena_JellyFish_AOE_Heal_C) == 0x000008, "Wrong alinment on UGA_Athena_JellyFish_AOE_Heal_C");
static_assert(sizeof(UGA_Athena_JellyFish_AOE_Heal_C) == 0x000BE8, "Wrong size on UGA_Athena_JellyFish_AOE_Heal_C");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, PlayerPawn) == 0x000AC0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealsHealth) == 0x000AC8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealsHealth' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HasHealthCap) == 0x000AC9, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HasHealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealthHealAmount) == 0x000ACC, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealthHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, TriggerDuration) == 0x000AD0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::TriggerDuration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ShouldHolster) == 0x000AD4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ShouldHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ItemIDToHolster) == 0x000AD8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ItemIDToHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, GC_PotionConsumed) == 0x000AE0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::GC_PotionConsumed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, GE_EffectToApply) == 0x000AE8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::GE_EffectToApply' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealsShields) == 0x000AF0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealsShields' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HasShieldCap) == 0x000AF1, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HasShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ShieldHealAmount) == 0x000AF4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ShieldHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_ShieldCap) == 0x000AF8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_ShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_ShieldAmount) == 0x000B20, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_ShieldAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_HealthCap) == 0x000B48, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_HealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_HealthAmount) == 0x000B70, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_HealthAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Tags_FailedResponse) == 0x000B98, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Tags_FailedResponse' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, IgnoreCalcsForEffectApplication) == 0x000BB8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::IgnoreCalcsForEffectApplication' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, AlwaysActivate) == 0x000BB9, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::AlwaysActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, EquippingCue) == 0x000BBC, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::EquippingCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, OverHealing) == 0x000BC4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::OverHealing' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealthIsEffective) == 0x000BC8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealthIsEffective' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ForceFeedback) == 0x000BD0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ExplodeCue) == 0x000BD8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ExplodeCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, TargetPawn) == 0x000BE0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::TargetPawn' has a wrong offset!");

}

